{"version":3,"sources":["../src/queryProcessor.js"],"names":["_","tagsModelToString","modelToString","STATS_BUCKETS","QueryProcessor","q","multiTenantsQuery","variablesHelper","capabilities","url","typeResources","numericMapping","point","value","timestamp","availMapping","target","options","then","postData","start","range","from","valueOf","end","to","order","tenants","tenant","resolve","id","metricIds","caps","QUERY_POST_ENDPOINTS","raw","ids","rawQuery","timeAggFn","singleStatLiveQuery","limit","metrics","singleStatQuery","statsQuery","rawQueryLegacy","TAGS_QUERY_LANGUAGE","tagsQL","undefined","length","tags","resolveForQL","when","type","rate","tenantsPrefixer","res","processRawResponse","allSeries","all","map","encodeURIComponent","metric","replace","params","processRawResponseLegacy","refId","timeSerie","prefix","datapoints","data","sortedData","sort","p1","p2","chain","zip","slice","filter","pair","point1","point2","value_diff","time_diff","seriesAggFn","statsQueryUnmerged","buckets","stacked","percentiles","getPercentilesToQuery","stats","join","processStatsResponse","multiTenantsData","flatten","prefixer","forEach","tenantData","result","percentile","getPercentileValue","stat","push","bucket","empty","findQuantileInBucket","types","metricsPerType","processUnmergedStatsResponse","series","allMetrics","metricId","hasOwnProperty","perc","percentileName","idx","indexOf","substring","quantile","percObj","find","p","toString","fnBucket","avg","min","max","processSingleStatResponse","Date","now","processSingleStatLiveResponse","reduceFunc","presentValues","reduce","a","b","latestPoints","timeSeries","dp","allTenantTimeSeries","oneTenantTimeSeries"],"mappings":"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","file":"queryProcessor.js","sourcesContent":["import _ from 'lodash';\nimport {modelToString as tagsModelToString} from './tagsKVPairsController';\n\nconst STATS_BUCKETS = 60;\n\nexport class QueryProcessor {\n\n  constructor(q, multiTenantsQuery, variablesHelper, capabilities, url, typeResources) {\n    this.q = q;\n    this.multiTenantsQuery = multiTenantsQuery;\n    this.variablesHelper = variablesHelper;\n    this.capabilities = capabilities;\n    this.url = url;\n    this.typeResources = typeResources;\n    this.numericMapping = point => [point.value, point.timestamp];\n    this.availMapping = point => [point.value == 'up' ? 1 : 0, point.timestamp];\n  }\n\n  run(target, options) {\n    return this.capabilities.then(caps => {\n      let postData = {\n        start: options.range.from.valueOf(),\n        end: options.range.to.valueOf(),\n        order: 'ASC'\n      };\n      let tenants = [null];\n      if (target.tenant) {\n        tenants = this.variablesHelper.resolve(target.tenant, options);\n      }\n      if (target.id) {\n        const metricIds = this.variablesHelper.resolve(target.id, options);\n        if (caps.QUERY_POST_ENDPOINTS) {\n          if (target.raw) {\n            postData.ids = metricIds;\n            return this.rawQuery(target, postData, tenants);\n          } else if (target.timeAggFn == 'live') {\n            // Need to change postData\n            return this.singleStatLiveQuery(target, {ids: metricIds, limit: 1}, tenants);\n          } else if (target.timeAggFn) {\n            // Query single stat\n            postData.metrics = metricIds;\n            return this.singleStatQuery(target, postData, tenants);\n          } else {\n            // Query stats for chart\n            postData.metrics = metricIds;\n            return this.statsQuery(target, postData, tenants);\n          }\n        } else {\n          return this.rawQueryLegacy(target, options.range, metricIds, tenants);\n        }\n      } else {\n        if (caps.TAGS_QUERY_LANGUAGE) {\n          if (target.tagsQL !== undefined && target.tagsQL.length > 0) {\n            postData.tags = this.variablesHelper.resolveForQL(target.tagsQL, options);\n          } else {\n            return this.q.when([]);\n          }\n        } else {\n          if (target.tags !== undefined && target.tags.length > 0) {\n            postData.tags = tagsModelToString(target.tags, this.variablesHelper, options);\n          } else {\n            return this.q.when([]);\n          }\n        }\n        if (target.raw) {\n          return this.rawQuery(target, postData, tenants);\n        } else if (target.timeAggFn == 'live') {\n          // Need to change postData\n          return this.singleStatLiveQuery(target, {tags: postData.tags, limit: 1}, tenants);\n        } else if (target.timeAggFn) {\n          // Query single stat\n          return this.singleStatQuery(target, postData, tenants);\n        } else {\n          // Query stats for chart\n          return this.statsQuery(target, postData, tenants);\n        }\n      }\n    });\n  }\n\n  rawQuery(target, postData, tenants) {\n    const url = `${this.url}/${this.typeResources[target.type]}/${target.rate ? 'rate' : 'raw'}/query`;\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(res => this.tenantsPrefixer(res))\n      .then(allSeries => this.processRawResponse(target, allSeries));\n  }\n\n  rawQueryLegacy(target, range, metricIds, tenants) {\n    return this.q.all(metricIds.map(metric => {\n      const url = `${this.url}/${this.typeResources[target.type]}/${encodeURIComponent(metric).replace('+', '%20')}/data`;\n      const params = {\n        start: range.from.valueOf(),\n        end: range.to.valueOf()\n      };\n      return this.multiTenantsQuery(tenants, url, params, null, 'GET')\n        .then(res => this.tenantsPrefixer(res))\n        .then(allSeries => this.processRawResponseLegacy(target, metric, allSeries));\n    }));\n  }\n\n  processRawResponse(target, allSeries) {\n    return allSeries.map(timeSerie => {\n      return {\n        refId: target.refId,\n        target: timeSerie.prefix + timeSerie.id,\n        datapoints: timeSerie.data.map(target.type == 'availability' ? this.availMapping : this.numericMapping)\n      };\n    });\n  }\n\n  processRawResponseLegacy(target, metric, data) {\n    let datapoints;\n    if (target.type == 'availability') {\n      datapoints = data.map(this.availMapping);\n    } else if (!target.rate) {\n      datapoints = data.map(this.numericMapping);\n    } else {\n      let sortedData = data.sort((p1, p2)=> p1.timestamp - p2.timestamp);\n      datapoints = _.chain(sortedData)\n        .zip(sortedData.slice(1))\n        .filter(pair => {\n          return pair[1] // Exclude the last pair\n            && (target.type != 'counter' || pair[0].value <= pair[1].value); // Exclude counter resets\n        })\n        .map(pair => {\n          let point1 = pair[0], point2 = pair[1];\n          let timestamp = point2.timestamp;\n          let value_diff = point2.value - point1.value;\n          let time_diff = point2.timestamp - point1.timestamp;\n          let rate = 60000 * value_diff / time_diff;\n          return [rate, timestamp];\n        })\n        .value();\n    }\n    return {\n      refId: target.refId,\n      target: metric,\n      datapoints: datapoints\n    };\n  }\n\n  statsQuery(target, postData, tenants) {\n    if (target.seriesAggFn === 'none') {\n      return this.statsQueryUnmerged(target, postData, tenants);\n    }\n    const url = `${this.url}/${this.typeResources[target.type]}/stats/query`;\n    delete postData.order;\n    postData.buckets = STATS_BUCKETS;\n    postData.stacked = target.seriesAggFn === 'sum';\n    const percentiles = this.getPercentilesToQuery(target.stats);\n    if (percentiles.length > 0) {\n      postData.percentiles = percentiles.join(',');\n    }\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(multiTenantsData => this.processStatsResponse(target, multiTenantsData));\n  }\n\n  processStatsResponse(target, multiTenantsData) {\n    // Response example: [ { tenant: 't1', result: [...] }, { tenant: 't2', result: [...] } ]\n    // Detailed `data[i].result`: [{start:1234, end:5678, avg:100.0, min:90.0, max:110.0, (...), percentiles:[{quantile: 90, value: 105.0}]}]\n    const flatten = [];\n    const prefixer = multiTenantsData.length > 1 ? (tenant) => `[${tenant}] ` : (tenant) => '';\n    multiTenantsData.forEach(tenantData => {\n      if (tenantData.result) {\n        target.stats.forEach(stat => {\n          const percentile = this.getPercentileValue(stat);\n          if (percentile) {\n            flatten.push({\n              refId: target.refId,\n              target: prefixer(tenantData.tenant) + stat,\n              datapoints: tenantData.result.filter(bucket => !bucket.empty)\n                .map(bucket => [this.findQuantileInBucket(percentile, bucket), bucket.start])\n            });\n          } else {\n            flatten.push({\n              refId: target.refId,\n              target: prefixer(tenantData.tenant) + stat,\n              datapoints: tenantData.result.filter(bucket => !bucket.empty).map(bucket => [bucket[stat], bucket.start])\n            });\n          }\n        });\n      }\n    });\n    return flatten;\n  }\n\n  statsQueryUnmerged(target, postData, tenants) {\n    const url = `${this.url}/metrics/stats/query`;\n    delete postData.order;\n    postData.buckets = STATS_BUCKETS;\n    postData.types = [target.type];\n    if (postData.metrics) {\n      const metricsPerType = {};\n      metricsPerType[target.type] = postData.metrics;\n      postData.metrics = metricsPerType;\n    }\n    const percentiles = this.getPercentilesToQuery(target.stats);\n    if (percentiles.length > 0) {\n      postData.percentiles = percentiles.join(',');\n    }\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(multiTenantsData => this.processUnmergedStatsResponse(target, multiTenantsData));\n  }\n\n  processUnmergedStatsResponse(target, multiTenantsData) {\n    // Response example: [ { tenant: 't1', result: {...} }, { tenant: 't2', result: {...} } ]\n    // Detailed `data[i].result`:\n    // {\"gauge\": {\"my_metric\": [\n    //    {start:1234, end:5678, avg:100.0, min:90.0, max:110.0, (...), percentiles:[{quantile: 90, value: 105.0}]}\n    // ]}}\n    const series = [];\n    const prefixer = multiTenantsData.length > 1 ? (tenant) => `[${tenant}] ` : (tenant) => '';\n    multiTenantsData.forEach(tenantData => {\n      if (tenantData.result) {\n        const allMetrics = tenantData.result[target.type];\n        const prefix = prefixer(tenantData.tenant);\n        for (let metricId in allMetrics) {\n          if (allMetrics.hasOwnProperty(metricId)) {\n            const buckets = allMetrics[metricId];\n            target.stats.forEach(stat => {\n              const percentile = this.getPercentileValue(stat);\n              if (percentile) {\n                series.push({\n                  refId: target.refId,\n                  target: `${prefix}${metricId} [${stat}]`,\n                  datapoints: buckets.filter(bucket => !bucket.empty)\n                    .map(bucket => [this.findQuantileInBucket(percentile, bucket), bucket.start])\n                });\n              } else {\n                series.push({\n                  refId: target.refId,\n                  target: `${prefix}${metricId} [${stat}]`,\n                  datapoints: buckets.filter(bucket => !bucket.empty).map(bucket => [bucket[stat], bucket.start])\n                });\n              }\n            });\n          }\n        }\n      }\n    });\n    return series;\n  }\n\n  getPercentilesToQuery(stats) {\n    return stats.map(this.getPercentileValue).filter(perc => perc != null);\n  }\n\n  getPercentileValue(percentileName) {\n    const idx = percentileName.indexOf(' %ile');\n    return (idx >= 0) ? percentileName.substring(0, idx) : null;\n  }\n\n  findQuantileInBucket(quantile, bucket) {\n    if (bucket.percentiles) {\n      const percObj = bucket.percentiles.find(p => p.quantile.toString().indexOf(quantile) >= 0);\n      if (percObj) {\n        return percObj.value;\n      }\n    }\n    return null;\n  }\n\n  singleStatQuery(target, postData, tenants) {\n    // Query for singlestat => we just ask for a single bucket\n    // But because of that we need to override Grafana behaviour, and manage ourselves the min/max/avg/etc. selection\n    let fnBucket;\n    if (target.timeAggFn == 'avg') {\n      fnBucket = bucket => bucket.avg;\n    } else if (target.timeAggFn == 'min') {\n      fnBucket = bucket => bucket.min;\n    } else if (target.timeAggFn == 'max') {\n      fnBucket = bucket => bucket.max;\n    } // no else case. \"live\" case was handled before\n    const url = `${this.url}/${this.typeResources[target.type]}/stats/query`;\n    delete postData.order;\n    postData.buckets = 1;\n    postData.stacked = target.seriesAggFn === 'sum';\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(multiTenantsData => this.processSingleStatResponse(target, fnBucket, multiTenantsData));\n  }\n\n  processSingleStatResponse(target, fnBucket, multiTenantsData) {\n    return _.flatten(multiTenantsData.map(tenantData => {\n      if (tenantData.result) {\n        return tenantData.result.map(bucket => {\n          return {\n            refId: target.refId,\n            target: 'Aggregate',\n            datapoints: [[fnBucket(bucket), bucket.start]]\n          };\n        });\n      }\n    }));\n  }\n\n  singleStatLiveQuery(target, postData, tenants) {\n    const url = `${this.url}/${this.typeResources[target.type]}/${target.rate ? 'rate' : 'raw'}/query`;\n    // Set start to now - 5m\n    postData.start = Date.now() - 300000;\n    return this.multiTenantsQuery(tenants, url, null, postData, 'POST')\n      .then(multiTenantsData => this.processSingleStatLiveResponse(target, multiTenantsData));\n  }\n\n  processSingleStatLiveResponse(target, multiTenantsData) {\n    let reduceFunc;\n    if (target.seriesAggFn === 'sum') {\n      reduceFunc = (presentValues => presentValues.reduce((a,b) => a+b));\n    } else {\n      reduceFunc = (presentValues => presentValues.reduce((a,b) => a+b) / presentValues.length);\n    }\n    return _.flatten(multiTenantsData.map(tenantData => {\n      if (tenantData.result) {\n        let datapoints;\n        const latestPoints = tenantData.result.filter(timeSeries => timeSeries.data.length > 0)\n            .map(timeSeries => timeSeries.data[0]);\n        if (latestPoints.length === 0) {\n          datapoints = [];\n        } else {\n          datapoints = [[reduceFunc(latestPoints.map(dp => dp.value)), latestPoints[0].timestamp]];\n        }\n        return [{\n          refId: target.refId,\n          target: 'Aggregate',\n          datapoints: datapoints\n        }];\n      }\n    }));\n  }\n\n  tenantsPrefixer(allTenantTimeSeries) {\n    // Exemple of input:\n    // [ { tenant: 't1', result: [ {id: metricA, data: []} ] }, { tenant: 't2', result: [ {id: metricB, data: []} ] } ]\n    const flatten = [];\n    const prefixer = allTenantTimeSeries.length > 1 ? (tenant) => `[${tenant}] ` : (tenant) => '';\n    allTenantTimeSeries.forEach(oneTenantTimeSeries => {\n      if (oneTenantTimeSeries.result) {\n        oneTenantTimeSeries.result.forEach(timeSeries => {\n          timeSeries.prefix = prefixer(oneTenantTimeSeries.tenant);\n          flatten.push(timeSeries);\n        })\n      }\n    })\n    return flatten;\n  }\n}\n"]}