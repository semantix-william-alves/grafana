{"version":3,"sources":["../src/tagsKVPairsController.js"],"names":["segmentsToModel","segments","tags","i","length","key","value","val","fake","push","name","modelToSegments","segmentFactory","_","reduce","list","tag","newKey","newOperator","newKeyValue","modelToString","variablesHelper","options","map","resolve","join","TagsKVPairsController","uiSegmentSrv","datasource","$q","fetchAllTagsCapability","targetSupplier","removeTagsSegment","newSegment","newPlusButton","segment","$index","type","getTagKeys","then","angular","copy","keys","suggestTags","text","transformToSegments","suggestTagKeys","when","index","splice"],"mappings":"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","file":"tagsKVPairsController.js","sourcesContent":["import _ from 'lodash';\n\nexport class TagsKVPairsController {\n\n  constructor(uiSegmentSrv, datasource, $q, fetchAllTagsCapability, targetSupplier)  {\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.datasource = datasource;\n    this.$q = $q;\n    this.fetchAllTagsCapability = fetchAllTagsCapability;\n    this.targetSupplier = targetSupplier;\n    this.removeTagsSegment = uiSegmentSrv.newSegment({fake: true, value: '-- Remove tag --'});\n    this.modelToSegments = modelToSegments;\n    this.segmentsToModel = segmentsToModel;\n  }\n\n  initTagsSegments() {\n    let segments = modelToSegments(this.targetSupplier().tags, this.uiSegmentSrv);\n    segments.push(this.uiSegmentSrv.newPlusButton());\n    return segments;\n  }\n\n  getTagsSegments(segments, segment, $index) {\n    if (segment.type === 'plus-button') {\n      return this.getTagKeys();\n    } else if (segment.type === 'key')  {\n      return this.getTagKeys()\n          .then(keys => [angular.copy(this.removeTagsSegment), ...keys]);\n    } else if (segment.type === 'value')  {\n      let key = segments[$index-2].value;\n      return this.datasource.suggestTags(this.targetSupplier(), key)\n        .then(tags => [{text: ' *', value: ' *'}, ...tags])\n        .then(this.uiSegmentSrv.transformToSegments(false));\n    }\n  }\n\n  getTagKeys() {\n    if (this.fetchAllTagsCapability) {\n      return this.datasource.suggestTagKeys(this.targetSupplier())\n        .then(this.uiSegmentSrv.transformToSegments(false));\n    } else {\n      return this.$q.when([]);\n    }\n  }\n\n  tagsSegmentChanged(segments, segment, index) {\n    if (segment.value === this.removeTagsSegment.value) {\n      segments.splice(index, 4);\n    } else if (segment.type === 'plus-button') {\n      segments.splice(index, 1);\n      segments.splice(index, 0,\n        this.uiSegmentSrv.newKey(segment.value),\n        this.uiSegmentSrv.newOperator(':'),\n        this.uiSegmentSrv.newKeyValue(' *'),\n        this.uiSegmentSrv.newOperator(','),\n        this.uiSegmentSrv.newPlusButton());\n    } else {\n      segments[index] = segment;\n    }\n    this.targetSupplier().tags = segmentsToModel(segments);\n  }\n}\n\nexport function segmentsToModel(segments) {\n  // or \"serialize\"\n  let tags = [];\n  for (let i = 0; i < segments.length - 2; i += 4) {\n    const key = segments[i].value;\n    let val = segments[i+2].fake ? '*' : segments[i+2].value;\n    if (!val || val === ' *') {\n      // '*' character get a special treatment in grafana so we had to use ' *' instead\n      val = '*';\n    }\n    tags.push({name: key, value: val});\n  }\n  return tags;\n}\n\nexport function modelToSegments(tags, segmentFactory) {\n  // or \"deserialize\"\n  return _.reduce(tags, (list, tag) => {\n      list.push(segmentFactory.newKey(tag.name));\n      list.push(segmentFactory.newOperator(':'));\n      if (tag.value === '*') {\n        list.push(segmentFactory.newKeyValue(' *'));\n      } else {\n        list.push(segmentFactory.newKeyValue(tag.value));\n      }\n      list.push(segmentFactory.newOperator(','));\n      return list;\n    }, []);\n}\n\nexport function modelToString(tags, variablesHelper, options) {\n  return tags.map(tag => {\n    let value;\n    if (tag.value === ' *') {\n      // '*' character get a special treatment in grafana so we had to use ' *' instead\n      value = '*';\n    } else if (variablesHelper) {\n      value = variablesHelper.resolve(tag.value, options).join('|');\n    } else {\n      value = tag.value;\n    }\n    return `${tag.name}:${value}`;\n  }).join(',');\n}\n"]}