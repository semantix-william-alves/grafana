{"version":3,"sources":["../../../spec/variables_spec.js"],"names":["describe","ctx","templateSrv","variables","name","values","replace","target","scopedVars","fmt","result","join","forEach","v","value","options","variablesHelper","it","replaced","expect","to","equal","done","resolved","resolve","deep","resolveForQL","app","container"],"mappings":"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","file":"variables_spec.js","sourcesContent":["import {VariablesHelper} from \"../variablesHelper\";\nimport Q from \"q\";\n\ndescribe('Variables', () => {\n  const ctx = {\n    templateSrv: {\n      variables: [{\n        name: 'app',\n        values: ['app_1', 'app_2']\n      },{\n        name: 'container',\n        values: ['1234', '5678', '90']\n      },{\n        name: 'host',\n        values: 'cartago'\n      }],\n      replace: (target, scopedVars, fmt) => {\n        // Quick & simple emulation of the real templateSrv.replace\n        let result = target;\n        if (!fmt) {\n          fmt = values => (typeof values == \"string\") ? values : `{${values.join(',')}}`;\n        }\n        ctx.templateSrv.variables.forEach(v => {\n          const values = scopedVars[v.name] ? scopedVars[v.name].value : v.values;\n          result = result.replace('$' + v.name, fmt(values));\n        });\n        return result;\n      }\n    },\n    options: {\n      scopedVars: {}\n    }\n  };\n  ctx.variablesHelper = new VariablesHelper(ctx.templateSrv);\n\n  it('should mock correctly', done => {\n    // (Testing the test)\n    const replaced = ctx.templateSrv.replace(\"$app\", ctx.templateSrv.variables);\n    expect(replaced).to.equal('{app_1,app_2}');\n    done();\n  });\n\n  it('should resolve single variable', done => {\n    const resolved = ctx.variablesHelper.resolve(\"$app/memory/usage\", ctx.options);\n    expect(resolved).to.deep.equal(['app_1/memory/usage', 'app_2/memory/usage']);\n    done();\n  });\n\n  it('should resolve single variable with single value', done => {\n    const resolved = ctx.variablesHelper.resolve(\"$host/memory/usage\", ctx.options);\n    expect(resolved).to.deep.equal(['cartago/memory/usage']);\n    done();\n  });\n\n  it('should resolve multiple variables', done => {\n    const resolved = ctx.variablesHelper.resolve(\"$app/$container/memory/usage\", ctx.options);\n    expect(resolved).to.deep.equal([\n      'app_1/1234/memory/usage',\n      'app_2/1234/memory/usage',\n      'app_1/5678/memory/usage',\n      'app_2/5678/memory/usage',\n      'app_1/90/memory/usage',\n      'app_2/90/memory/usage'\n    ]);\n    done();\n  });\n\n  it('should resolve to string', done => {\n    const resolved = ctx.variablesHelper.resolveForQL(\"app IN [$app] AND container NOT IN ['a', $container, 'z']\", ctx.options);\n    expect(resolved).to.deep.equal(\"app IN ['app_1','app_2'] AND container NOT IN ['a', '1234','5678','90', 'z']\");\n    done();\n  });\n\n  it('should resolve to string with single value', done => {\n    const resolved = ctx.variablesHelper.resolveForQL(\"host IN [$host]\", ctx.options);\n    expect(resolved).to.deep.equal(\"host IN ['cartago']\");\n    done();\n  });\n\n  it('should resolve variable in word with multiple occurrences', done => {\n    const resolved = ctx.variablesHelper.resolve(\"$app/$app_memory_usage\", ctx.options);\n    expect(resolved).to.deep.equal(['app_1/app_1_memory_usage', 'app_2/app_2_memory_usage']);\n    done();\n  });\n\n  it('should resolve with scopedVars', done => {\n    const resolved = ctx.variablesHelper.resolve(\"$host/$app/memory/usage\", {\n      scopedVars: {\n        app: {\n          value: \"app_1\"\n        }\n      }\n    });\n    expect(resolved).to.deep.equal(['cartago/app_1/memory/usage']);\n    done();\n  });\n\n  it('should resolve to string with scopedVars', done => {\n    const resolved = ctx.variablesHelper.resolveForQL(\"app IN [$app] AND container NOT IN ['a', $container, 'z']\", {\n      scopedVars: {\n        container: {\n          value: \"1234\"\n        }\n      }\n    });\n    expect(resolved).to.deep.equal(\"app IN ['app_1','app_2'] AND container NOT IN ['a', '1234', 'z']\");\n    done();\n  });\n});\n"]}