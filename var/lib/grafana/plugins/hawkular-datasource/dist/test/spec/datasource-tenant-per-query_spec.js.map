{"version":3,"sources":["../../../spec/datasource-tenant-per-query_spec.js"],"names":["describe","ctx","instanceSettings","jsonData","tenant","isTenantPerQuery","beforeEach","$q","backendSrv","datasourceRequest","when","data","templateSrv","replace","target","vars","ds","it","options","range","from","to","targets","id","type","rate","request","expect","deep","equal","start","end","ids","order","status","timestamp","value","query","then","result","have","length","datapoints","done","err","variables","name","ireq","annotation","annotationQuery","time","title","tags","be","undefined","text","seriesAggFn","stats","raw","buckets","types","min","max","avg","dataRetention","suggestMetrics","tagsQL","suggestTags","suggestTagKeys"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AAEAA,SAAS,qCAAT,EAAgD,YAAM;AACpD,MAAIC,MAAM,EAAV;AACA,MAAMC,mBAAmB,4BAAzB;AACA;AACA,SAAOA,iBAAiBC,QAAjB,CAA0BC,MAAjC;AACAF,mBAAiBC,QAAjB,CAA0BE,gBAA1B,GAA6C,IAA7C;;AAEAC,aAAW,YAAM;AACfL,QAAIM,EAAJ;AACAN,QAAIO,UAAJ,GAAiB,EAAjB;AACAP,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,aAAOR,IAAIM,EAAJ,CAAOG,IAAP,CAAY,EAACC,MAAM,EAAC,0BAA0B,QAA3B,EAAP,EAAZ,CAAP;AACD,KAFD;AAGAV,QAAIW,WAAJ,GAAkB;AAChBC,eAAS,iBAACC,MAAD,EAASC,IAAT;AAAA,eAAkBD,MAAlB;AAAA;AADO,KAAlB;AAGAb,QAAIe,EAAJ,GAAS,uBAAed,gBAAf,EAAiCD,IAAIM,EAArC,EAAyCN,IAAIO,UAA7C,EAAyDP,IAAIW,WAA7D,CAAT;AACD,GAVD;;AAYAK,KAAG,0CAAH,EAA+C,gBAAQ;;AAErD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,eAAS,CAAC;AACRC,YAAI,QADI;AAERC,cAAM,OAFE;AAGRC,cAAM,KAHE;AAIRrB,gBAAQ;AAJA,OAAD;AALG,KAAd;;AAaAH,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,6CAAwBiB,OAAxB,EAAiC,MAAjC,EAAyC,kBAAzC,EAA6D,QAA7D;AACAC,aAAOD,QAAQf,IAAf,EAAqBU,EAArB,CAAwBO,IAAxB,CAA6BC,KAA7B,CAAmC;AACjCC,eAAOZ,QAAQC,KAAR,CAAcC,IADY;AAEjCW,aAAKb,QAAQC,KAAR,CAAcE,EAFc;AAGjCW,aAAK,CAAC,QAAD,CAH4B;AAIjCC,eAAO;AAJ0B,OAAnC;;AAOA,aAAOhC,IAAIM,EAAJ,CAAOG,IAAP,CAAY;AACjBwB,gBAAQ,GADS;AAEjBvB,cAAM,CAAC;AACLY,cAAI,QADC;AAELZ,gBAAM,CAAC;AACLwB,uBAAW,EADN;AAELC,mBAAO;AAFF,WAAD,EAGH;AACDD,uBAAW,EADV;AAEDC,mBAAO;AAFN,WAHG;AAFD,SAAD;AAFW,OAAZ,CAAP;AAaD,KAtBD;;AAwBAnC,QAAIe,EAAJ,CAAOqB,KAAP,CAAanB,OAAb,EAAsBoB,IAAtB,CAA2B,kBAAU;AACnCX,aAAOY,OAAO5B,IAAd,EAAoBU,EAApB,CAAuBmB,IAAvB,CAA4BC,MAA5B,CAAmC,CAAnC;AACAd,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAeG,MAAtB,EAA8BO,EAA9B,CAAiCQ,KAAjC,CAAuC,QAAvC;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAe+B,UAAtB,EAAkCrB,EAAlC,CAAqCO,IAArC,CAA0CC,KAA1C,CAAgD,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,EAAW,CAAC,EAAD,EAAK,EAAL,CAAX,CAAhD;AACD,KAJD,EAIGS,IAJH,CAIQ;AAAA,aAAKK,MAAL;AAAA,KAJR,EAIqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAJrB;AAKD,GA5CD;;AA8CA3B,KAAG,6CAAH,EAAkD,gBAAQ;;AAExD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,eAAS,CAAC;AACRC,YAAI,QADI;AAERC,cAAM,OAFE;AAGRC,cAAM,KAHE;AAIRrB,gBAAQ;AAJA,OAAD;AALG,KAAd;AAYAH,QAAIW,WAAJ,CAAgBiC,SAAhB,GAA4B,CAAC;AAC3BC,YAAM;AADqB,KAAD,CAA5B;AAGA7C,QAAIW,WAAJ,CAAgBC,OAAhB,GAA0B,UAACC,MAAD,EAASC,IAAT,EAAkB;AAC1CY,aAAOb,MAAP,EAAeO,EAAf,CAAkBQ,KAAlB,CAAwB,SAAxB;AACA,aAAO,SAAP;AACD,KAHD;;AAKA,QAAIkB,OAAO,CAAX;AACA9C,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,6CAAwBiB,OAAxB,EAAiC,MAAjC,EAAyC,kBAAzC,EAA6D,MAAMqB,IAAnE;AACApB,aAAOD,QAAQf,IAAf,EAAqBU,EAArB,CAAwBO,IAAxB,CAA6BC,KAA7B,CAAmC;AACjCC,eAAOZ,QAAQC,KAAR,CAAcC,IADY;AAEjCW,aAAKb,QAAQC,KAAR,CAAcE,EAFc;AAGjCW,aAAK,CAAC,QAAD,CAH4B;AAIjCC,eAAO;AAJ0B,OAAnC;AAMAc;;AAEA,aAAO9C,IAAIM,EAAJ,CAAOG,IAAP,CAAY;AACjBwB,gBAAQ,GADS;AAEjBvB,cAAM,CAAC;AACLY,cAAI,QADC;AAELZ,gBAAM,CAAC;AACLwB,uBAAW,EADN;AAELC,mBAAO,IAAIW;AAFN,WAAD,EAGH;AACDZ,uBAAW,EADV;AAEDC,mBAAO,IAAIW;AAFV,WAHG;AAFD,SAAD;AAFW,OAAZ,CAAP;AAaD,KAvBD;;AAyBA9C,QAAIe,EAAJ,CAAOqB,KAAP,CAAanB,OAAb,EAAsBoB,IAAtB,CAA2B,kBAAU;AACnCX,aAAOY,OAAO5B,IAAd,EAAoBU,EAApB,CAAuBmB,IAAvB,CAA4BC,MAA5B,CAAmC,CAAnC;AACAd,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAeG,MAAtB,EAA8BO,EAA9B,CAAiCQ,KAAjC,CAAuC,aAAvC;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAe+B,UAAtB,EAAkCrB,EAAlC,CAAqCO,IAArC,CAA0CC,KAA1C,CAAgD,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,EAAU,CAAC,CAAD,EAAI,EAAJ,CAAV,CAAhD;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAeG,MAAtB,EAA8BO,EAA9B,CAAiCQ,KAAjC,CAAuC,aAAvC;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAe+B,UAAtB,EAAkCrB,EAAlC,CAAqCO,IAArC,CAA0CC,KAA1C,CAAgD,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,EAAU,CAAC,EAAD,EAAK,EAAL,CAAV,CAAhD;AACD,KAND,EAMGS,IANH,CAMQ;AAAA,aAAKK,MAAL;AAAA,KANR,EAMqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KANrB;AAOD,GAvDD;;AAyDA3B,KAAG,6CAAH,EAAkD,gBAAQ;;AAExD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZ2B,kBAAY;AACVX,eAAO,aADG;AAEVS,cAAM,UAFI;AAGVtB,cAAM,SAHI;AAIVpB,gBAAQ;AAJE;AALA,KAAd;;AAaAH,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,6CAAwBiB,OAAxB,EAAiC,MAAjC,EAAyC,mBAAzC,EAA8D,QAA9D;;AAEA,aAAOzB,IAAIM,EAAJ,CAAOG,IAAP,CAAY;AACjBwB,gBAAQ,GADS;AAEjBvB,cAAM,CAAC;AACLY,cAAI,aADC;AAELZ,gBAAM,CAAC;AACLwB,uBAAW,EADN;AAELC,mBAAO;AAFF,WAAD,EAGH;AACDD,uBAAW,EADV;AAEDC,mBAAO;AAFN,WAHG;AAFD,SAAD;AAFW,OAAZ,CAAP;AAaD,KAhBD;;AAkBAnC,QAAIe,EAAJ,CAAOiC,eAAP,CAAuB/B,OAAvB,EAAgCoB,IAAhC,CAAqC,kBAAU;AAC7CX,aAAOY,MAAP,EAAelB,EAAf,CAAkBmB,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAd,aAAOY,OAAO,CAAP,EAAUS,UAAjB,EAA6B3B,EAA7B,CAAgCO,IAAhC,CAAqCC,KAArC,CAA2CX,QAAQ8B,UAAnD;AACArB,aAAOY,OAAO,CAAP,EAAUW,IAAjB,EAAuB7B,EAAvB,CAA0BQ,KAA1B,CAAgC,EAAhC;AACAF,aAAOY,OAAO,CAAP,EAAUY,KAAjB,EAAwB9B,EAAxB,CAA2BQ,KAA3B,CAAiC,UAAjC;AACAF,aAAOY,OAAO,CAAP,EAAUa,IAAjB,EAAuB/B,EAAvB,CAA0BgC,EAA1B,CAA6BC,SAA7B;AACA3B,aAAOY,OAAO,CAAP,EAAUgB,IAAjB,EAAuBlC,EAAvB,CAA0BQ,KAA1B,CAAgC,OAAhC;;AAEAF,aAAOY,OAAO,CAAP,EAAUS,UAAjB,EAA6B3B,EAA7B,CAAgCO,IAAhC,CAAqCC,KAArC,CAA2CX,QAAQ8B,UAAnD;AACArB,aAAOY,OAAO,CAAP,EAAUW,IAAjB,EAAuB7B,EAAvB,CAA0BQ,KAA1B,CAAgC,EAAhC;AACAF,aAAOY,OAAO,CAAP,EAAUY,KAAjB,EAAwB9B,EAAxB,CAA2BQ,KAA3B,CAAiC,UAAjC;AACAF,aAAOY,OAAO,CAAP,EAAUa,IAAjB,EAAuB/B,EAAvB,CAA0BgC,EAA1B,CAA6BC,SAA7B;AACA3B,aAAOY,OAAO,CAAP,EAAUgB,IAAjB,EAAuBlC,EAAvB,CAA0BQ,KAA1B,CAAgC,MAAhC;AACD,KAbD,EAaGS,IAbH,CAaQ;AAAA,aAAKK,MAAL;AAAA,KAbR,EAaqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAbrB;AAcD,GA/CD;;AAiDA3B,KAAG,uCAAH,EAA4C,gBAAQ;AAClD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,eAAS,CAAC;AACRkC,qBAAa,MADL;AAERC,eAAO,CAAC,KAAD,CAFC;AAGRL,cAAM,CAAC,EAACN,MAAM,MAAP,EAAeV,OAAO,QAAtB,EAAD,CAHE;AAIRZ,cAAM,OAJE;AAKRC,cAAM,KALE;AAMRiC,aAAK,KANG;AAORtD,gBAAQ;AAPA,OAAD;AALG,KAAd;;AAgBAH,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,6CAAwBiB,OAAxB,EAAiC,MAAjC,EAAyC,qBAAzC,EAAgE,QAAhE;AACAC,aAAOD,QAAQf,IAAf,EAAqBU,EAArB,CAAwBO,IAAxB,CAA6BC,KAA7B,CAAmC;AACjCC,eAAOZ,QAAQC,KAAR,CAAcC,IADY;AAEjCW,aAAKb,QAAQC,KAAR,CAAcE,EAFc;AAGjC+B,cAAM,aAH2B;AAIjCO,iBAAS,EAJwB;AAKjCC,eAAO,CAAC,OAAD;AAL0B,OAAnC;;AAQA,aAAO3D,IAAIM,EAAJ,CAAOG,IAAP,CAAY;AACjBwB,gBAAQ,GADS;AAEjBvB,cAAM,EAAC,SACL,EAAE,WACA,CAAC;AACCmB,qBAAO,EADR;AAECC,mBAAK,EAFN;AAGC8B,mBAAK,EAHN;AAICC,mBAAK,EAJN;AAKCC,mBAAK;AALN,aAAD;AADF;AADI;AAFW,OAAZ,CAAP;AAcD,KAxBD;;AA0BA9D,QAAIe,EAAJ,CAAOqB,KAAP,CAAanB,OAAb,EAAsBoB,IAAtB,CAA2B,kBAAU;AACnCX,aAAOY,OAAO5B,IAAd,EAAoBU,EAApB,CAAuBmB,IAAvB,CAA4BC,MAA5B,CAAmC,CAAnC;AACAd,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAeG,MAAtB,EAA8BO,EAA9B,CAAiCQ,KAAjC,CAAuC,eAAvC;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAe+B,UAAtB,EAAkCrB,EAAlC,CAAqCO,IAArC,CAA0CC,KAA1C,CAAgD,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,CAAhD;AACD,KAJD,EAIGS,IAJH,CAIQ;AAAA,aAAKK,MAAL;AAAA,KAJR,EAIqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAJrB;AAKD,GAhDD;;AAkDA3B,KAAG,0CAAH,EAA+C,gBAAQ;AACrD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,eAAS,CAAC;AACRkC,qBAAa,MADL;AAERC,eAAO,CAAC,KAAD,EAAO,KAAP,CAFC;AAGRL,cAAM,CAAC,EAACN,MAAM,MAAP,EAAeV,OAAO,QAAtB,EAAD,CAHE;AAIRZ,cAAM,OAJE;AAKRC,cAAM,KALE;AAMRiC,aAAK,KANG;AAORtD,gBAAQ;AAPA,OAAD;AALG,KAAd;AAeAH,QAAIW,WAAJ,CAAgBiC,SAAhB,GAA4B,CAAC;AAC3BC,YAAM;AADqB,KAAD,CAA5B;AAGA7C,QAAIW,WAAJ,CAAgBC,OAAhB,GAA0B,UAACC,MAAD,EAASC,IAAT,EAAkB;AAC1CY,aAAOb,MAAP,EAAeO,EAAf,CAAkBQ,KAAlB,CAAwB,SAAxB;AACA,aAAO,SAAP;AACD,KAHD;;AAKA,QAAIkB,OAAO,CAAX;AACA9C,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,6CAAwBiB,OAAxB,EAAiC,MAAjC,EAAyC,qBAAzC,EAAgE,MAAMqB,IAAtE;AACApB,aAAOD,QAAQf,IAAf,EAAqBU,EAArB,CAAwBO,IAAxB,CAA6BC,KAA7B,CAAmC;AACjCC,eAAOZ,QAAQC,KAAR,CAAcC,IADY;AAEjCW,aAAKb,QAAQC,KAAR,CAAcE,EAFc;AAGjC+B,cAAM,aAH2B;AAIjCO,iBAAS,EAJwB;AAKjCC,eAAO,CAAC,OAAD;AAL0B,OAAnC;AAOAb;;AAEA,aAAO9C,IAAIM,EAAJ,CAAOG,IAAP,CAAY;AACjBwB,gBAAQ,GADS;AAEjBvB,cAAM,EAAC,SACL,EAAE,WACA,CAAC;AACCmB,qBAAO,EADR;AAECC,mBAAK,EAFN;AAGC8B,mBAAK,IAAId,IAHV;AAICe,mBAAK,IAAIf;AAJV,aAAD;AADF;AADI;AAFW,OAAZ,CAAP;AAaD,KAxBD;;AA0BA9C,QAAIe,EAAJ,CAAOqB,KAAP,CAAanB,OAAb,EAAsBoB,IAAtB,CAA2B,kBAAU;AACnCX,aAAOY,OAAO5B,IAAd,EAAoBU,EAApB,CAAuBmB,IAAvB,CAA4BC,MAA5B,CAAmC,CAAnC;AACAd,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAeG,MAAtB,EAA8BO,EAA9B,CAAiCQ,KAAjC,CAAuC,oBAAvC;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAe+B,UAAtB,EAAkCrB,EAAlC,CAAqCO,IAArC,CAA0CC,KAA1C,CAAgD,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,CAAhD;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAeG,MAAtB,EAA8BO,EAA9B,CAAiCQ,KAAjC,CAAuC,oBAAvC;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAe+B,UAAtB,EAAkCrB,EAAlC,CAAqCO,IAArC,CAA0CC,KAA1C,CAAgD,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,CAAhD;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAeG,MAAtB,EAA8BO,EAA9B,CAAiCQ,KAAjC,CAAuC,oBAAvC;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAe+B,UAAtB,EAAkCrB,EAAlC,CAAqCO,IAArC,CAA0CC,KAA1C,CAAgD,CAAC,CAAC,EAAD,EAAK,EAAL,CAAD,CAAhD;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAeG,MAAtB,EAA8BO,EAA9B,CAAiCQ,KAAjC,CAAuC,oBAAvC;AACAF,aAAOY,OAAO5B,IAAP,CAAY,CAAZ,EAAe+B,UAAtB,EAAkCrB,EAAlC,CAAqCO,IAArC,CAA0CC,KAA1C,CAAgD,CAAC,CAAC,CAAD,EAAI,EAAJ,CAAD,CAAhD;AACD,KAVD,EAUGS,IAVH,CAUQ;AAAA,aAAKK,MAAL;AAAA,KAVR,EAUqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAVrB;AAWD,GA9DD;;AAgEA3B,KAAG,2CAAH,EAAgD,gBAAQ;AACtDhB,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,6CAAwBiB,OAAxB,EAAiC,KAAjC,EAAwC,sCAAxC,EAAgF,QAAhF;AACA,aAAOzB,IAAIM,EAAJ,CAAOG,IAAP,CAAY;AACjBwB,gBAAQ,GADS;AAEjBvB,cAAM,CAAC;AACLY,cAAI,SADC;AAEL6B,gBAAM;AACJ,oBAAQ;AADJ,WAFD;AAKLY,yBAAe,CALV;AAMLxC,gBAAM;AAND,SAAD,EAOJ;AACAD,cAAI,SADJ;AAEA6B,gBAAM;AACJ,oBAAQ;AADJ,WAFN;AAKAY,yBAAe,CALf;AAMAxC,gBAAM;AANN,SAPI;AAFW,OAAZ,CAAP;AAkBD,KApBD;;AAsBAvB,QAAIe,EAAJ,CAAOiD,cAAP,CAAsB,EAACzC,MAAM,OAAP,EAAgB0C,QAAQ,cAAxB,EAAwC9D,QAAQ,QAAhD,EAAtB,EAAiFkC,IAAjF,CAAsF,kBAAU;AAC9FX,aAAOY,MAAP,EAAelB,EAAf,CAAkBmB,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAd,aAAOY,OAAO,CAAP,CAAP,EAAkBlB,EAAlB,CAAqBO,IAArB,CAA0BC,KAA1B,CAAgC,EAAE0B,MAAM,SAAR,EAAmBnB,OAAO,SAA1B,EAAhC;AACAT,aAAOY,OAAO,CAAP,CAAP,EAAkBlB,EAAlB,CAAqBO,IAArB,CAA0BC,KAA1B,CAAgC,EAAE0B,MAAM,SAAR,EAAmBnB,OAAO,SAA1B,EAAhC;AACD,KAJD,EAIGE,IAJH,CAIQ;AAAA,aAAKK,MAAL;AAAA,KAJR,EAIqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAJrB;AAKD,GA5BD;;AA8BA3B,KAAG,gDAAH,EAAqD,gBAAQ;AAC3DhB,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,6CAAwBiB,OAAxB,EAAiC,KAAjC,EAAwC,oBAAxC,EAA8D,QAA9D;;AAEA,aAAOzB,IAAIM,EAAJ,CAAOG,IAAP,CAAY;AACjBwB,gBAAQ,GADS;AAEjBvB,cAAM;AACJ,kBAAQ,CAAC,SAAD,EAAY,KAAZ;AADJ;AAFW,OAAZ,CAAP;AAMD,KATD;;AAWAV,QAAIe,EAAJ,CAAOmD,WAAP,CAAmB,EAAC3C,MAAM,OAAP,EAAgBpB,QAAQ,QAAxB,EAAnB,EAAsD,MAAtD,EAA8DkC,IAA9D,CAAmE,kBAAU;AAC3EX,aAAOY,MAAP,EAAelB,EAAf,CAAkBmB,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAd,aAAOY,OAAO,CAAP,CAAP,EAAkBlB,EAAlB,CAAqBO,IAArB,CAA0BC,KAA1B,CAAgC,EAAE0B,MAAM,SAAR,EAAmBnB,OAAO,SAA1B,EAAhC;AACAT,aAAOY,OAAO,CAAP,CAAP,EAAkBlB,EAAlB,CAAqBO,IAArB,CAA0BC,KAA1B,CAAgC,EAAE0B,MAAM,KAAR,EAAenB,OAAO,KAAtB,EAAhC;AACD,KAJD,EAIGE,IAJH,CAIQ;AAAA,aAAKK,MAAL;AAAA,KAJR,EAIqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAJrB;AAKD,GAjBD;;AAmBA3B,KAAG,oDAAH,EAAyD,gBAAQ;AAC/DhB,QAAIO,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,6CAAwBiB,OAAxB,EAAiC,KAAjC,EAAwC,cAAxC,EAAwD,QAAxD;AACA,aAAOzB,IAAIM,EAAJ,CAAOG,IAAP,CAAY;AACjBwB,gBAAQ,GADS;AAEjBvB,cAAM,CAAC,MAAD,EAAS,KAAT;AAFW,OAAZ,CAAP;AAID,KAND;;AAQAV,QAAIe,EAAJ,CAAOoD,cAAP,CAAsB,EAAChE,QAAQ,QAAT,EAAtB,EAA0CkC,IAA1C,CAA+C,kBAAU;AACvDX,aAAOY,MAAP,EAAelB,EAAf,CAAkBmB,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAd,aAAOY,OAAO,CAAP,CAAP,EAAkBlB,EAAlB,CAAqBO,IAArB,CAA0BC,KAA1B,CAAgC,EAAE0B,MAAM,MAAR,EAAgBnB,OAAO,MAAvB,EAAhC;AACAT,aAAOY,OAAO,CAAP,CAAP,EAAkBlB,EAAlB,CAAqBO,IAArB,CAA0BC,KAA1B,CAAgC,EAAE0B,MAAM,KAAR,EAAenB,OAAO,KAAtB,EAAhC;AACD,KAJD,EAIGE,IAJH,CAIQ;AAAA,aAAKK,MAAL;AAAA,KAJR,EAIqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAJrB;AAKD,GAdD;AAeD,CA7VD","file":"datasource-tenant-per-query_spec.js","sourcesContent":["import {Datasource} from '../module';\nimport Q from 'q';\nimport {getSettings, expectRequestWithTenant} from './test-util';\n\ndescribe('HawkularDatasource tenant per query', () => {\n  let ctx = {};\n  const instanceSettings = getSettings();\n  // Remove global tenant \n  delete instanceSettings.jsonData.tenant;\n  instanceSettings.jsonData.isTenantPerQuery = true;\n\n  beforeEach(() => {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.backendSrv.datasourceRequest = request => {\n      return ctx.$q.when({data: {'Implementation-Version': '0.22.0'}})\n    };\n    ctx.templateSrv = {\n      replace: (target, vars) => target\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  it('should query raw data with ad-hoc tenant', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        id: 'memory',\n        type: 'gauge',\n        rate: false,\n        tenant: 'ad-hoc'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequestWithTenant(request, 'POST', 'gauges/raw/query', 'ad-hoc');\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        ids: ['memory'],\n        order: 'ASC'\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'memory',\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].target).to.equal('memory');\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query raw data with templated tenant', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        id: 'memory',\n        type: 'gauge',\n        rate: false,\n        tenant: '$tenant'\n      }]\n    };\n    ctx.templateSrv.variables = [{\n      name: 'tenant'\n    }];\n    ctx.templateSrv.replace = (target, vars) => {\n      expect(target).to.equal('$tenant');\n      return '{t1,t2}';\n    };\n\n    let ireq = 1;\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequestWithTenant(request, 'POST', 'gauges/raw/query', 't' + ireq);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        ids: ['memory'],\n        order: 'ASC'\n      });\n      ireq++;\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'memory',\n          data: [{\n            timestamp: 13,\n            value: 3 * ireq\n          }, {\n            timestamp: 19,\n            value: 4 * ireq\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(2);\n      expect(result.data[0].target).to.equal('[t1] memory');\n      expect(result.data[0].datapoints).to.deep.equal([[6, 13], [8, 19]]);\n      expect(result.data[1].target).to.equal('[t2] memory');\n      expect(result.data[1].datapoints).to.deep.equal([[9, 13], [12, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query annotations with ad-hoc tenant', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: 'my.timeline',\n        name: 'Timeline',\n        type: 'strings',\n        tenant: 'ad-hoc'\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequestWithTenant(request, 'POST', 'strings/raw/query', 'ad-hoc');\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'my.timeline',\n          data: [{\n            timestamp: 13,\n            value: 'start'\n          }, {\n            timestamp: 19,\n            value: 'stop'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal(options.annotation);\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal('Timeline');\n      expect(result[0].tags).to.be.undefined;\n      expect(result[0].text).to.equal('start');\n\n      expect(result[1].annotation).to.deep.equal(options.annotation);\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal('Timeline');\n      expect(result[1].tags).to.be.undefined;\n      expect(result[1].text).to.equal('stop');\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query stats with ad-hoc tenant', done => {\n    let options = {\n      range: {\n        from: 20,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'none',\n        stats: ['min'],\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false,\n        raw: false,\n        tenant: 'ad-hoc'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequestWithTenant(request, 'POST', 'metrics/stats/query', 'ad-hoc');\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type:memory',\n        buckets: 60,\n        types: ['gauge']\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: {'gauge':\n          { 'gauge_1':\n            [{\n              start: 20,\n              end: 25,\n              min: 15,\n              max: 25,\n              avg: 20.25\n            }]\n          }\n        }\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].target).to.equal('gauge_1 [min]');\n      expect(result.data[0].datapoints).to.deep.equal([[15, 20]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query stats with templated tenant', done => {\n    let options = {\n      range: {\n        from: 20,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'none',\n        stats: ['min','max'],\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false,\n        raw: false,\n        tenant: '$tenant'\n      }]\n    };\n    ctx.templateSrv.variables = [{\n      name: 'tenant'\n    }];\n    ctx.templateSrv.replace = (target, vars) => {\n      expect(target).to.equal('$tenant');\n      return '{t1,t2}';\n    };\n\n    let ireq = 1;\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequestWithTenant(request, 'POST', 'metrics/stats/query', 't' + ireq);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type:memory',\n        buckets: 60,\n        types: ['gauge']\n      });\n      ireq++;\n\n      return ctx.$q.when({\n        status: 200,\n        data: {'gauge':\n          { 'gauge_1':\n            [{\n              start: 20,\n              end: 25,\n              min: 3 * ireq,\n              max: 4 * ireq\n            }]\n          }\n        }\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(4);\n      expect(result.data[0].target).to.equal('[t1] gauge_1 [max]');\n      expect(result.data[0].datapoints).to.deep.equal([[8, 20]]);\n      expect(result.data[1].target).to.equal('[t1] gauge_1 [min]');\n      expect(result.data[1].datapoints).to.deep.equal([[6, 20]]);\n      expect(result.data[2].target).to.equal('[t2] gauge_1 [max]');\n      expect(result.data[2].datapoints).to.deep.equal([[12, 20]]);\n      expect(result.data[3].target).to.equal('[t2] gauge_1 [min]');\n      expect(result.data[3].datapoints).to.deep.equal([[9, 20]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should suggest metrics with ad-hoc tenant', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequestWithTenant(request, 'GET', 'metrics?type=gauge&tags=host=cartago', 'ad-hoc');\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'gauge_1',\n          tags: {\n            'host': 'cartago'\n          },\n          dataRetention: 7,\n          type: 'gauge'\n        },{\n          id: 'gauge_2',\n          tags: {\n            'host': 'cartago'\n          },\n          dataRetention: 7,\n          type: 'gauge'\n        }]\n      });\n    };\n\n    ctx.ds.suggestMetrics({type: 'gauge', tagsQL: 'host=cartago', tenant: 'ad-hoc'}).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0]).to.deep.equal({ text: 'gauge_1', value: 'gauge_1' });\n      expect(result[1]).to.deep.equal({ text: 'gauge_2', value: 'gauge_2' });\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should get tags suggestions with ad-hoc tenant', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequestWithTenant(request, 'GET', 'gauges/tags/host:*', 'ad-hoc');\n\n      return ctx.$q.when({\n        status: 200,\n        data: {\n          'host': ['cartago', 'rio']\n        }\n      });\n    };\n\n    ctx.ds.suggestTags({type: 'gauge', tenant: 'ad-hoc'}, 'host').then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0]).to.deep.equal({ text: 'cartago', value: 'cartago' });\n      expect(result[1]).to.deep.equal({ text: 'rio', value: 'rio' });\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should get tag keys suggestions with ad-hoc tenant', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequestWithTenant(request, 'GET', 'metrics/tags', 'ad-hoc');\n      return ctx.$q.when({\n        status: 200,\n        data: ['host', 'app']\n      });\n    };\n\n    ctx.ds.suggestTagKeys({tenant: 'ad-hoc'}).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0]).to.deep.equal({ text: 'host', value: 'host' });\n      expect(result[1]).to.deep.equal({ text: 'app', value: 'app' });\n    }).then(v => done(), err => done(err));\n  });\n});\n"]}