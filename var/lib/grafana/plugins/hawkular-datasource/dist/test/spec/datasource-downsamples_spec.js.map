{"version":3,"sources":["../../../spec/datasource-downsamples_spec.js"],"names":["describe","ctx","instanceSettings","beforeEach","$q","backendSrv","datasourceRequest","when","data","templateSrv","replace","target","vars","ds","it","options","range","from","to","targets","seriesAggFn","timeAggFn","tags","name","value","type","rate","request","expect","deep","equal","start","end","buckets","stacked","status","min","max","avg","query","then","result","have","length","datapoints","done","err","limit","id","timestamp","stats","raw","percentiles","types"],"mappings":"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","file":"datasource-downsamples_spec.js","sourcesContent":["import {Datasource} from '../module';\nimport Q from 'q';\nimport {getSettings, expectRequest} from './test-util';\n\ndescribe('HawkularDatasource for downsamples', () => {\n  let ctx = {};\n  const instanceSettings = getSettings();\n\n  beforeEach(() => {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.backendSrv.datasourceRequest = request => {\n      return ctx.$q.when({data: {'Implementation-Version': '0.22.0'}})\n    };\n    ctx.templateSrv = {\n      replace: (target, vars) => target\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  it('should return aggregated stats max/stacked', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        timeAggFn: 'max',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'gauges/stats/query');\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type:memory',\n        buckets: 1,\n        stacked: true\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          start: 13,\n          end: 19,\n          min: 35,\n          max: 46,\n          avg: 40.5\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[46, 13]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return aggregated stats avg/not stacked', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'avg',\n        timeAggFn: 'avg',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'gauges/stats/query');\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type:memory',\n        buckets: 1,\n        stacked: false\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          start: 13,\n          end: 19,\n          min: 15,\n          max: 25,\n          avg: 20.25\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[20.25, 13]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return live stats stacked', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        timeAggFn: 'live',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'gauges/raw/query');\n      expect(request.data.limit).to.equal(1);\n      expect(request.data.tags).to.equal('type:memory');\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'myhost.metric.memory.1',\n          data: [{\n            timestamp: 18,\n            value: 21\n          }]\n        },{\n          id: 'myhost.metric.memory.2',\n          data: [{\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[46, 18]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return live stats not stacked', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'avg',\n        timeAggFn: 'live',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'gauges/raw/query');\n      expect(request.data.limit).to.equal(1);\n      expect(request.data.tags).to.equal('type:memory');\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'myhost.metric.memory.1',\n          data: [{\n            timestamp: 18,\n            value: 21\n          }]\n        },{\n          id: 'myhost.metric.memory.2',\n          data: [{\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[23, 18]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query summed stats avg and percentile', done => {\n    let options = {\n      range: {\n        from: 20,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        stats: ['avg', '90 %ile'],\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false,\n        raw: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'gauges/stats/query');\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type:memory',\n        percentiles: '90',\n        buckets: 60,\n        stacked: true\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          start: 20,\n          end: 25,\n          min: 15,\n          max: 25,\n          avg: 20.25,\n          percentiles: [{'value':23.1,'originalQuantile':'90','quantile':90.0}]\n        }, {\n          start: 25,\n          end: 30,\n          min: 18,\n          max: 28,\n          avg: 23.25,\n          percentiles: [{'value':26.1,'originalQuantile':'90','quantile':90.0}]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(2);\n      expect(result.data[1].target).to.equal('avg');\n      expect(result.data[1].datapoints).to.deep.equal([[20.25, 20], [23.25, 25]]);\n      expect(result.data[0].target).to.equal('90 %ile');\n      expect(result.data[0].datapoints).to.deep.equal([[23.1, 20], [26.1, 25]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query unmerged stats min and percentile', done => {\n    let options = {\n      range: {\n        from: 20,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'none',\n        stats: ['min', '95 %ile'],\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false,\n        raw: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'metrics/stats/query');\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type:memory',\n        percentiles: '95',\n        buckets: 60,\n        types: ['gauge']\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: {'gauge':\n          { 'gauge_1':\n            [{\n              start: 20,\n              end: 25,\n              min: 15,\n              max: 25,\n              avg: 20.25,\n              percentiles: [{'value':23.1,'originalQuantile':'95','quantile':95.0}]\n            }, {\n              start: 25,\n              end: 30,\n              min: 18,\n              max: 28,\n              avg: 23.25,\n              percentiles: [{'value':26.1,'originalQuantile':'95','quantile':95.0}]\n            }],\n            'gauge_2':\n            [{\n              start: 20,\n              end: 25,\n              min: 20,\n              max: 30,\n              avg: 25.25,\n              percentiles: [{'value':28.1,'originalQuantile':'95','quantile':95.0}]\n            }, {\n              start: 25,\n              end: 30,\n              min: 23,\n              max: 33,\n              avg: 28.25,\n              percentiles: [{'value':31.1,'originalQuantile':'95','quantile':95.0}]\n            }]\n          }\n        }\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(4);\n      expect(result.data[1].target).to.equal('gauge_1 [min]');\n      expect(result.data[1].datapoints).to.deep.equal([[15, 20], [18, 25]]);\n      expect(result.data[0].target).to.equal('gauge_1 [95 %ile]');\n      expect(result.data[0].datapoints).to.deep.equal([[23.1, 20], [26.1, 25]]);\n      expect(result.data[3].target).to.equal('gauge_2 [min]');\n      expect(result.data[3].datapoints).to.deep.equal([[20, 20], [23, 25]]);\n      expect(result.data[2].target).to.equal('gauge_2 [95 %ile]');\n      expect(result.data[2].datapoints).to.deep.equal([[28.1, 20], [31.1, 25]]);\n    }).then(v => done(), err => done(err));\n  });\n});\n"]}