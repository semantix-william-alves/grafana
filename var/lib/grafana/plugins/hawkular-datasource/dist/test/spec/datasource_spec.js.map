{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","instanceSettings","beforeEach","$q","backendSrv","datasourceRequest","when","data","templateSrv","replace","target","vars","ds","it","query","targets","then","expect","result","to","have","property","with","length","done","err","options","range","from","id","type","rate","first","request","deep","equal","start","end","ids","order","status","timestamp","value","map","t","include","members","datapoints","variables","name","url","string","tags","dataRetention","suggestMetrics","tagsQL","text","suggestTags","suggestTagKeys"],"mappings":"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","file":"datasource_spec.js","sourcesContent":["import {Datasource} from '../module';\nimport Q from 'q';\nimport {getSettings, expectRequest} from './test-util';\n\ndescribe('HawkularDatasource', () => {\n  let ctx = {};\n  const instanceSettings = getSettings();\n\n  beforeEach(() => {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.backendSrv.datasourceRequest = request => {\n      return ctx.$q.when({data: {'Implementation-Version': '0.22.0'}})\n    };\n    ctx.templateSrv = {\n      replace: (target, vars) => target\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  it('should return an empty array when no targets are set', done => {\n    ctx.ds.query({targets: []}).then(result => {\n      expect(result).to.have.property('data').with.length(0);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return the server results when a target is set', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        id: 'memory',\n        type: 'gauge',\n        rate: false\n      }, {\n        id: 'packets',\n        type: 'counter',\n        rate: true\n      }]\n    };\n\n    let first = true;\n    let id;\n    ctx.backendSrv.datasourceRequest = request => {\n      if (first) {\n        first = false;\n        id = 'memory';\n        expectRequest(request, 'POST', 'gauges/raw/query');\n        expect(request.data).to.deep.equal({\n          start: options.range.from,\n          end: options.range.to,\n          ids: [id],\n          order: 'ASC'\n        });\n      } else {\n        id = 'packets';\n        expectRequest(request, 'POST', 'counters/rate/query');\n        expect(request.data).to.deep.equal({\n          start: options.range.from,\n          end: options.range.to,\n          ids: [id],\n          order: 'ASC'\n        });\n      }\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: id,\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['memory', 'packets']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return multiple results with templated target', done => {\n\n    const options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        id: '$app/memory',\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.templateSrv.variables = [{\n      name: 'app'\n    }];\n    ctx.templateSrv.replace = (target, vars) => {\n      expect(target).to.equal('$app');\n      return '{app_1,app_2}';\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expect(request.url).to.have.string('gauges/raw/query');\n      expect(request.data.ids).to.include.members(['app_1/memory', 'app_2/memory']);\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'app_1/memory',\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        },{\n          id: 'app_2/memory',\n          data: [{\n            timestamp: 13,\n            value: 28\n          }, {\n            timestamp: 19,\n            value: 32\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['app_1/memory', 'app_2/memory']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[28, 13], [32, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query by tags', done => {\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        tags: [\n          {name: 'type', value: 'memory'},\n          {name: 'host', value: 'myhost'}\n        ],\n        type: 'gauge',\n        rate: false\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'gauges/raw/query');\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: 'type:memory,host:myhost',\n        order: 'ASC'\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'myhost.metric.memory.1',\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        },{\n          id: 'myhost.metric.memory.2',\n          data: [{\n            timestamp: 13,\n            value: 20\n          }, {\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['myhost.metric.memory.1', 'myhost.metric.memory.2']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[20, 13], [25, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query availability', done => {\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        id: 'myapp/health',\n        type: 'availability'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'availability/raw/query');\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'myapp/health',\n          data: [{\n            timestamp: 13,\n            value: 'up'\n          }, {\n            timestamp: 19,\n            value: 'down'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(result => {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].target).to.equal('myapp/health');\n      expect(result.data[0].datapoints).to.deep.equal([[1, 13], [0, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should suggest metrics', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'GET', 'metrics?type=gauge&tags=host=cartago');\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'gauge_1',\n          tags: {\n            'host': 'cartago'\n          },\n          dataRetention: 7,\n          type: 'gauge'\n        },{\n          id: 'gauge_2',\n          tags: {\n            'host': 'cartago'\n          },\n          dataRetention: 7,\n          type: 'gauge'\n        }]\n      });\n    };\n\n    ctx.ds.suggestMetrics({type: 'gauge', tagsQL: 'host=cartago'}).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0]).to.deep.equal({ text: 'gauge_1', value: 'gauge_1' });\n      expect(result[1]).to.deep.equal({ text: 'gauge_2', value: 'gauge_2' });\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should get tags suggestions', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'GET', 'gauges/tags/host:*');\n\n      return ctx.$q.when({\n        status: 200,\n        data: {\n          'host': ['cartago', 'rio']\n        }\n      });\n    };\n\n    ctx.ds.suggestTags({type: 'gauge'}, 'host').then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0]).to.deep.equal({ text: 'cartago', value: 'cartago' });\n      expect(result[1]).to.deep.equal({ text: 'rio', value: 'rio' });\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should get no suggestions on unknown tag', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'GET', 'gauges/tags/host:*');\n      return ctx.$q.when({\n        status: 204,\n        data: {}\n      });\n    };\n    ctx.ds.suggestTags({type: 'gauge'}, 'host').then(result => {\n      expect(result).to.have.length(0);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should get tag keys suggestions', done => {\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'GET', 'metrics/tags');\n      return ctx.$q.when({\n        status: 200,\n        data: ['host', 'app']\n      });\n    };\n\n    ctx.ds.suggestTagKeys({}).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0]).to.deep.equal({ text: 'host', value: 'host' });\n      expect(result[1]).to.deep.equal({ text: 'app', value: 'app' });\n    }).then(v => done(), err => done(err));\n  });\n});\n"]}