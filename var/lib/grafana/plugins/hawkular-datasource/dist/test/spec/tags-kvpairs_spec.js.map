{"version":3,"sources":["../../../spec/tags-kvpairs_spec.js"],"names":["describe","segmentFactory","newSegment","arg","newKey","type","value","key","newCondition","cond","newOperator","op","newKeyValue","v","it","result","expect","to","deep","equal","done","segments","name","undefined"],"mappings":"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","file":"tags-kvpairs_spec.js","sourcesContent":["import {segmentsToModel, modelToSegments} from '../tagsKVPairsController';\nimport Q from 'q';\n\ndescribe('TagsKVPairs', () => {\n\n  const segmentFactory = {\n    newSegment: arg => arg,\n    newKey: key => ({type: 'key', value: key}),\n    newCondition: cond => ({type: 'condition', value: cond}),\n    newOperator: op => ({type: 'operator', value: op}),\n    newKeyValue: v => ({type: 'value', value: v})\n  };\n\n  it('should convert empty segments to empty model', done => {\n    const result = segmentsToModel([]);\n    expect(result).to.deep.equal([]);\n    done();\n  });\n\n  it('should convert segments to model', done => {\n    const segments = [\n      { type: 'key', value: 'hostname' },\n      { type: 'operator', value: ':' },\n      { type: 'value', value: ' *' },\n      { type: 'operator', value: ',' },\n      { type: 'key', value: 'pod' },\n      { type: 'operator', value: ':' },\n      { type: 'value', value: 'unknown' },\n      { type: 'operator', value: ',' }\n    ];\n    const result = segmentsToModel(segments);\n    expect(result).to.deep.equal([\n      { name: 'hostname', value: '*' },\n      { name: 'pod', value: 'unknown' }\n    ]);\n    done();\n  });\n\n  it('should convert empty model to empty segments', done => {\n    const result = modelToSegments([], segmentFactory);\n    expect(result).to.deep.equal([]);\n    done();\n  });\n\n  it('should convert undefined model to empty segments', done => {\n    const result = modelToSegments(undefined, segmentFactory);\n    expect(result).to.deep.equal([]);\n    done();\n  });\n\n  it('should convert model to segments', done => {\n    const result = modelToSegments([\n      { name: 'hostname', value: '*' },\n      { name: 'pod', value: 'unknown' }\n    ], segmentFactory);\n    expect(result).to.deep.equal([\n      { type: 'key', value: 'hostname' },\n      { type: 'operator', value: ':' },\n      { type: 'value', value: ' *' },\n      { type: 'operator', value: ',' },\n      { type: 'key', value: 'pod' },\n      { type: 'operator', value: ':' },\n      { type: 'value', value: 'unknown' },\n      { type: 'operator', value: ',' }\n    ]);\n    done();\n  });\n});\n"]}