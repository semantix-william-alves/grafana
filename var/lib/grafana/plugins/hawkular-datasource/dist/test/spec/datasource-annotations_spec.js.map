{"version":3,"sources":["../../../spec/datasource-annotations_spec.js"],"names":["describe","ctx","instanceSettings","beforeEach","$q","backendSrv","datasourceRequest","when","data","templateSrv","replace","target","vars","ds","it","options","range","from","to","annotation","query","name","type","request","status","id","timestamp","value","annotationQuery","then","expect","result","have","length","deep","equal","time","title","tags","be","undefined","text","done","err","variables","ids","ctime"],"mappings":";;AAAA;;AACA;;;;AACA;;;;AAEAA,SAAS,gCAAT,EAA2C,YAAM;AAC/C,MAAIC,MAAM,EAAV;AACA,MAAMC,mBAAmB,4BAAzB;;AAEAC,aAAW,YAAM;AACfF,QAAIG,EAAJ;AACAH,QAAII,UAAJ,GAAiB,EAAjB;AACAJ,QAAII,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,aAAOL,IAAIG,EAAJ,CAAOG,IAAP,CAAY,EAACC,MAAM,EAAC,0BAA0B,QAA3B,EAAP,EAAZ,CAAP;AACD,KAFD;AAGAP,QAAIQ,WAAJ,GAAkB;AAChBC,eAAS,iBAACC,MAAD,EAASC,IAAT;AAAA,eAAkBD,MAAlB;AAAA;AADO,KAAlB;AAGAV,QAAIY,EAAJ,GAAS,uBAAeX,gBAAf,EAAiCD,IAAIG,EAArC,EAAyCH,IAAII,UAA7C,EAAyDJ,IAAIQ,WAA7D,CAAT;AACD,GAVD;;AAYAK,KAAG,uCAAH,EAA4C,gBAAQ;;AAElD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,kBAAY;AACVC,eAAO,aADG;AAEVC,cAAM,UAFI;AAGVC,cAAM;AAHI;AALA,KAAd;;AAYArB,QAAII,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,mCAAciB,OAAd,EAAuB,MAAvB,EAA+B,mBAA/B;;AAEA,aAAOtB,IAAIG,EAAJ,CAAOG,IAAP,CAAY;AACjBiB,gBAAQ,GADS;AAEjBhB,cAAM,CAAC;AACLiB,cAAI,aADC;AAELjB,gBAAM,CAAC;AACLkB,uBAAW,EADN;AAELC,mBAAO;AAFF,WAAD,EAGH;AACDD,uBAAW,EADV;AAEDC,mBAAO;AAFN,WAHG;AAFD,SAAD;AAFW,OAAZ,CAAP;AAaD,KAhBD;;AAkBA1B,QAAIY,EAAJ,CAAOe,eAAP,CAAuBb,OAAvB,EAAgCc,IAAhC,CAAqC,kBAAU;AAC7CC,aAAOC,MAAP,EAAeb,EAAf,CAAkBc,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAH,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,aAAT,EAAwBC,MAAM,UAA9B,EAA0CC,MAAM,SAAhD,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,UAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BqB,EAA1B,CAA6BC,SAA7B;AACAV,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,OAAhC;;AAEAL,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,aAAT,EAAwBC,MAAM,UAA9B,EAA0CC,MAAM,SAAhD,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,UAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BqB,EAA1B,CAA6BC,SAA7B;AACAV,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,MAAhC;AACD,KAbD,EAaGN,IAbH,CAaQ;AAAA,aAAKa,MAAL;AAAA,KAbR,EAaqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAbrB;AAcD,GA9CD;;AAgDA7B,KAAG,oCAAH,EAAyC,gBAAQ;;AAE/C,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,kBAAY;AACVC,eAAO,aADG;AAEVC,cAAM,UAFI;AAGVC,cAAM;AAHI;AALA,KAAd;;AAYArB,QAAII,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,mCAAciB,OAAd,EAAuB,MAAvB,EAA+B,mBAA/B;;AAEA,aAAOtB,IAAIG,EAAJ,CAAOG,IAAP,CAAY;AACjBiB,gBAAQ,GADS;AAEjBhB,cAAM,CAAC;AACLiB,cAAI,aADC;AAELjB,gBAAM,CAAC;AACLkB,uBAAW,EADN;AAELC,mBAAO,OAFF;AAGLW,kBAAM;AACJ,sBAAQ,QADJ;AAEJ,sBAAQ;AAFJ;AAHD,WAAD,EAOH;AACDZ,uBAAW,EADV;AAEDC,mBAAO,MAFN;AAGDW,kBAAM;AACJ,sBAAQ,QADJ;AAEJ,sBAAQ;AAFJ;AAHL,WAPG;AAFD,SAAD;AAFW,OAAZ,CAAP;AAqBD,KAxBD;;AA0BArC,QAAIY,EAAJ,CAAOe,eAAP,CAAuBb,OAAvB,EAAgCc,IAAhC,CAAqC,kBAAU;AAC7CC,aAAOC,MAAP,EAAeb,EAAf,CAAkBc,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAH,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,aAAT,EAAwBC,MAAM,UAA9B,EAA0CC,MAAM,SAAhD,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,UAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BiB,KAA1B,CAAgC,cAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,OAAhC;;AAEAL,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,aAAT,EAAwBC,MAAM,UAA9B,EAA0CC,MAAM,SAAhD,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,UAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BiB,KAA1B,CAAgC,aAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,MAAhC;AACD,KAbD,EAaGN,IAbH,CAaQ;AAAA,aAAKa,MAAL;AAAA,KAbR,EAaqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAbrB;AAcD,GAtDD;;AAwDA7B,KAAG,yCAAH,EAA8C,gBAAQ;AACpD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,kBAAY;AACVC,eAAO,eADG;AAEVC,cAAM,UAFI;AAGVC,cAAM;AAHI;AALA,KAAd;;AAYArB,QAAIQ,WAAJ,CAAgBmC,SAAhB,GAA4B,CAAC;AAC3BvB,YAAM;AADqB,KAAD,CAA5B;AAGApB,QAAIQ,WAAJ,CAAgBC,OAAhB,GAA0B,UAACC,MAAD,EAASC,IAAT,EAAkB;AAC1CkB,aAAOnB,MAAP,EAAeO,EAAf,CAAkBiB,KAAlB,CAAwB,MAAxB;AACA,aAAO,WAAP;AACD,KAHD;;AAKAlC,QAAII,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,mCAAciB,OAAd,EAAuB,MAAvB,EAA+B,mBAA/B;AACAO,aAAOP,QAAQf,IAAR,CAAaqC,GAApB,EAAyB3B,EAAzB,CAA4BgB,IAA5B,CAAiCC,KAAjC,CAAuC,CAAC,eAAD,EAAkB,aAAlB,CAAvC;;AAEA,aAAOlC,IAAIG,EAAJ,CAAOG,IAAP,CAAY;AACjBiB,gBAAQ,GADS;AAEjBhB,cAAM,CAAC;AACLiB,cAAI,eADC;AAELjB,gBAAM,CAAC;AACLkB,uBAAW,EADN;AAELC,mBAAO;AAFF,WAAD;AAFD,SAAD,EAMJ;AACAF,cAAI,aADJ;AAEAjB,gBAAM,CAAC;AACLkB,uBAAW,EADN;AAELC,mBAAO;AAFF,WAAD;AAFN,SANI;AAFW,OAAZ,CAAP;AAgBD,KApBD;;AAsBA1B,QAAIY,EAAJ,CAAOe,eAAP,CAAuBb,OAAvB,EAAgCc,IAAhC,CAAqC,kBAAU;AAC7CC,aAAOC,MAAP,EAAeb,EAAf,CAAkBc,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAH,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,eAAT,EAA0BC,MAAM,UAAhC,EAA4CC,MAAM,SAAlD,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,UAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BiB,KAA1B,CAAgC,eAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,OAAhC;;AAEAL,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,eAAT,EAA0BC,MAAM,UAAhC,EAA4CC,MAAM,SAAlD,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,UAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BiB,KAA1B,CAAgC,aAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,OAAhC;AACD,KAbD,EAaGN,IAbH,CAaQ;AAAA,aAAKa,MAAL;AAAA,KAbR,EAaqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAbrB;AAcD,GAzDD;;AA2DA7B,KAAG,sCAAH,EAA2C,gBAAQ;;AAEjD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,kBAAY;AACVC,eAAO,UADG;AAEVC,cAAM,OAFI;AAGVC,cAAM;AAHI;AALA,KAAd;;AAYArB,QAAII,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,mCAAciB,OAAd,EAAuB,MAAvB,EAA+B,wBAA/B;;AAEA,aAAOtB,IAAIG,EAAJ,CAAOG,IAAP,CAAY;AACjBiB,gBAAQ,GADS;AAEjBhB,cAAM,CAAC;AACLiB,cAAI,UADC;AAELjB,gBAAM,CAAC;AACLkB,uBAAW,EADN;AAELC,mBAAO;AAFF,WAAD,EAGH;AACDD,uBAAW,EADV;AAEDC,mBAAO;AAFN,WAHG;AAFD,SAAD;AAFW,OAAZ,CAAP;AAaD,KAhBD;;AAkBA1B,QAAIY,EAAJ,CAAOe,eAAP,CAAuBb,OAAvB,EAAgCc,IAAhC,CAAqC,kBAAU;AAC7CC,aAAOC,MAAP,EAAeb,EAAf,CAAkBc,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAH,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,UAAT,EAAqBC,MAAM,OAA3B,EAAoCC,MAAM,cAA1C,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,OAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BqB,EAA1B,CAA6BC,SAA7B;AACAV,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,IAAhC;;AAEAL,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,UAAT,EAAqBC,MAAM,OAA3B,EAAoCC,MAAM,cAA1C,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,OAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BqB,EAA1B,CAA6BC,SAA7B;AACAV,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,MAAhC;AACD,KAbD,EAaGN,IAbH,CAaQ;AAAA,aAAKa,MAAL;AAAA,KAbR,EAaqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAbrB;AAcD,GA9CD;;AAgDA7B,KAAG,sCAAH,EAA2C,gBAAQ;;AAEjD,QAAIC,UAAU;AACZC,aAAO;AACLC,cAAM,EADD;AAELC,YAAI;AAFC,OADK;AAKZC,kBAAY;AACVC,eAAO,YADG;AAEVC,cAAM,OAFI;AAGVC,cAAM;AAHI;AALA,KAAd;;AAYArB,QAAII,UAAJ,CAAeC,iBAAf,GAAmC,mBAAW;AAC5C,wCAAmBiB,OAAnB,EAA4B,KAA5B,EAAmC,QAAnC;;AAEA,aAAOtB,IAAIG,EAAJ,CAAOG,IAAP,CAAY;AACjBiB,gBAAQ,GADS;AAEjBhB,cAAM,CAAC;AACLsC,iBAAO,EADF;AAELtB,kBAAQ,MAFH;AAGLiB,gBAAM;AAHD,SAAD,EAIH;AACDK,iBAAO,EADN;AAEDtB,kBAAQ,MAFP;AAGDiB,gBAAM;AAHL,SAJG;AAFW,OAAZ,CAAP;AAYD,KAfD;;AAiBAxC,QAAIY,EAAJ,CAAOe,eAAP,CAAuBb,OAAvB,EAAgCc,IAAhC,CAAqC,kBAAU;AAC7CC,aAAOC,MAAP,EAAeb,EAAf,CAAkBc,IAAlB,CAAuBC,MAAvB,CAA8B,CAA9B;AACAH,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,YAAT,EAAuBC,MAAM,OAA7B,EAAsCC,MAAM,OAA5C,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,OAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BiB,KAA1B,CAAgC,MAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,WAAhC;;AAEAL,aAAOC,OAAO,CAAP,EAAUZ,UAAjB,EAA6BD,EAA7B,CAAgCgB,IAAhC,CAAqCC,KAArC,CAA2C,EAAEf,OAAO,YAAT,EAAuBC,MAAM,OAA7B,EAAsCC,MAAM,OAA5C,EAA3C;AACAQ,aAAOC,OAAO,CAAP,EAAUK,IAAjB,EAAuBlB,EAAvB,CAA0BiB,KAA1B,CAAgC,EAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUM,KAAjB,EAAwBnB,EAAxB,CAA2BiB,KAA3B,CAAiC,OAAjC;AACAL,aAAOC,OAAO,CAAP,EAAUO,IAAjB,EAAuBpB,EAAvB,CAA0BiB,KAA1B,CAAgC,MAAhC;AACAL,aAAOC,OAAO,CAAP,EAAUU,IAAjB,EAAuBvB,EAAvB,CAA0BiB,KAA1B,CAAgC,WAAhC;AACD,KAbD,EAaGN,IAbH,CAaQ;AAAA,aAAKa,MAAL;AAAA,KAbR,EAaqB;AAAA,aAAOA,KAAKC,GAAL,CAAP;AAAA,KAbrB;AAcD,GA7CD;AA8CD,CAjRD","file":"datasource-annotations_spec.js","sourcesContent":["import {Datasource} from '../module';\nimport Q from 'q';\nimport {getSettings, expectRequest, expectAlertRequest} from './test-util';\n\ndescribe('HawkularDatasource annotations', () => {\n  let ctx = {};\n  const instanceSettings = getSettings();\n\n  beforeEach(() => {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.backendSrv.datasourceRequest = request => {\n      return ctx.$q.when({data: {'Implementation-Version': '0.22.0'}})\n    };\n    ctx.templateSrv = {\n      replace: (target, vars) => target\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  it('should query annotations without tags', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: 'my.timeline',\n        name: 'Timeline',\n        type: 'strings'\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'strings/raw/query');\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'my.timeline',\n          data: [{\n            timestamp: 13,\n            value: 'start'\n          }, {\n            timestamp: 19,\n            value: 'stop'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: 'my.timeline', name: 'Timeline', type: 'strings' });\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal('Timeline');\n      expect(result[0].tags).to.be.undefined;\n      expect(result[0].text).to.equal('start');\n\n      expect(result[1].annotation).to.deep.equal({ query: 'my.timeline', name: 'Timeline', type: 'strings' });\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal('Timeline');\n      expect(result[1].tags).to.be.undefined;\n      expect(result[1].text).to.equal('stop');\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query annotations with tags', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: 'my.timeline',\n        name: 'Timeline',\n        type: 'strings'\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'strings/raw/query');\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'my.timeline',\n          data: [{\n            timestamp: 13,\n            value: 'start',\n            tags: {\n              'item': 'myItem',\n              'step': 'start'\n            }\n          }, {\n            timestamp: 19,\n            value: 'stop',\n            tags: {\n              'item': 'myItem',\n              'step': 'stop'\n            }\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: 'my.timeline', name: 'Timeline', type: 'strings' });\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal('Timeline');\n      expect(result[0].tags).to.equal('myItem start');\n      expect(result[0].text).to.equal('start');\n\n      expect(result[1].annotation).to.deep.equal({ query: 'my.timeline', name: 'Timeline', type: 'strings' });\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal('Timeline');\n      expect(result[1].tags).to.equal('myItem stop');\n      expect(result[1].text).to.equal('stop');\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should resolve variables in annotations', done => {\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: '$who.timeline',\n        name: 'Timeline',\n        type: 'strings'\n      }\n    };\n\n    ctx.templateSrv.variables = [{\n      name: 'who'\n    }];\n    ctx.templateSrv.replace = (target, vars) => {\n      expect(target).to.equal('$who');\n      return '{your,my}';\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'strings/raw/query');\n      expect(request.data.ids).to.deep.equal(['your.timeline', 'my.timeline']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'your.timeline',\n          data: [{\n            timestamp: 15,\n            value: 'start'\n          }]\n        },{\n          id: 'my.timeline',\n          data: [{\n            timestamp: 13,\n            value: 'start'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: '$who.timeline', name: 'Timeline', type: 'strings' });\n      expect(result[0].time).to.equal(15);\n      expect(result[0].title).to.equal('Timeline');\n      expect(result[0].tags).to.equal('your.timeline');\n      expect(result[0].text).to.equal('start');\n\n      expect(result[1].annotation).to.deep.equal({ query: '$who.timeline', name: 'Timeline', type: 'strings' });\n      expect(result[1].time).to.equal(13);\n      expect(result[1].title).to.equal('Timeline');\n      expect(result[1].tags).to.equal('my.timeline');\n      expect(result[1].text).to.equal('start');\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query annotations from avails', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: 'my.avail',\n        name: 'Avail',\n        type: 'availability'\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectRequest(request, 'POST', 'availability/raw/query');\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: 'my.avail',\n          data: [{\n            timestamp: 13,\n            value: 'up'\n          }, {\n            timestamp: 19,\n            value: 'down'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: 'my.avail', name: 'Avail', type: 'availability' });\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal('Avail');\n      expect(result[0].tags).to.be.undefined;\n      expect(result[0].text).to.equal('up');\n\n      expect(result[1].annotation).to.deep.equal({ query: 'my.avail', name: 'Avail', type: 'availability' });\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal('Avail');\n      expect(result[1].tags).to.be.undefined;\n      expect(result[1].text).to.equal('down');\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query annotations from alerts', done => {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: 'my.trigger',\n        name: 'Alert',\n        type: 'alert'\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = request => {\n      expectAlertRequest(request, 'GET', 'events');\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          ctime: 13,\n          status: 'OPEN',\n          text: 'Some text'\n        }, {\n          ctime: 19,\n          status: 'OPEN',\n          text: 'Some text'\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(result => {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: 'my.trigger', name: 'Alert', type: 'alert' });\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal('Alert');\n      expect(result[0].tags).to.equal('OPEN');\n      expect(result[0].text).to.equal('Some text');\n\n      expect(result[1].annotation).to.deep.equal({ query: 'my.trigger', name: 'Alert', type: 'alert' });\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal('Alert');\n      expect(result[1].tags).to.equal('OPEN');\n      expect(result[1].text).to.equal('Some text');\n    }).then(v => done(), err => done(err));\n  });\n});\n"]}