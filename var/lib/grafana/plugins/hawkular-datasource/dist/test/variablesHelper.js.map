{"version":3,"sources":["../../src/variablesHelper.js"],"names":["VariablesHelper","templateSrv","target","options","variableNames","variables","map","v","name","resolved","forEach","indexOf","values","getVarValues","scopedVars","newResolved","regex","RegExp","push","newTarget","replace","val","isArray","join","charAt","substring","length","split","variableExists"],"mappings":";;;;;;;;;AAAA;;;;;;;;IAEaA,e,WAAAA,e;AAEX,2BAAYC,WAAZ,EAAyB;AAAA;;AACvB,SAAKA,WAAL,GAAmBA,WAAnB;AACD;;;;4BAEOC,M,EAAQC,O,EAAS;AAAA;;AACvB,UAAMC,gBAAgB,CAAC,KAAKH,WAAL,CAAiBI,SAAjB,IAA8B,EAA/B,EAAmCC,GAAnC,CAAuC;AAAA,eAAK,MAAMC,EAAEC,IAAb;AAAA,OAAvC,CAAtB;AACA;AACA,UAAIC,WAAW,CAACP,MAAD,CAAf;AACA,UAAIE,aAAJ,EAAmB;AACjBA,sBAAcM,OAAd,CAAsB,gBAAQ;AAC5B,cAAIR,OAAOS,OAAP,CAAeH,IAAf,KAAwB,CAA5B,EAA+B;AAC7B,gBAAMI,SAAS,MAAKC,YAAL,CAAkBL,IAAlB,EAAwBL,QAAQW,UAAhC,CAAf;AACA,gBAAMC,cAAc,EAApB;AACA,gBAAMC,QAAQ,IAAIC,MAAJ,CAAW,OAAOT,IAAlB,EAAwB,GAAxB,CAAd;AACAI,mBAAOF,OAAP,CAAe,eAAO;AACpBD,uBAASC,OAAT,CAAiB,qBAAa;AAC5BK,4BAAYG,IAAZ,CAAiBC,UAAUC,OAAV,CAAkBJ,KAAlB,EAAyBK,GAAzB,CAAjB;AACD,eAFD;AAGD,aAJD;AAKAZ,uBAAWM,WAAX;AACD;AACF,SAZD;AAaD;AACD,aAAON,QAAP;AACD;;;iCAEYP,M,EAAQC,O,EAAS;AAC5B,aAAO,KAAKF,WAAL,CAAiBmB,OAAjB,CAAyBlB,MAAzB,EAAiCC,QAAQW,UAAzC,EAAqD,kBAAU;AACpE,YAAI,iBAAEQ,OAAF,CAAUV,MAAV,CAAJ,EAAuB;AACrB,iBAAOA,OAAON,GAAP,CAAW;AAAA,0BAASC,CAAT;AAAA,WAAX,EAA0BgB,IAA1B,CAA+B,GAA/B,CAAP;AACD;AACD,sBAAWX,MAAX;AACD,OALM,CAAP;AAMD;;;iCAEYJ,I,EAAMM,U,EAAY;AAC7B,UAAMF,SAAS,KAAKX,WAAL,CAAiBmB,OAAjB,CAAyBZ,IAAzB,EAA+BM,UAA/B,CAAf;AACA;AACA,UAAIF,OAAOY,MAAP,CAAc,CAAd,MAAqB,GAAzB,EAA8B;AAC1B,eAAOZ,OAAOa,SAAP,CAAiB,CAAjB,EAAoBb,OAAOc,MAAP,GAAc,CAAlC,EAAqCC,KAArC,CAA2C,GAA3C,CAAP;AACH;AACD,aAAO,CAACf,MAAD,CAAP;AACD;;;2BAEMJ,I,EAAM;AACX,aAAO,KAAKP,WAAL,CAAiB2B,cAAjB,CAAgCpB,IAAhC,CAAP;AACD","file":"variablesHelper.js","sourcesContent":["import _ from 'lodash';\n\nexport class VariablesHelper {\n\n  constructor(templateSrv) {\n    this.templateSrv = templateSrv;\n  }\n\n  resolve(target, options) {\n    const variableNames = (this.templateSrv.variables || []).map(v => '$' + v.name);\n    // For each variable in target, and each values of a given variable, build a resolved target string\n    let resolved = [target];\n    if (variableNames) {\n      variableNames.forEach(name => {\n        if (target.indexOf(name) >= 0) {\n          const values = this.getVarValues(name, options.scopedVars);\n          const newResolved = [];\n          const regex = new RegExp('\\\\' + name, 'g');\n          values.forEach(val => {\n            resolved.forEach(newTarget => {\n              newResolved.push(newTarget.replace(regex, val));\n            });\n          });\n          resolved = newResolved;\n        }\n      });\n    }\n    return resolved;\n  }\n\n  resolveForQL(target, options) {\n    return this.templateSrv.replace(target, options.scopedVars, values => {\n      if (_.isArray(values)) {\n        return values.map(v => `'${v}'`).join(',');\n      }\n      return `'${values}'`;\n    });\n  }\n\n  getVarValues(name, scopedVars) {\n    const values = this.templateSrv.replace(name, scopedVars);\n    // result might be in like \"{id1,id2,id3}\" (as string)\n    if (values.charAt(0) === '{') {\n        return values.substring(1, values.length-1).split(',');\n    }\n    return [values];\n  }\n\n  exists(name) {\n    return this.templateSrv.variableExists(name);\n  }\n}\n"]}