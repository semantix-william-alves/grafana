{"version":3,"sources":["../../src/datasource.js"],"names":["HawkularDatasource","instanceSettings","$q","backendSrv","templateSrv","type","metricsUrl","url","alertsUrl","name","tenant","jsonData","isTenantPerQuery","authorization","basicAuth","length","token","q","typeResources","variablesHelper","capabilitiesPromise","queryVersion","then","version","queryProcessor","multiTenantsQuery","bind","headers","tenants","params","data","method","all","map","datasourceRequest","getHeaders","result","response","status","options","validTargets","targets","filter","target","hide","sanitizeTarget","id","undefined","tags","tagsQL","when","promises","run","flatten","responses","sort","m1","m2","localeCompare","stats","rate","seriesAggFn","raw","timeAggFn","endpoint","message","title","metricIds","resolve","annotation","query","queryAlerts","start","range","from","valueOf","end","to","order","ids","allAnnotations","metrics","forEach","metric","annot","time","dp","timestamp","text","value","push","key","hasOwnProperty","replace","join","startTime","endTime","triggerIds","events","event","ctime","resolveForQL","getTargetTenants","multiTenantsData","tenantData","Object","keys","mergedTags","tag","substr","findTags","trim","charAt","runWithResolvedVariables","p","pattern","flatTags","property","concat","func","resolved","catch"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from 'lodash';\nimport {VariablesHelper} from './variablesHelper';\nimport {Capabilities} from './capabilities';\nimport {QueryProcessor} from './queryProcessor';\nimport {modelToString as tagsModelToString} from './tagsKVPairsController';\n\nexport class HawkularDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.metricsUrl = instanceSettings.url + '/metrics';\n    this.alertsUrl = instanceSettings.url + '/alerts';\n    this.name = instanceSettings.name;\n    this.tenant = instanceSettings.jsonData.tenant;\n    this.isTenantPerQuery = instanceSettings.jsonData.isTenantPerQuery;\n    this.authorization = null;\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.authorization = instanceSettings.basicAuth;\n    } else if (typeof instanceSettings.jsonData.token === 'string' && instanceSettings.jsonData.token.length > 0) {\n      this.authorization = 'Bearer ' + instanceSettings.jsonData.token;\n    }\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.typeResources = {\n      'gauge': 'gauges',\n      'counter': 'counters',\n      'availability': 'availability'\n    };\n    this.variablesHelper = new VariablesHelper(templateSrv);\n    this.capabilitiesPromise = this.queryVersion().then(version => new Capabilities(version));\n    this.queryProcessor = new QueryProcessor($q, this.multiTenantsQuery.bind(this), this.variablesHelper, this.capabilitiesPromise, this.metricsUrl,\n            this.typeResources);\n  }\n\n  getHeaders(tenant) {\n    const headers = {\n      'Content-Type': 'application/json'\n    }\n    if (tenant && this.isTenantPerQuery) {\n      headers['Hawkular-Tenant'] = tenant;\n    } else {\n      headers['Hawkular-Tenant'] = this.tenant;\n    }\n    if (this.authorization) {\n      headers['Authorization'] = this.authorization;\n    }\n    return headers;\n  }\n\n  multiTenantsQuery(tenants, url, params, data, method) {\n    return this.q.all(tenants.map(tenant => {\n      return this.backendSrv.datasourceRequest({\n        url: url,\n        params: params,\n        data: data,\n        method: method,\n        headers: this.getHeaders(tenant)\n      }).then(response => {\n        return {\n          tenant: tenant,\n          result: (response.status == 200) ? response.data : null\n        }\n      });\n    }));\n  }\n\n  query(options) {\n    const validTargets = options.targets\n      .filter(target => !target.hide)\n      .map(this.sanitizeTarget)\n      .filter(target => target.id !== undefined\n         || (target.tags !== undefined && target.tags.length > 0)\n         || (target.tagsQL !== undefined && target.tagsQL.length > 0));\n\n    if (validTargets.length === 0) {\n      return this.q.when({data: []});\n    }\n\n    const promises = validTargets.map(target => this.queryProcessor.run(target, options));\n\n    return this.q.all(promises)\n      .then(responses => ({data: _.flatten(responses).sort((m1, m2) => m1.target.localeCompare(m2.target))}));\n  }\n\n  sanitizeTarget(target) {\n    // Create sane target, providing backward compatibility\n    if (target.id === undefined && target.target !== 'select metric') {\n      target.id = target.target;\n    } else if (target.id === '-- none --') {\n      delete target.id;\n    }\n    delete target.target;\n    target.stats = target.stats || [];\n    target.type = target.type || 'gauge';\n    target.rate = target.rate === true;\n    target.tags = target.tags || [];\n    target.tagsQL = target.tagsQL || '';\n    target.seriesAggFn = target.seriesAggFn || 'none';\n    if (target.raw === undefined) {\n      // Compatibility note: previously default was timeAggFn=avg and seriesAggFn=none\n      if (target.seriesAggFn === 'none' && target.timeAggFn === 'avg') {\n        delete target.timeAggFn;\n      }\n      target.raw = (target.timeAggFn === undefined);\n    }\n    return target;\n  }\n\n  testDatasource() {\n    // If tenants is unknown at this point (when having per-query tenants)\n    // We do a more basic check to / endpoint, which checks authentication in basic-auth mode but not with token/OpenShift\n    // Else, it's full connectivity with tenant check\n    const endpoint = this.isTenantPerQuery ? '/' : '/metrics';\n    return this.backendSrv.datasourceRequest({\n      url: this.metricsUrl + endpoint,\n      method: 'GET',\n      headers: this.getHeaders()\n    }).then(response => {\n      if (response.status === 200 || response.status === 204) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' };\n      } else {\n        return { status: 'error', message: `Connection failed (${response.status})`, title: 'Error' };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    const metricIds = this.variablesHelper.resolve(options.annotation.query, options);\n    if (options.annotation.type === 'alert') {\n      return this.queryAlerts(metricIds, options);\n    }\n    return this.backendSrv.datasourceRequest({\n      url: `${this.metricsUrl}/${options.annotation.type}/raw/query`,\n      data: {\n        start: options.range.from.valueOf(),\n        end: options.range.to.valueOf(),\n        order: 'ASC',\n        ids: metricIds\n      },\n      method: 'POST',\n      headers: this.getHeaders(options.annotation.tenant)\n    }).then(response => response.status == 200 ? response.data : [])\n    .then(metrics => {\n      let allAnnotations = [];\n      metrics.forEach(metric => {\n        metric.data.forEach(dp => {\n          let annot = {\n            annotation: options.annotation,\n            time: dp.timestamp,\n            title: options.annotation.name,\n            text: dp.value\n          };\n          let tags = [];\n          if (metricIds.length > 1) {\n            tags.push(metric.id);\n          }\n          if (dp.tags) {\n            for (let key in dp.tags) {\n              if (dp.tags.hasOwnProperty(key)) {\n                tags.push(dp.tags[key].replace(' ', '_'));\n              }\n            }\n          }\n          if (tags.length > 0) {\n            annot.tags = tags.join(' ');\n          }\n          allAnnotations.push(annot);\n        });\n      });\n      return allAnnotations;\n    });\n  }\n\n  queryAlerts(ids, options) {\n    return this.backendSrv.datasourceRequest({\n      url: `${this.alertsUrl}/events`,\n      params: {\n        startTime: options.range.from.valueOf(),\n        endTime: options.range.to.valueOf(),\n        triggerIds: ids\n      },\n      method: 'GET',\n      headers: this.getHeaders(options.annotation.tenant)\n    }).then(response => response.status == 200 ? response.data : [])\n    .then(events => {\n      return events.map(event => {\n        return {\n          annotation: options.annotation,\n          time: event.ctime,\n          title: options.annotation.name,\n          text: event.text,\n          tags: event.status\n        };\n      });\n    });\n  }\n\n  getTargetTenants(target) {\n    if (target.tenant) {\n      return this.variablesHelper.resolve(target.tenant, {});\n    }\n    return [null];\n  }\n\n  suggestMetrics(target) {\n    let url = this.metricsUrl + '/metrics?type=' + target.type;\n    if (target.tagsQL && target.tagsQL.length > 0) {\n      url += '&tags=' + this.variablesHelper.resolveForQL(target.tagsQL, {});\n    } else if (target.tags && target.tags.length > 0) {\n      url += '&tags=' + tagsModelToString(target.tags, this.variablesHelper, {});\n    }\n    const tenants = this.getTargetTenants(target);\n    return this.multiTenantsQuery(tenants, url, null, null, 'GET')\n      .then(multiTenantsData => {\n        // Eliminate possible duplicates from multi-tenancy\n        let ids = {};\n        multiTenantsData.forEach(tenantData => {\n          if (tenantData.result) {\n            tenantData.result.forEach(metric => {\n              ids[metric.id] = true;\n            });\n          }\n        });\n        return Object.keys(ids)\n          .sort()\n          .map(id => {\n            return {text: id, value: id};\n          });\n      });\n  }\n\n  suggestTags(target, key) {\n    if (!key) {\n      return this.q.when([]);\n    }\n    const tenants = this.getTargetTenants(target);\n    const url = `${this.metricsUrl}/${this.typeResources[target.type]}/tags/${key}:*`;\n    return this.multiTenantsQuery(tenants, url, null, null, 'GET')\n      .then(multiTenantsData => {\n        // Eliminate possible duplicates from multi-tenancy\n        let mergedTags = {};\n        multiTenantsData.forEach(tenantData => {\n          if (tenantData.result) {\n            if (tenantData.result.hasOwnProperty(key)) {\n              tenantData.result[key].forEach(tag => {\n                mergedTags[tag] = true;\n              });\n            }\n          }\n        });\n        return Object.keys(mergedTags)\n          .sort()\n          .map(tag => {\n            return {text: tag, value: tag};\n          });\n      });\n  }\n\n  suggestTagKeys(target) {\n    const tenants = this.getTargetTenants(target);\n    return this.multiTenantsQuery(tenants, this.metricsUrl + '/metrics/tags', null, null, 'GET')\n      .then(multiTenantsData => {\n        // Eliminate possible duplicates from multi-tenancy\n        let mergedTags = {};\n        multiTenantsData.forEach(tenantData => {\n          if (tenantData.result) {\n            tenantData.result.forEach(tag => {\n              mergedTags[tag] = true;\n            });\n          }\n        });\n        return Object.keys(mergedTags)\n          .map(tag => {\n            return {text: tag, value: tag};\n          });\n      });\n  }\n\n  metricFindQuery(query) {\n    let params = '';\n    if (query !== undefined) {\n      if (query.substr(0, 5) === 'tags/') {\n        return this.findTags(query.substr(5).trim());\n      }\n      if (query.charAt(0) === '?') {\n        params = query;\n      } else {\n        params = '?' + query;\n      }\n    }\n    return this.runWithResolvedVariables(params, p => this.backendSrv.datasourceRequest({\n      url: `${this.metricsUrl}/metrics${p}`,\n      method: 'GET',\n      headers: this.getHeaders()\n    }).then(result => {\n      return _.map(result.data, metric => {\n        return {text: metric.id, value: metric.id};\n      });\n    }));\n  }\n\n  findTags(pattern) {\n    return this.runWithResolvedVariables(pattern, p => this.backendSrv.datasourceRequest({\n      url: `${this.metricsUrl}/metrics/tags/${p}`,\n      method: 'GET',\n      headers: this.getHeaders()\n    }).then(result => {\n      let flatTags = [];\n      if (result.data) {\n        let data = result.data;\n        for (let property in data) {\n          if (data.hasOwnProperty(property)) {\n            flatTags = flatTags.concat(data[property]);\n          }\n        }\n      }\n      return flatTags.map(tag => {\n        return {text: tag, value: tag};\n      });\n    }));\n  }\n\n  runWithResolvedVariables(target, func) {\n    const resolved = this.variablesHelper.resolve(target, {});\n    return this.q.all(resolved.map(p => func(p)))\n      .then(result => _.flatten(result));\n  }\n\n  queryVersion() {\n    return this.backendSrv.datasourceRequest({\n      url: this.metricsUrl + '/status',\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'}\n    }).then(response => response.data['Implementation-Version'])\n    .catch(response => 'Unknown');\n  }\n\n  getCapabilities() {\n    return this.capabilitiesPromise;\n  }\n}\n"]}