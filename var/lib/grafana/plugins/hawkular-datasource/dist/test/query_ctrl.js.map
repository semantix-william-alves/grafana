{"version":3,"sources":["../../src/query_ctrl.js"],"names":["HawkularDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","$q","scope","target","datasource","sanitizeTarget","caps","getCapabilities","then","TAGS_QUERY_LANGUAGE","tagsController","FETCH_ALL_TAGS","tagsSegments","initTagsSegments","metricTypes","value","text","seriesAggFns","timeAggFns","availableStats","map","val","statsSegments","initStatsSegments","removeStatsSegment","newSegment","fake","type","id","panel","raw","timeAggFn","segment","$index","getTagsSegments","tagsSegmentChanged","onChangeInternal","segments","stats","stat","newKey","push","newPlusButton","getAvailableStats","angular","copy","keys","index","splice","filter","s","when","indexOf","transformToSegments","suggestMetrics","concat","metrics","seriesAggFn","panelCtrl","refresh","rawTagsQuery","err","console","log","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\nimport {Capabilities} from './capabilities';\nimport {TagsKVPairsController} from './tagsKVPairsController';\nimport {TagsQLController} from './tagsQLController';\n\nexport class HawkularDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv, $q) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.$q = $q;\n\n    this.target = this.datasource.sanitizeTarget(this.target);\n    this.caps = new Capabilities('');\n    this.datasource.getCapabilities().then(caps => {\n      this.caps = caps;\n      if (caps.TAGS_QUERY_LANGUAGE) {\n        this.tagsController = new TagsQLController(uiSegmentSrv, this.datasource, $q, () => this.target);\n      } else {\n        this.tagsController = new TagsKVPairsController(uiSegmentSrv, this.datasource, $q, caps.FETCH_ALL_TAGS, () => this.target);\n      }\n      this.tagsSegments = this.tagsController.initTagsSegments();\n    });\n\n    this.metricTypes = [\n      {value: 'gauge', text: 'Gauge'},\n      {value: 'counter', text: 'Counter'},\n      {value: 'availability', text: 'Availability'}\n    ];\n    this.seriesAggFns = [\n      {value: 'none', text: 'None'},\n      {value: 'sum', text: 'Sum'},\n      {value: 'avg', text: 'Average'}\n    ];\n    this.timeAggFns = [\n      {value: 'avg', text: 'Average'},\n      {value: 'min', text: 'Min'},\n      {value: 'max', text: 'Max'},\n      {value: 'live', text: 'Live'}\n    ];\n    this.availableStats = ['avg', 'min', 'max', 'median', 'sum', '75 %ile', '90 %ile', '95 %ile', '98 %ile', '99 %ile', '99.9 %ile']\n      .map(val => ({value: val, text: val}));\n    this.statsSegments = this.initStatsSegments();\n    this.removeStatsSegment = this.uiSegmentSrv.newSegment({fake: true, value: '-- Remove --'});\n\n    this.target.type = this.target.type || this.metricTypes[0].value;\n    this.target.id = this.target.id || '-- none --';\n    if (this.panel.type === 'singlestat') {\n      this.target.raw = false;\n      this.target.timeAggFn = this.target.timeAggFn || this.timeAggFns[0].value;\n    }\n  }\n\n  getTagsSegments(segment, $index) {\n    return this.tagsController.getTagsSegments(this.tagsSegments, segment, $index);\n  }\n\n  tagsSegmentChanged(segment, $index) {\n    this.tagsController.tagsSegmentChanged(this.tagsSegments, segment, $index);\n    this.onChangeInternal();\n  }\n\n  initStatsSegments() {\n    let segments = this.target.stats.map((stat) => this.uiSegmentSrv.newKey(stat));\n    segments.push(this.uiSegmentSrv.newPlusButton());\n    return segments;\n  }\n\n  getStatsSegments(segment, $index) {\n    if (segment.type === 'plus-button') {\n      return this.getAvailableStats();\n    }\n    return this.getAvailableStats()\n        .then(keys => [angular.copy(this.removeStatsSegment), ...keys]);\n  }\n\n  statsSegmentChanged(segment, index) {\n    if (segment.value === this.removeStatsSegment.value) {\n      this.statsSegments.splice(index, 1);\n    } else if (segment.type === 'plus-button') {\n      this.statsSegments.splice(index, 1);\n      this.statsSegments.splice(index, 0,\n        this.uiSegmentSrv.newKey(segment.value),\n        this.uiSegmentSrv.newPlusButton());\n    } else {\n      this.statsSegments[index] = segment;\n    }\n    this.target.stats = this.statsSegments.filter((s) => !s.fake).map((s) => s.value);\n    this.onChangeInternal();\n  }\n\n  getAvailableStats() {\n    // Filter out already selected stats\n    return this.$q.when(this.availableStats.filter((stat) => this.target.stats.indexOf(stat.value) < 0))\n      .then(this.uiSegmentSrv.transformToSegments(false));\n  }\n\n  getMetricOptions() {\n    return this.datasource.suggestMetrics(this.target)\n      .then(metrics => [{value: '-- none --', text: '-- none --'}].concat(metrics))\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  onChangeInternal() {\n    if (this.target.type == 'availability') {\n      // Disable multiple series aggregation\n      this.target.seriesAggFn = this.seriesAggFns[0].value;\n    }\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  toggleEditorMode() {\n    if (this.caps.TAGS_QUERY_LANGUAGE) {\n      this.target.rawTagsQuery = !this.target.rawTagsQuery;\n      if (!this.target.rawTagsQuery) {\n        try {\n          this.tagsSegments = this.tagsController.initTagsSegments();\n        } catch (err) {\n          this.target.rawTagsQuery = true;\n          console.log('Cannot parse query: ' + err);\n        }\n      }\n    } else {\n      this.target.rawTagsQuery = false;\n    }\n  }\n}\n\nHawkularDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n"]}