{"version":3,"sources":["../../src/config/config.js"],"names":["configTemplate","_","KentikConfigCtrl","$scope","$injector","backendSrv","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","appModel","jsonData","secureJsonData","apiValidated","apiError","enabled","tokenSet","validateApiConnection","token","initDatasource","Promise","resolve","self","then","importDashboards","url","message","promise","get","email","results","foundKentic","forEach","ds","name","promises","kentik","type","access","push","post","all","template"],"mappings":";;;;;;;;;;;;;;;AAAOA,oB;;AAEAC,O;;;;;;;;;;;;;;;;;;;;;4BAEDC,gB;AACJ,kCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AACzC,eAAKA,UAAL,GAAkBA,UAAlB;;AAEA,eAAKC,WAAL,CAAiBC,gBAAjB,CAAkC,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAlC;AACA,eAAKH,WAAL,CAAiBI,iBAAjB,CAAmC,KAAKC,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAnC;;AAEA,cAAI,CAAC,KAAKG,QAAL,CAAcC,QAAnB,EAA6B;AAC3B,iBAAKD,QAAL,CAAcC,QAAd,GAAyB,EAAzB;AACD;AACD,cAAI,CAAC,KAAKD,QAAL,CAAcE,cAAnB,EAAmC;AACjC,iBAAKF,QAAL,CAAcE,cAAd,GAA+B,EAA/B;AACD;AACD,eAAKC,YAAL,GAAoB,KAApB;AACA,eAAKC,QAAL,GAAgB,KAAhB;AACA,cAAI,KAAKJ,QAAL,CAAcK,OAAd,IAAyB,KAAKL,QAAL,CAAcC,QAAd,CAAuBK,QAApD,EAA8D;AAC5D,iBAAKC,qBAAL;AACD;AACF;;;;sCAEW;AACV,gBAAI,KAAKP,QAAL,CAAcE,cAAd,CAA6BM,KAAjC,EAAyC;AACvC,mBAAKR,QAAL,CAAcC,QAAd,CAAuBK,QAAvB,GAAkC,IAAlC;AACD;;AAED,mBAAO,KAAKG,cAAL,EAAP;AACD;;;uCAEY;AACX,gBAAI,CAAC,KAAKT,QAAL,CAAcK,OAAnB,EAA4B;AAC1B,qBAAOK,QAAQC,OAAR,EAAP;AACD;AACD,gBAAIC,OAAO,IAAX;AACA,mBAAO,KAAKL,qBAAL,GAA6BM,IAA7B,CAAkC,YAAM;AAC7C,qBAAOD,KAAKlB,WAAL,CAAiBoB,gBAAjB,GAAoCD,IAApC,CAAyC,YAAM;AACpD,uBAAO;AACLE,uBAAK,0BADA;AAELC,2BAAS;AAFJ,iBAAP;AAID,eALM,CAAP;AAMD,aAPM,CAAP;AAQD;;;kDAGuB;AAAA;;AACtB,gBAAIC,UAAU,KAAKxB,UAAL,CAAgByB,GAAhB,CAAoB,2CAApB,CAAd;AACAD,oBAAQJ,IAAR,CAAa,YAAM;AACjB,oBAAKV,YAAL,GAAoB,IAApB;AACD,aAFD,EAEG,YAAM;AACP,oBAAKA,YAAL,GAAoB,KAApB;AACA,oBAAKC,QAAL,GAAgB,IAAhB;AACD,aALD;AAMA,mBAAOa,OAAP;AACD;;;kCAEO;AACN,iBAAKjB,QAAL,CAAcC,QAAd,CAAuBkB,KAAvB,GAA+B,EAA/B;AACA,iBAAKnB,QAAL,CAAcC,QAAd,CAAuBK,QAAvB,GAAkC,KAAlC;AACA,iBAAKN,QAAL,CAAcE,cAAd,GAA+B,EAA/B;AACA,iBAAKC,YAAL,GAAoB,KAApB;AACD;;;2CAEgB;AACf,gBAAIS,OAAO,IAAX;AACA;AACA,mBAAOA,KAAKnB,UAAL,CAAgByB,GAAhB,CAAoB,kBAApB,EAAwCL,IAAxC,CAA6C,UAASO,OAAT,EAAkB;AACpE,kBAAIC,cAAc,KAAlB;AACAhC,gBAAEiC,OAAF,CAAUF,OAAV,EAAmB,UAASG,EAAT,EAAa;AAC9B,oBAAIF,WAAJ,EAAiB;AAAE;AAAS;AAC5B,oBAAIE,GAAGC,IAAH,KAAY,QAAhB,EAA0B;AACxBH,gCAAc,IAAd;AACD;AACF,eALD;AAMA,kBAAII,WAAW,EAAf;AACA,kBAAI,CAACJ,WAAL,EAAkB;AAChB;AACA,oBAAIK,SAAS;AACXF,wBAAM,QADK;AAEXG,wBAAM,WAFK;AAGXC,0BAAQ,QAHG;AAIX3B,4BAAU;AAJC,iBAAb;AAMAwB,yBAASI,IAAT,CAAcjB,KAAKnB,UAAL,CAAgBqC,IAAhB,CAAqB,kBAArB,EAAyCJ,MAAzC,CAAd;AACD;AACD,qBAAOhB,QAAQqB,GAAR,CAAYN,QAAZ,CAAP;AACD,aApBM,CAAP;AAqBD;;;;;;AAGHnC,uBAAiB0C,QAAjB,GAA4B5C,cAA5B;;4BAGEE,gB","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass KentikConfigCtrl {\n  constructor($scope, $injector, backendSrv) {\n    this.backendSrv = backendSrv;\n\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n\n    if (!this.appModel.jsonData) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    this.apiValidated = false;\n    this.apiError = false;\n    if (this.appModel.enabled && this.appModel.jsonData.tokenSet) {\n      this.validateApiConnection();\n    }\n  }\n\n  preUpdate() {\n    if (this.appModel.secureJsonData.token)  {\n      this.appModel.jsonData.tokenSet = true;\n    }\n\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return Promise.resolve();\n    }\n    var self = this;\n    return this.validateApiConnection().then(() => {\n      return self.appEditCtrl.importDashboards().then(() => {\n        return {\n          url: \"dashboard/db/kentik-home\",\n          message: \"Kentik Connect Pro app installed!\"\n        };\n      });\n    });\n  }\n\n  // make sure that we can hit the Kentik API.\n  validateApiConnection() {\n    var promise = this.backendSrv.get('/api/plugin-proxy/kentik-app/api/v5/users');\n    promise.then(() => {\n      this.apiValidated = true;\n    }, () => {\n      this.apiValidated = false;\n      this.apiError = true;\n    });\n    return promise;\n  }\n\n  reset() {\n    this.appModel.jsonData.email = '';\n    this.appModel.jsonData.tokenSet = false;\n    this.appModel.secureJsonData = {};\n    this.apiValidated = false;\n  }\n\n  initDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('/api/datasources').then(function(results) {\n      var foundKentic = false;\n      _.forEach(results, function(ds) {\n        if (foundKentic) { return; }\n        if (ds.name === \"kentik\") {\n          foundKentic = true;\n        }\n      });\n      var promises = [];\n      if (!foundKentic) {\n        // create datasource.\n        var kentik = {\n          name: 'kentik',\n          type: 'kentik-ds',\n          access: 'direct',\n          jsonData: {}\n        };\n        promises.push(self.backendSrv.post('/api/datasources', kentik));\n      }\n      return Promise.all(promises);\n    });\n  }\n}\n\nKentikConfigCtrl.template = configTemplate;\n\nexport {\n  KentikConfigCtrl as ConfigCtrl\n};\n\n"]}