{"version":3,"sources":["../../src/datasource/datasource.js"],"names":["metricList","unitList","filterFieldList","_","TableModel","queryBuilder","KentikDatasource","instanceSettings","templateSrv","kentikProxySrv","name","kentik","value","variable","multi","includeAll","join","options","targets","length","Promise","resolve","data","target","deviceNames","replace","device","scopedVars","interpolateDeviceField","bind","kentikFilters","getAdhocFilters","convertToKentikFilterGroup","query_options","range","from","to","metric","unit","kentikFilterGroups","query","buildTopXdataQuery","invokeTopXDataQuery","then","processResponse","mode","result","results","reject","message","bucketData","metricDef","find","dimension","unitDef","processTableData","processTimeSeries","seriesList","endIndex","topx","i","series","timeseries","timeSeries","flow","seriesName","key","grafana_series","datapoints","map","point","push","table","columns","text","tableFields","col","forEach","row","values","val","field","isString","parseFloat","rows","getDevices","devices","device_name","getFieldValues","toString"],"mappings":"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","file":"datasource.js","sourcesContent":["import {metricList, unitList, filterFieldList} from './metric_def';\nimport _ from 'lodash';\nimport TableModel from 'app/core/table_model';\nimport './kentikProxy';\nimport queryBuilder from './query_builder';\n\nclass KentikDatasource {\n\n  constructor(instanceSettings, templateSrv, kentikProxySrv)  {\n    this.instanceSettings = instanceSettings;\n    this.name = instanceSettings.name;\n    this.templateSrv = templateSrv;\n    this.kentik = kentikProxySrv;\n  }\n\n  interpolateDeviceField(value, variable) {\n    // if no multi or include all do not regexEscape\n    if (!variable.multi && !variable.includeAll) {\n      return value;\n    }\n\n    if (typeof value === 'string') {\n      return value;\n    }\n\n    return value.join(',');\n  }\n\n  query(options) {\n    if (!options.targets || options.targets.length === 0) {\n      return Promise.resolve({data: []});\n    }\n\n    let target = options.targets[0];\n    let deviceNames = this.templateSrv.replace(target.device, options.scopedVars, this.interpolateDeviceField.bind(this));\n\n    let kentikFilters = this.templateSrv.getAdhocFilters(this.name);\n    kentikFilters = queryBuilder.convertToKentikFilterGroup(kentikFilters);\n\n    let query_options = {\n      deviceNames: deviceNames,\n      range: {\n        from: options.range.from,\n        to: options.range.to\n      },\n      metric: this.templateSrv.replace(target.metric),\n      unit: this.templateSrv.replace(target.unit),\n      kentikFilterGroups: kentikFilters\n    };\n    let query = queryBuilder.buildTopXdataQuery(query_options);\n\n    return this.kentik.invokeTopXDataQuery(query)\n    .then(this.processResponse.bind(this, query, target.mode, options))\n    .then(result => {\n      return {\n        data: result\n      };\n    });\n  }\n\n  processResponse(query, mode, options, data) {\n    if (!data.results) {\n      return Promise.reject({message: 'no kentik data'});\n    }\n\n    var bucketData = data.results[0].data;\n    if (bucketData.length === 0) {\n      return [];\n    }\n\n    var metricDef = _.find(metricList, {value: query.dimension[0]});\n    var unitDef = _.find(unitList, {value: query.metric});\n\n    if (mode === 'table') {\n      return this.processTableData(bucketData, metricDef, unitDef);\n    } else {\n      return this.processTimeSeries(bucketData, query, options);\n    }\n  }\n\n  processTimeSeries(bucketData, query) {\n    let seriesList = [];\n    let endIndex = query.topx;\n    if (bucketData.length < endIndex) {\n      endIndex = bucketData.length;\n    }\n\n    for (let i = 0; i < endIndex; i++) {\n      let series = bucketData[i];\n      let timeseries = _.find(series.timeSeries, series => {\n        return series.flow && series.flow.length;\n      });\n      let seriesName = series.key;\n\n      if (timeseries) {\n        let grafana_series = {\n          target: seriesName,\n          datapoints: _.map(timeseries.flow, point => {\n            return [point[1], point[0]];\n          })\n        };\n        seriesList.push(grafana_series);\n      }\n    }\n\n    return seriesList;\n  }\n\n  processTableData(bucketData, metricDef, unitDef) {\n    var table = new TableModel();\n\n    table.columns.push({text: metricDef.text});\n\n    for (let col of unitDef.tableFields) {\n      table.columns.push({text: col.text, unit: col.unit});\n    }\n\n    _.forEach(bucketData, row => {\n      var seriesName = row.key;\n\n      var values = [seriesName];\n      for (let col of unitDef.tableFields) {\n        var val = row[col.field];\n\n        if (_.isString(val)) {\n          val = parseFloat(val);\n        }\n\n        values.push(val);\n      }\n\n      table.rows.push(values);\n    });\n\n    return [table];\n  }\n\n  metricFindQuery(query) {\n    if (query === 'metrics()') {\n      return Promise.resolve(metricList);\n    }\n    if (query === 'units()') {\n      return Promise.resolve(unitList);\n    }\n\n    return this.kentik.getDevices()\n    .then(devices => {\n      return devices.map(device => {\n        return {text: device.device_name, value: device.device_name};\n      });\n    });\n  }\n\n  getTagKeys() {\n    return Promise.resolve(filterFieldList);\n  }\n\n  getTagValues(options) {\n    if (options) {\n      let field = _.find(filterFieldList, {text: options.key}).field;\n      return this.kentik.getFieldValues(field)\n      .then(result => {\n        return result.rows.map(row => {\n          return {text: row[field].toString()};\n        });\n      });\n    } else {\n      return Promise.resolve([]);\n    }\n  }\n}\n\nexport {KentikDatasource};\n"]}