{"version":3,"sources":["../../../src/panel/call-to-action/module.js"],"names":["_","PanelCtrl","loadPluginCss","dark","light","panelDefaults","fullscreen","CallToActiontCtrl","$scope","$injector","backendSrv","deviceStatus","AllDone","getTaskStatus","defaults","panel","getDevices","then","get","resp","devices","length","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAOA,O;;AACCC,e,kBAAAA,S;AACAC,mB,kBAAAA,a;;;;;;;;;;;;;;;;;;;;;AAERA,oBAAc;AACZC,cAAM,wCADM;AAEZC,eAAO;AAFK,OAAd;;AAKIC,mB,GAAgB;AAClBC,oBAAY;AADM,O;;2BAIdC,iB;;;AAEJ;AACA,mCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2C;AAAA;;AAAA,4IACnCF,MADmC,EAC3BC,SAD2B;;AAEzC,gBAAKC,UAAL,GAAkBA,UAAlB;AACA,gBAAKC,YAAL,GAAoB,EAApB;AACA,gBAAKC,OAAL,GAAe,KAAf;AACA,gBAAKC,aAAL;AACAb,YAAEc,QAAF,CAAW,MAAKC,KAAhB,EAAuBV,aAAvB;AANyC;AAO1C;;;;0CAEe;AAAA;;AACd,iBAAKW,UAAL,GAAkBC,IAAlB,CAAuB,YAAM;AAC3B,kBAAI,OAAKN,YAAL,KAAsB,YAA1B,EAAwC;AACtC,uBAAKC,OAAL,GAAe,IAAf;AACD,eAFD,MAEO;AACL,uBAAKA,OAAL,GAAe,KAAf;AACD;AACF,aAND;AAOD;;;uCAEY;AAAA;;AACX,mBAAO,KAAKF,UAAL,CAAgBQ,GAAhB,CAAoB,6CAApB,EACJD,IADI,CACC,gBAAQ;AACZ,kBAAIE,KAAKC,OAAL,CAAaC,MAAb,GAAsB,CAA1B,EAA6B;AAC3B,uBAAKV,YAAL,GAAoB,YAApB;AACD,eAFD,MAEO;AACL,uBAAKA,YAAL,GAAoB,WAApB;AACD;AACF,aAPI,CAAP;AAQD;;;oCAES;AACR,iBAAKE,aAAL;AACD;;;;QAnC6BZ,S;;AAsChCM,wBAAkBe,WAAlB,GAAgC,kCAAhC;;2BACQf,iB","file":"module.js","sourcesContent":["import _ from 'lodash';\nimport {PanelCtrl} from 'app/plugins/sdk';\nimport {loadPluginCss} from 'app/plugins/sdk';\n\nloadPluginCss({\n  dark: 'plugins/kentik-app/css/kentik.dark.css',\n  light: 'plugins/kentik-app/css/kentik.light.css'\n});\n\nvar panelDefaults = {\n  fullscreen: true\n};\n\nclass CallToActiontCtrl extends PanelCtrl {\n\n  /** @ngInject */\n  constructor($scope, $injector, backendSrv) {\n    super($scope, $injector);\n    this.backendSrv = backendSrv;\n    this.deviceStatus = '';\n    this.AllDone = false;\n    this.getTaskStatus();\n    _.defaults(this.panel, panelDefaults);\n  }\n\n  getTaskStatus() {\n    this.getDevices().then(() => {\n      if (this.deviceStatus === 'hasDevices') {\n        this.AllDone = true;\n      } else {\n        this.AllDone = false;\n      }\n    });\n  }\n\n  getDevices() {\n    return this.backendSrv.get(\"/api/plugin-proxy/kentik-app/api/v5/devices\")\n      .then(resp => {\n        if (resp.devices.length > 0) {\n          this.deviceStatus = 'hasDevices';\n        } else {\n          this.deviceStatus = 'noDevices';\n        }\n      });\n  }\n\n  refresh() {\n    this.getTaskStatus();\n  }\n}\n\nCallToActiontCtrl.templateUrl = 'panel/call-to-action/module.html';\nexport {CallToActiontCtrl as PanelCtrl};\n"]}