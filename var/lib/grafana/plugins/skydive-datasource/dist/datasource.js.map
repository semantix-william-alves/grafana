{"version":3,"sources":["../src/datasource.js"],"names":["_","moment","SkydiveDatasource","instanceSettings","$q","backendSrv","templateSrv","console","log","type","url","name","version","jsonData","q","options","targets","filter","target","hide","gremlin","length","when","data","queries","map","targetToQuery","range","from","format","to","promises","doQueries","all","then","results","flatten","title","field","metricField","dedup","aggregates","mode","refId","requestToQuery","targetToRequest","request","replace","gremlinTimeContext","doQuery","query","doGremlinQuery","result","status","forEach","metrics","uuid","datapoints","value","has","metric","ABBytes","BABytes","RxBytes","ABPackets","BAPackets","RxPackets","TxPackets","start","Start","last","Last","valueOf","push","toArray","reverse","method","headers","datasourceRequest","response","message"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\nexport class SkydiveDatasource {\n\n  /** @ngInject **/\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    console.log( instanceSettings);\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.version = instanceSettings.jsonData.version;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  // Called once per panel (graph)\n  query(options) {\n    var targets = _.filter(options.targets, target => {\n      return !target.hide && target.gremlin && target.gremlin !== 'Gremlin query';\n    });\n\n    if (targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    var queries = _.map(targets, target => {\n      return this.targetToQuery(target, options.range.from.format('X'), options.range.to.format('X'));\n    });\n\n    var promises =  this.doQueries(queries);\n    return this.q.all(promises).then(function(results) {\n      return { data: _.flatten(results) };\n    });\n  }\n\n  targetToRequest(target, from, to) {\n    return {\n      title: target.title || \"\",\n      gremlin: target.gremlin || \"\",\n      field: target.metricField,\n      dedup: target.dedup,\n      aggregates: target.aggregates,\n      mode: target.mode,\n      from: from,\n      to: to,\n      refId: target.refId,\n      hide: target.hide\n    };\n  }\n\n  targetToQuery(target, from, to) {\n    return this.requestToQuery(this.targetToRequest(target, from, to));\n  }\n\n  gremlinTimeContext(gremlin, request) {\n    if (this.version == \"0.9\") {\n      gremlin = gremlin.replace(/^G\\./i, 'G.At(' + request.to + ').');\n      gremlin = gremlin.replace(/\\.Flows\\([^)]*\\)/i, '.Flows(Since(' + (request.to-request.from) + '))');\n    } else {\n      gremlin = gremlin.replace(/^G\\./i, 'G.At(' + request.to + ',' + (request.to-request.from) + ').');\n    }\n\n    return gremlin;\n  }\n\n  requestToQuery(request) {\n    // removing Context/At and Metric from the original query if present\n    var gremlin = request.gremlin.replace(/^G\\.At\\([^)]*\\)/i, 'G');\n    gremlin = request.gremlin.replace(/^G\\.Context\\([^)]*\\)/i, 'G');\n    gremlin = gremlin.replace(/\\.Metrics\\([^)]*\\)/i, '');\n    gremlin = gremlin.replace(/\\.Aggregates\\([^)]*\\)/i, '');\n    gremlin = gremlin.replace(/\\.Dedup\\([^)]*\\)/i, '');\n\n    // add time context\n    gremlin = this.gremlinTimeContext(gremlin, request);\n\n    switch (request.mode) {\n      case \"Outer\":\n        gremlin += '.Has(\"ParentUUID\", \"\")';\n        break;\n      case \"Inner\":\n        gremlin += '.Has(\"ParentUUID\", Ne(\"\"))';\n        break;\n    }\n\n    if (request.dedup && request.dedup != '---') {\n      gremlin += '.Dedup(\"' + request.dedup + '\")';\n    }\n\n    gremlin += '.Metrics()';\n\n    if (request.aggregates) {\n      gremlin += '.Aggregates()';\n    }\n\n    return {gremlin: gremlin, request: request};\n  }\n\n  doQueries(queries) {\n    return _.map(queries, query => {\n      return this.doQuery(query);\n    });\n  }\n\n  doQuery(query) {\n    console.log(query.gremlin);\n\n    return this.doGremlinQuery(query.gremlin).then(result => {\n      var data = [];\n      if (result.status !== 200) {\n        return data;\n      }\n\n      if (result.data.length <= 0) {\n        return data;\n      }\n\n      _.forEach(result.data[0], (metrics, uuid) => {\n        var datapoints = _.map(metrics, metric => {\n          var value = 0;\n          switch (query.request.field) {\n            case \"Bytes\":\n              // flow or interface metrics ?\n              if (_.has(metric, \"ABBytes\")) {\n                value = metric.ABBytes + metric.BABytes;\n              } else {\n                value = metric.RxBytes + metric.RxBytes;\n              }\n              break;\n            case \"Packets\":\n              // flow or interface metrics ?\n              if (_.has(metric, \"ABPackets\")) {\n                value = metric.ABPackets + metric.BAPackets;\n              } else {\n                value = metric.RxPackets + metric.TxPackets;\n              }\n              break;\n            default:\n              value = metric[query.request.field];\n          }\n          var start = metric.Start;\n          var last = metric.Last;\n\n          if (this.version != \"0.9\") {\n            start /= 1000;\n            last /= 1000;\n          }\n          return [value / (last - start), moment(last, 'X').valueOf()];\n        });\n\n        data.push({\n          target: query.request.title || uuid,\n          datapoints: _.toArray(datapoints).reverse()\n        });\n      });\n\n      return data;\n    });\n  }\n\n  doGremlinQuery(gremlin) {\n    var options = {\n      url: this.url + '/api/topology',\n      method: 'POST',\n      headers: {'Content-Type': 'application/json'},\n      data: {'GremlinQuery': gremlin}\n    };\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration pange\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/api',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n}\n"]}