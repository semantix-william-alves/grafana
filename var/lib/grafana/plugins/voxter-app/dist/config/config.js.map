{"version":3,"sources":["../../src/config/config.js"],"names":[],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nclass VoxterConfigCtrl {\n  constructor($scope, $injector, $q, backendSrv, alertSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.alertSrv = alertSrv;\n    this.$scope = $scope;\n    this.appModel.secureJsonData = {};\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {\n        gnetTokenSet: false,\n        voxterTokenSet: false\n      };\n    }\n    this.voxterToken = \"\";\n    this.taskStatus = \"Task status unknown\";\n    this.task = {};\n    this.error = false;\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n    this.ready = false;\n    var self = this;\n    if (this.appModel.enabled) {\n      this.getTask().then((exists) => {\n        if (!exists) {\n          self.appModel.enabled = false;\n          self.appModel.jsonData.voxterTokenSet = false;\n        }\n      });\n    } else {\n      this.ready = true;\n    }\n  }\n\n  preUpdate() {\n    if (!this.appModel.enabled) {\n      return this.$q.resolve();\n    }\n    if (this.appModel.secureJsonData.gnet_token) {\n      console.log(\"gnet token is set.\");\n      this.appModel.jsonData.gnetTokenSet = true;\n    }\n    if (this.voxterToken) {\n      console.log(\"voxter token is set.\");\n      this.appModel.jsonData.voxterTokenSet = true;\n    }\n\n    if (!this.appModel.jsonData.gnetTokenSet || !this.appModel.jsonData.voxterTokenSet) {\n      console.log(\"both gNet key and voxter key need to be set\");\n      return this.$q.reject(\"grafana.net apiKey and voxter apiKey need to be set\");\n    }\n\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    var self = this;\n    if (!this.appModel.enabled) {\n      this.appModel.jsonData.voxterTokenSet = false;\n      return this.stopTask();\n    }\n    if (!this.voxterToken) {\n      return this.$q.resolve();\n    }\n    // make sure our Api key works.\n    return self.ensureTask().then(() => {\n      return this.appEditCtrl.importDashboards(); \n    }, () => {\n      console.log(\"failed to add task.\");\n      self.appModel.enabled = false;\n      self.error = \"Unable to add collector task. Please try again.\";\n    });\n  }\n\n  getTask() {\n    var self = this;\n    var query = {metric: \"/raintank/apps/voxter/*\"};\n    return this.backendSrv.get(\"api/plugin-proxy/voxter-app/tasks\", query).then((resp) => {\n      if (resp.meta.code !== 200) {\n        self.alertSrv.set(\"failed to get task\", resp.meta.message, 'error', 10000);\n        return false;\n      }\n      self.ready = true;\n      if (resp.body.length > 0) {\n        self.task = resp.body[0];\n        return true;\n      } else {\n        return false;\n      }\n    }, (resp) => {\n      if (resp.status === 401) {\n        self.appModel.jsonData.voxterTokenSet = false;\n        self.appModel.jsonData.gnetTokenSet = false;\n        self.appModel.enabled = false;\n      }\n    });\n  }\n\n  ensureTask() {\n    var self = this;\n    if (!this.voxterToken) {\n      return this.$q.reject(\"voxter token not set.\");\n    }\n    var taskName = \"voxter-metrics\";\n    return this.getTask(taskName).then((exists) => {\n      if (exists) {\n        console.log(\"tasks exists\");\n        self.taskStatus = \"Task exists.\";\n        return;\n      }\n      console.log(\"creating task.\");\n      var task = {\n        \"name\": taskName,\n        \"metrics\": {\"/raintank/apps/voxter/*\":0},\n        \"config\": {\n          \"/raintank/apps/voxter\": {\n            \"voxter_key\": self.voxterToken\n          }\n        },\n        \"interval\": 60,\n        \"route\": { \"type\": \"any\"},\n        \"enabled\": true\n      };\n\n      return self.backendSrv.post(\"api/plugin-proxy/voxter-app/tasks\", task).then((resp) => {\n        this.task = resp.body;\n        self.taskStatus = \"Task exists.\";\n        console.log(\"task created.\");\n      });\n    });\n  }\n\n  stopTask() {\n    this.appModel.jsonData.voxterTokenSet=false;\n    if (!this.task) {\n      console.log(\"unknown task name.\");\n      return;\n    }\n    return this.backendSrv.delete(\"api/plugin-proxy/voxter-app/tasks/\"+this.task.id).then((resp) => {\n      this.task = {};\n      this.taskStatus = \"Task not found.\";\n    });\n  }\n\n  initDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('api/datasources').then(function(results) {\n      var foundGraphite = false;\n      var foundElastic = false;\n      _.forEach(results, function(ds) {\n        if (foundGraphite && foundElastic) { return; }\n        if (ds.name === \"raintank\") {\n          foundGraphite = true;\n        }\n        if (ds.name === \"raintankEvents\") {\n          foundElastic = true;\n        }\n      });\n      var promises = [];\n      if (!foundGraphite) {\n        // create datasource.\n        var graphite = {\n          name: 'raintank',\n          type: 'graphite',\n          url: 'api/plugin-proxy/voxter-app/graphite',\n          access: 'direct',\n          jsonData: {}\n        };\n        promises.push(self.backendSrv.post('api/datasources', graphite));\n      }\n      if (!foundElastic) {\n        // create datasource.\n        var elastic = {\n          name: 'raintankEvents',\n          type: 'elasticsearch',\n          url: 'api/plugin-proxy/voxter-app/elasticsearch',\n          access: 'direct',\n          database: '[events-]YYYY-MM-DD',\n          jsonData: {\n            esVersion: 1,\n            interval: \"Daily\",\n            timeField: \"timestamp\"\n          }\n        };\n        promises.push(self.backendSrv.post('api/datasources', elastic));\n      }\n      return Promise.all(promises);\n    });\n  }\n}\n\nVoxterConfigCtrl.template = configTemplate;\n\nexport {\n  VoxterConfigCtrl as ConfigCtrl\n};\n\n"]}