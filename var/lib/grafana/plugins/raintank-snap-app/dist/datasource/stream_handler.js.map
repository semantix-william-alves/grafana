{"version":3,"sources":["../../src/datasource/stream_handler.js"],"names":["moment","Subject","StreamHandler","options","datasource","ds","subject","source","close","target","targets","taskId","getTask","then","task","console","log","watchUrl","url","id","EventSource","onmessage","onMessage","bind","onerror","onError","onopen","onOpen","onclose","onClose","metrics","evt","data","JSON","parse","type","processMetricEvent","subscribe","endTime","Date","getTime","startTime","seriesList","i","event","length","point","series","namespace","datapoints","time","timestamp","push","next","range","from","to"],"mappings":"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","file":"stream_handler.js","sourcesContent":["import moment from 'moment';\nimport {Subject} from 'vendor/npm/rxjs/Subject';\n\nexport class StreamHandler {\n\n  constructor(options, datasource) {\n    this.options = options;\n    this.ds = datasource;\n    this.subject = new Subject();\n  }\n\n  start() {\n    if (this.source) {\n      this.source.close();\n    }\n\n    var target = this.options.targets[0];\n    if (!target.taskId) {\n      return;\n    }\n\n    this.ds.getTask(target.taskId).then(task => {\n      if (!task) {\n        return;\n      }\n\n      console.log('StreamHandler: start()', task);\n\n      this.task = task;\n      var watchUrl = this.ds.url + '/v1/tasks/' + task.id + '/watch';\n      this.source = new EventSource(watchUrl);\n      this.source.onmessage = this.onMessage.bind(this);\n      this.source.onerror = this.onError.bind(this);\n      this.source.onopen = this.onOpen.bind(this);\n      this.source.onclose = this.onClose.bind(this);\n      this.metrics = {};\n    });\n  }\n\n  onMessage(evt) {\n    var data = JSON.parse(evt.data);\n    if (data.type === 'metric-event') {\n      this.processMetricEvent(data);\n    }\n  }\n\n  onError(evt) {\n    console.log('stream error', evt);\n  }\n\n  onClose(evt) {\n    console.log('stream closed', evt);\n  }\n\n  onOpen(evt) {\n    console.log('stream opened', evt);\n  }\n\n  stop() {\n    console.log('Forcing event stream close');\n    if (this.source) {\n        this.source.close();\n    }\n    this.source = null;\n  }\n\n  subscribe(options) {\n    return this.subject.subscribe(options);\n  }\n\n  processMetricEvent(data) {\n    var endTime = new Date().getTime();\n    var startTime = endTime - (60 * 1 * 1000);\n    var seriesList = [];\n\n    for (var i = 0; i < data.event.length; i++) {\n      var point = data.event[i];\n      var series = this.metrics[point.namespace];\n      if (!series) {\n        series = {target: point.namespace, datapoints: []};\n        this.metrics[point.namespace] = series;\n      }\n\n      var time = new Date(point.timestamp).getTime();\n      series.datapoints.push([point.data, time]);\n      seriesList.push(series);\n    }\n\n    this.subject.next({\n      data: seriesList,\n      range: {from: moment(startTime), to: moment(endTime)}\n    });\n  }\n}\n\n"]}