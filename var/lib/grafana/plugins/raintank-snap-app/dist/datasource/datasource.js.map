{"version":3,"sources":["../../src/datasource/datasource.js"],"names":["moment","StreamHandler","SnapDatasource","instanceSettings","$http","backendSrv","url","streamHandlers","options","datasourceRequest","request","method","then","res","data","body","ScheduledTasks","Promise","resolve","taskId","catch","err","status","target","metrics","length","reject","task","version","name","taskName","start","schedule","type","interval","workflow","collect","reduce","memo","metric","namespace","console","log","handler","panelId","metricsCache","map","text","value"],"mappings":"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","file":"datasource.js","sourcesContent":["\nimport moment from 'moment';\nimport {StreamHandler} from './stream_handler';\n\nexport class SnapDatasource {\n\n  constructor(instanceSettings, $http, backendSrv)  {\n    this.instanceSettings = instanceSettings;\n    this.url = instanceSettings.url;\n    this.$http = $http;\n    this.backendSrv = backendSrv;\n    this.streamHandlers = {};\n  }\n\n  request(options) {\n    options.url = this.url + options.url;\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  getTasks() {\n    return this.request({method: 'get', url: '/v1/tasks'}).then(res => {\n      if (!res.data || !res.data.body || !res.data.body.ScheduledTasks) {\n        return [];\n      }\n\n      return res.data.body.ScheduledTasks;\n    });\n  }\n\n  emptyResult() {\n    return Promise.resolve({data: []});\n  }\n\n  getTask(taskId) {\n    return this.request({method: 'get', url: '/v1/tasks/' + taskId}).then(res => {\n      return res.data.body;\n    }).catch(err => {\n      if (err.status === 404) {\n        return null;\n      } else {\n        throw err;\n      }\n    });\n  }\n\n  createTask(target) {\n    if (target.metrics.length === 0) {\n      return Promise.reject(\"No metrics selected for task\");\n    }\n\n    var task = {\n      version: 1,\n      name: target.taskName,\n      start: true,\n      schedule: {\n        type: 'simple',\n        interval: target.interval,\n      },\n      workflow: {\n        collect: {\n        }\n      },\n    };\n\n    task.workflow.collect.metrics = target.metrics.reduce((memo, metric) => {\n      memo[metric.namespace] = {};\n      return memo;\n    }, {});\n\n    console.log('creating task', task);\n    return this.request({method: 'post', url: '/v1/tasks', data: task}).then(res => {\n      console.log('created task', res);\n      return res.data.body;\n    });\n  }\n\n  // getTaskId(target) {\n  //   if (!target) {\n  //     return Promise.resolve(null);\n  //   }\n  //\n  //   switch (target.mode) {\n  //     case 'Watch Task': {\n  //       if (!target.taskId) {\n  //         return Promise.resolve(null);\n  //       }\n  //\n  //       return this.getTask(target.taskId).then(task => {\n  //         return task.id;\n  //       });\n  //     }\n  //     case  'Define Task': {\n  //       if (target.taskId) {\n  //         return this.getTask(target.taskId).then(task => {\n  //           return task.id;\n  //         });\n  //       }\n  //     }\n  //   }\n  // }\n\n  query(options) {\n    var handler = this.streamHandlers[options.panelId];\n    if (handler) {\n      return Promise.resolve(handler);\n    }\n\n    this.streamHandlers[options.panelId] = handler = new StreamHandler(options, this);\n    handler.start();\n\n    return Promise.resolve(handler);\n\n    // if (this.runningQuery) {\n    //   return this.runningQuery;\n    // }\n    //\n    // var target = options.targets[0];\n    // this.runningQuery = this.getTaskId(target).then(taskId => {\n    //\n    //   if (!taskId) {\n    //     return this.emptyResult();\n    //   }\n    //\n    //   var watchUrl = this.url + '/v1/tasks/' + taskId + '/watch';\n    //   this.observable = Observable.create(observer => {\n    //\n    //     var handler = new StreamHandler();\n    //     handler.start(observer, watchUrl);\n    //\n    //     return () => {\n    //       handler.close();\n    //       this.observable = null;\n    //     };\n    //   });\n    //\n    //   return this.observable;\n    // }).finally(() => {\n    //   this.runningQuery = null;\n    // });\n    //\n    // return this.runningQuery;\n  }\n\n  getMetrics() {\n    if (this.metricsCache) {\n      return Promise.resolve(this.metricsCache);\n    }\n\n    return this.request({method: 'get', url: '/v1/metrics'}).then(res => {\n      if (!res.data || !res.data.body || !res.data.body) {\n        return [];\n      }\n\n      this.metricsCache = res.data.body.map(value => {\n        return {text: value.namespace, value: value.namespace};\n      });\n\n      return this.metricsCache;\n    });\n  }\n\n  deleteTask(taskId) {\n    return this.request({method: 'delete', url: '/v1/tasks/' + taskId});\n  }\n\n  startTask(taskId) {\n    return this.request({method: 'put', url: '/v1/tasks/' + taskId + '/start'});\n  }\n\n  stopTask(taskId) {\n    return this.request({method: 'put', url: '/v1/tasks/' + taskId + '/stop'});\n  }\n\n}\n\n"]}