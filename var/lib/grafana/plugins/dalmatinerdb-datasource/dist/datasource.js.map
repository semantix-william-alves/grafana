{"version":3,"sources":["../src/datasource.js"],"names":["decode_series","res","data","start","results","map","name","values","resolution","target","replace","datapoints","timestampPoints","decode_function_table","funTable","fun","combiner_type","category","spec","_","isEqual","signature","type","default","comparator","x","sortBy","uniq","increment","r","Array","length","i","decodeList","item","value","html","key","label","decodeMetrics","root","children","parts","n","part","decodeTags","ns","tag","JSON","stringify","queryFields","q","fields","hide","from","collection","select","metric","isEmpty","tags","where","buildCondition","each","functions","fn","apply","args","alias","aliasBy","timeshift","shiftBy","tokens","stack","condition","token","operator","pop","c","v","assert","fake","DalmatinerQuery","present","notEquals","parse","equals","push","shift","kwd","and","or","Error","message","DalmatinerDatasource","instanceSettings","$q","backendSrv","url","srv","jsonData","authToken","auth","options","query","getQuery","resolve","console","log","_request","encodeURIComponent","then","status","title","undefined","range","interval","targets","auto_interval","exec","parseInt","beginningAt","endingAt","to","with","toString","toUserString","all","reduce","acc","getTagNamespaceKeys","keys","chain","flatten","namespace","partial","getLabelTagValues","getTrueTagValues","p","prefix","functionTable","ft","path","headers","Accept","method","sep","indexOf","datasourceRequest"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {DalmatinerQuery} from \"./query\";\n\n\nexport class DalmatinerDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.$q = $q;\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.srv = backendSrv;\n    if (instanceSettings.jsonData) {\n      this.authToken = instanceSettings.jsonData.auth ? instanceSettings.jsonData.authToken : null;\n    }\n  }\n\n  /*\n   * Datasource api methods\n   * ---------------------- */\n\n  // used by panels to get data\n  query(options) {\n    var query = this.getQuery(options);\n\n    if (! query)\n      return this.$q.resolve({data: []});\n\n    console.log('Running query: ' + query);\n    return this._request('/?q=' + encodeURIComponent(query))\n      .then(decode_series);\n  }\n\n  // used by datasource configuration page to make sure the connection is working\n  testDatasource() {\n    return this._request('').then(res => {\n      if (res.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n      return undefined;\n    });\n  }\n\n  // get query string\n  getQuery(options) {\n    var {range, interval, targets} = options,\n        q = new DalmatinerQuery(),\n        auto_interval;\n\n    if (targets.length <= 0)\n      return null;\n\n    for (let fields of targets) {\n      if ((fields.collection.value) &&\n          (fields.metric.length > 0))\n        queryFields(q, fields);\n    }\n\n    auto_interval = interval;\n    if (/^[0-9]+s$/.exec(interval) && parseInt(interval) < 30)\n      auto_interval = '30s';\n\n    return q\n      .beginningAt(range.from)\n      .endingAt(range.to)\n      .with('interval', interval)\n      .with('auto', auto_interval)\n      .toString();\n  }\n\n  // get simplified query string that will be displayed when form is collapsed\n  getSimplifiedQuery(target) {\n    var q = new DalmatinerQuery();\n    queryFields(q, target);\n    return q\n      .with('interval', '$interval')\n      .with('auto', '$auto')\n      .toUserString();\n  }\n\n  getCollections() {\n    return this._request('/collections')\n      .then(decodeList);\n  }\n\n  getTagKeys({collection}) {\n    var c = collection.value;\n    return this._request(`/collections/${c}/namespaces`)\n      .then((res) => {\n        return this.$q.all(\n          _.reduce(res.data, (acc, ns) => {\n            if (ns === 'label')\n              acc.push({html: 'dl:tag', value: '[\"dl\",\"tag\"]'});\n            else if (ns != 'ddb')\n              acc.push(this.getTagNamespaceKeys({collection}, ns));\n            return acc;\n          }, [])\n        );\n      })\n      .then((keys) => {\n        return _.chain(keys)\n          .flatten()\n          .sortBy(function(i) {return i.html.replace(/^dl:/, '_');})\n          .value();\n      });\n  }\n\n  getTagNamespaceKeys({collection}, namespace) {\n    var c = collection.value;\n    return this._request(`/collections/${c}/namespaces/${namespace}/tags`)\n      .then(_.partial(decodeTags, namespace));\n  }\n\n  getTagValues({collection}, tag) {\n    var [namespace, key] = tag;\n    if (namespace == 'dl' && key == 'tag')\n      return this.getLabelTagValues({collection});\n    else\n      return this.getTrueTagValues({collection}, tag);\n  }\n\n  getLabelTagValues({collection}) {\n    var c = collection.value;\n    return this._request(`/collections/${c}/namespaces/label/tags`)\n      .then(decodeList);\n  }\n\n  getTrueTagValues({collection}, [namespace, key]){\n    var c = collection.value,\n        p = `/collections/${c}/namespaces/${namespace}/tags/${key}/values`;\n    return this._request(p)\n      .then(decodeList);\n  }\n\n  getMetrics({collection}, prefix = []) {\n    return this._request('/collections/' + collection.value + '/metrics')\n      .then(decodeMetrics)\n      .then(function(root) {\n        var n = root;\n        for (let p of prefix) {\n          n = n.children[p];\n          if (!n) return [];\n        }\n        return _.values(n.children);\n      });\n  }\n\n  getFunctions() {\n    if (this.functionTable) {\n      return this.$q.resolve(this.functionTable);\n    } else {\n      return this._request('/functions')\n        .then(decode_function_table)\n        .then(ft => {\n          this.functionTable = ft;\n          return ft;\n        });\n    }\n  }\n\n  /*\n   * Internal methods\n   */\n\n  _request(path) {\n    var headers = {Accept: 'application/json'},\n        options = {method: 'GET', url: this.url + path, headers};\n    if (this.authToken) {\n      let sep = path.indexOf('?') >= 0 ? '&' : '?';\n      path += `${sep}token=${this.authToken}`;\n    }\n    return this.srv.datasourceRequest({method: 'GET', url: this.url + path, headers});\n  }\n};\n\n\n// Decode data coming from Dalmatiner\nfunction decode_series(res) {\n  var {start, results} = res.data,\n      start = start;\n  return {data: (results || []).map(({name, values, resolution}) => {\n    return {\n      target: name.replace(/'/g, \"\"),\n      datapoints: timestampPoints(values, start, resolution)\n    };\n  })};\n}\n\nfunction decode_function_table(res) {\n  let funTable = res.data.map(fun => {\n    if (fun.combiner_type !== 'none') {\n      return {category: 'Combine', name: fun.name, fun: fun.name, spec: []};\n    } else if (_.isEqual(fun.signature, ['metric'])) {\n      return {category: 'Transform', name: fun.name, fun: fun.name, spec: []};\n    } else if (_.isEqual(fun.signature, ['metric', 'time'])) {\n      return {category: 'Aggregate', name: fun.name, fun: fun.name, spec: [{type: 'time', default: '$interval'}]};\n    } else {\n      return {category: 'Arithmetic', name: fun.name, fun: fun.name, spec: [{type: 'number', default: '1'}]};\n    }\n  });\n\n  let comparator = x => {\n    return `${x.category}_${x.name}`;\n  }\n\n  return _.sortBy(_.uniq(funTable, comparator, this), ['category', 'name']);\n}\n\nfunction timestampPoints(values, start, increment) {\n  var r = new Array(values.length);\n  for (var i = 0; i < values.length; i++) {\n    r[i] = [values[i], start + (i * increment)];\n  }\n  return r;\n}\n\nfunction decodeList(res) {\n  return _.map(res.data, function (item) {\n    if (item === '') {\n      return {value: '--empty--', html: '-- empty --'};\n    } else if (typeof item == 'string')\n      return {value: item, html: item};\n    else\n      return {value: item.key, html: item.label};\n  });\n}\n\nfunction decodeMetrics(res) {\n  var root = {children: {}};\n\n  for (let {key, parts} of res.data) {\n    let n = root;\n    for (let part of parts) {\n      if (! n.children[part]) {\n        n.children[part] = {\n          value: part,\n          html: part,\n          children: {}\n        };\n      }\n      n = n.children[part];\n    }\n  }\n  return root;\n}\n\nfunction decodeTags(ns, res) {\n  return _.map(res.data, function (tag) {\n    return {\n      html: (ns == '') ? tag : `${ns}:${tag}`,\n      value: JSON.stringify([ns, tag])};\n  });\n}\n\nfunction queryFields(q, fields) {\n  if (fields.hide)\n    return q;\n\n  q.from(fields.collection)\n    .select(fields.metric);\n\n  if (! _.isEmpty(fields.tags)) {\n    q.where(buildCondition(fields.tags));\n  }\n  _.each(fields.functions, function (fn) {\n    q.apply(fn.fun || fn.name, fn.args);\n  });\n\n  if (! _.isEmpty(fields.alias)) {\n    q.aliasBy(fields.alias);\n  }\n\n  if (! _.isEmpty(fields.timeshift)) {\n    q.shiftBy(fields.timeshift);\n  }\n\n  return q;\n}\n\nfunction buildCondition(tokens) {\n  var stack = [],\n      condition;\n\n  // First run is to expand all operators, leaving only condition objects and\n  // condition keywords left on stack\n  for (let token of tokens) {\n    if (token.type === 'value') {\n      let operator = stack.pop(),\n          key = stack.pop(),\n          c, v;\n      assert(operator.type === 'operator', \"Expected operator, but got: \" + operator.type);\n      assert(key.type === 'key', \"Expected token key, but got: \" + key.type);\n      if (token.fake) {\n        c = null;\n      } else if (key.value == '[\"dl\",\"tag\"]') {\n        c = DalmatinerQuery.present(['label', token.value]);\n      } else if (operator.value === \"!=\") {\n        v = token.value;\n        c = DalmatinerQuery.notEquals(JSON.parse(key.value), v);\n      } else {\n        v = token.value === '--empty--' ? v = '' : v = token.value;\n        c = DalmatinerQuery.equals(JSON.parse(key.value), v);\n      }\n      stack.push(c);\n    } else {\n      stack.push(token);\n    }\n  }\n\n  // Now we iterate through stack to combine all conditions joining them by\n  // keyword\n  condition = stack.shift();\n  while (stack.length) {\n    let kwd = stack.shift(),\n        c = stack.shift();\n    if (condition === null) {\n      continue;\n    }\n    assert(kwd.type === 'condition', \"Expected condition keyword, but got: \" + JSON.stringify(c));\n    if (c === null)\n      continue;\n    switch (kwd.value) {\n    case('AND'):\n      condition = condition.and(c);\n      break;\n    case('OR'):\n      condition = condition.or(c);\n      break;\n    default:\n      throw new Error('Unexpected condition keyword: ' + kwd.value);\n    }\n  }\n\n  return condition;\n}\n\nfunction assert(condition, message) {\n  if (! condition) {\n    throw new Error(message);\n  }\n}\n"]}