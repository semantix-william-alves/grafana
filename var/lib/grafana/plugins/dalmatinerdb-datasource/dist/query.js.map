{"version":3,"sources":["../src/query.js"],"names":["_","moment","DalmatinerQueryCondition","op","args","other","tag","value","a","b","_encodeTag","ns","key","DalmatinerProjection","alias","timeshift","str","toString","DalmatinerFunction","fun","vars","_encodeArg","bind","map","join","arg","varname","slice","isUndefined","Error","DalmatinerSelector","collection","metric","variables","mpart","condition","_encodeMetric","_encodeCollection","part","DalmatinerQuery","parts","selectors","c","m","selector","push","active","length","t","beginning","ending","name","where","aliasBy","shiftBy","fargs","concat","f","toUserString","_encodeRange","_encodeProjections","utc","format","duration","Math","round","p","encode"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAOA,O;;AACAC,Y;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGDC,8B;AACJ,0CAAaC,EAAb,EAA0B;AAAA;;AACxB,eAAKA,EAAL,GAAUA,EAAV;;AADwB,4CAANC,IAAM;AAANA,gBAAM;AAAA;;AAExB,eAAKA,IAAL,GAAYA,IAAZ;AACD;;;;8BAEIC,K,EAAO;AACV,mBAAO,IAAIH,wBAAJ,CAA6B,KAA7B,EAAoC,IAApC,EAA0CG,KAA1C,CAAP;AACD;;;6BAEGA,K,EAAO;AACT,mBAAO,IAAIH,wBAAJ,CAA6B,IAA7B,EAAmC,IAAnC,EAAyCG,KAAzC,CAAP;AACD;;;qCAEU;AACT,gBAAIC,GAAJ,EAASC,KAAT,EAAgBC,CAAhB,EAAmBC,CAAnB;AACA,oBAAQ,KAAKN,EAAb;AACA,mBAAM,IAAN;AAAA,2CACiB,KAAKC,IADtB;;AACGE,mBADH;AACQC,qBADR;;AAEE,uBAAU,KAAKG,UAAL,CAAgBJ,GAAhB,CAAV,YAAqCC,KAArC;AACF,mBAAM,KAAN;AAAA,4CACiB,KAAKH,IADtB;;AACGE,mBADH;AACQC,qBADR;;AAEE,uBAAU,KAAKG,UAAL,CAAgBJ,GAAhB,CAAV,aAAsCC,KAAtC;AACF,mBAAM,SAAN;AAAA,4CACU,KAAKH,IADf;;AACGE,mBADH;;AAEE,uBAAO,KAAKI,UAAL,CAAgBJ,GAAhB,CAAP;AACF,mBAAM,KAAN;AAAA,4CACW,KAAKF,IADhB;;AACGI,iBADH;AACMC,iBADN;;AAEE,uBAAUD,CAAV,aAAmBC,CAAnB;AACF,mBAAM,IAAN;AAAA,4CACW,KAAKL,IADhB;;AACGI,iBADH;AACMC,iBADN;;AAEE,uBAAUD,CAAV,YAAkBC,CAAlB;AAfF;AAiBA,mBAAO,EAAP;AACD;;;2CAEqB;AAAA;AAAA,gBAAVE,EAAU;AAAA,gBAANC,GAAM;;AACpB,mBAAOD,KAAQA,EAAR,UAAeC,GAAf,eAA4BA,GAA5B,MAAP;AACD;;;;;;AAGGC,0B;AACJ,wCAAc;AAAA;AAAE;;;;kCAERC,K,EAAO;AACb,iBAAKA,KAAL,GAAaA,KAAb;AACA,mBAAO,IAAP;AACD;;;kCAEOC,S,EAAW;AACjB,iBAAKA,SAAL,GAAiBA,SAAjB;AACA,mBAAO,IAAP;AACD;;;mCAEQ;AACP,gBAAIC,MAAM,KAAKC,QAAL,EAAV;AACA,gBAAI,KAAKH,KAAT,EAAgB;AACdE,8BAAc,KAAKF,KAAnB;AACD;AACD,gBAAI,KAAKC,SAAT,EAAoB;AAClBC,oCAAoB,KAAKD,SAAzB;AACD;AACD,mBAAOC,GAAP;AACD;;;;;;AAGGE,wB;;;AACJ,oCAAYC,GAAZ,EAAiBf,IAAjB,EAAuBgB,IAAvB,EAA6B;AAAA;;AAAA;;AAE3B,gBAAKD,GAAL,GAAWA,GAAX;AACA,gBAAKf,IAAL,GAAYA,IAAZ;AACA,gBAAKgB,IAAL,GAAYA,IAAZ;AACA,gBAAKC,UAAL,GAAkB,MAAKA,UAAL,CAAgBC,IAAhB,OAAlB;AAL2B;AAM5B;;;;qCAEU;AACT,gBAAIlB,OAAO,KAAKA,IAAL,CAAUmB,GAAV,CAAc,KAAKF,UAAnB,CAAX;AACA,mBAAU,KAAKF,GAAf,SAAsBf,KAAKoB,IAAL,CAAU,IAAV,CAAtB;AACD;;;qCAEUC,G,EAAK;AACd,gBAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,IAAI,CAAJ,MAAW,GAA1C,EAA+C;AAC7C,kBAAIC,UAAUD,IAAIE,KAAJ,CAAU,CAAV,CAAd;AACAF,oBAAM,KAAKL,IAAL,CAAUM,OAAV,CAAN;AACA,kBAAI1B,EAAE4B,WAAF,CAAcH,GAAd,CAAJ,EAAwB;AACtB,sBAAM,IAAII,KAAJ,eAAsBH,OAAtB,uBAAN;AACD;AACF;AACD,mBAAO,KAAKD,GAAZ;AACD;;;;QAvB8BZ,oB;;AA0B3BiB,wB;;;AAEJ,oCAAYC,UAAZ,EAAwBC,MAAxB,EAAgCC,SAAhC,EAA2C;AAAA;;AAAA;;AAEzC,iBAAKF,UAAL,GAAkBA,UAAlB;AACA,iBAAKC,MAAL,GAAchC,EAAEuB,GAAF,CAAMS,MAAN,EAAc,UAAUE,KAAV,EAAiB;AAC3C,mBAAOA,MAAM3B,KAAN,GAAc2B,MAAM3B,KAApB,GAA4B2B,MAAMjB,QAAN,EAAnC;AACD,WAFa,CAAd;AAGA,iBAAKgB,SAAL,GAAiBA,SAAjB;AANyC;AAO1C;;;;gCAEKE,S,EAAW;AACf,iBAAKA,SAAL,GAAiBA,SAAjB;AACA,mBAAO,IAAP;AACD;;;qCAEU;AACT,gBAAIH,SAAS,KAAKI,aAAL,EAAb;AAAA,gBACIL,aAAa,KAAKM,iBAAL,EADjB;AAAA,gBAEIrB,MAASgB,MAAT,cAAwBD,UAF5B;AAGA,gBAAI,KAAKI,SAAT,EAAoB;AAClBnB,iCAAiB,KAAKmB,SAAtB;AACD;AACD,mBAAOnB,GAAP;AACD;;;8CAEmB;AAClB,yBAAW,KAAKe,UAAhB;AACD;;;0CAEe;AACd,mBAAO/B,EAAEuB,GAAF,CAAM,KAAKS,MAAX,EAAmB,UAASM,IAAT,EAAe;AACvC,kBAAIA,SAAS,GAAb,EACE,YAAUA,IAAV,CADF,KAGE,aAAWA,IAAX;AACH,aALM,EAKJd,IALI,CAKC,GALD,CAAP;AAMD;;;;QArC8BX,oB;;iCAwCpB0B,e;AAEX,mCAAc;AAAA;;AACZ,eAAKN,SAAL,GAAiB,EAAjB;AACA,eAAKO,KAAL,GAAa,EAAb;AACA,eAAKC,SAAL,GAAiB,EAAjB;AACD;;;;+BAiBIC,C,EAAG;AACN,iBAAKX,UAAL,GAAkBW,EAAEnC,KAAF,GAAUmC,EAAEnC,KAAZ,GAAoBmC,EAAEzB,QAAF,EAAtC;AACA,mBAAO,IAAP;AACD;;;iCAEM0B,C,EAAG;AACR,gBAAI,CAAE,KAAKZ,UAAX,EACE,MAAM,IAAIF,KAAJ,CAAU,qEAAV,CAAN;AACF,gBAAIe,WAAW,IAAId,kBAAJ,CAAuB,KAAKC,UAA5B,EAAwCY,CAAxC,CAAf;AACA,iBAAKF,SAAL,CAAeI,IAAf,CAAoBD,QAApB;AACA,iBAAKJ,KAAL,CAAWK,IAAX,CAAgBD,QAAhB;AACA,iBAAKE,MAAL,GAAc,KAAKN,KAAL,CAAWO,MAAX,GAAoB,CAAlC;AACA,mBAAO,IAAP;AACD;;;sCAEWC,C,EAAG;AACb,iBAAKC,SAAL,GAAiBhD,OAAO+C,CAAP,CAAjB;AACA,mBAAO,IAAP;AACD;;;mCAEQA,C,EAAG;AACV,iBAAKE,MAAL,GAAcjD,OAAO+C,CAAP,CAAd;AACA,mBAAO,IAAP;AACD;;;gCAEIG,I,EAAM5C,K,EAAO;AAChB,iBAAK0B,SAAL,CAAekB,IAAf,IAAuB5C,KAAvB;AACA,mBAAO,IAAP;AACD;;;gCAEK4B,S,EAAW;AACf,gBAAI,CAAEA,SAAF,YAAuBjC,wBAA3B,EAAqD;AACnD,oBAAM,IAAI2B,KAAJ,CAAU,yBAAV,CAAN;AACD;AACD,iBAAKY,SAAL,CAAe,KAAKK,MAApB,EAA4BM,KAA5B,CAAkCjB,SAAlC;AACA,mBAAO,IAAP;AACD;;;kCAEOrB,K,EAAO;AACb,iBAAK0B,KAAL,CAAW,KAAKM,MAAhB,EAAwBO,OAAxB,CAAgCvC,KAAhC;AACA,mBAAO,IAAP;AACD;;;kCAEOC,S,EAAW;AACjB,iBAAKyB,KAAL,CAAW,KAAKM,MAAhB,EAAwBQ,OAAxB,CAAgCvC,SAAhC;AACA,mBAAO,IAAP;AACD;;;gCAEKI,G,EAAgB;AAAA,gBAAXf,IAAW,uEAAJ,EAAI;;AACpB,gBAAIJ,EAAE4B,WAAF,CAAc,KAAKkB,MAAnB,CAAJ,EACE,MAAM,IAAIjB,KAAJ,CAAU,6DAAV,CAAN;;AAEF,gBAAIS,OAAO,KAAKE,KAAL,CAAW,KAAKM,MAAhB,CAAX;AAAA,gBACIS,QAAQ,CAACjB,IAAD,EAAOkB,MAAP,CAAcpD,IAAd,CADZ;AAAA,gBAEIqD,IAAI,IAAIvC,kBAAJ,CAAuBC,GAAvB,EAA4BoC,KAA5B,EAAmC,KAAKtB,SAAxC,CAFR;;AAIA,iBAAKO,KAAL,CAAW,KAAKM,MAAhB,IAA0BW,CAA1B;AACA,mBAAO,IAAP;AACD;;;qCAMU;AACT,mBAAO,KAAKC,YAAL,KAAsB,GAAtB,GAA4B,KAAKC,YAAL,EAAnC;AACD;;;yCAEc;AACb,mBAAO,YAAY,KAAKC,kBAAL,GAA0BpC,IAA1B,CAA+B,IAA/B,CAAnB;AACD;;;yCAMc;AACb,gBAAI0B,SAAS,KAAKA,MAAL,CAAYW,GAAZ,GAAkBC,MAAlB,CAAyB,qBAAzB,CAAb;AAAA,gBACIC,WAAWC,KAAKC,KAAL,CAAW,CAAC,KAAKf,MAAL,GAAc,KAAKD,SAApB,IAAiC,IAA5C,CADf;AAEA,iCAAkBC,MAAlB,eAAiCa,QAAjC;AACD;;;+CAEoB;AACnB,mBAAO,KAAKvB,KAAL,CAAWjB,GAAX,CAAe,aAAK;AAAE,qBAAO2C,EAAEC,MAAF,EAAP;AAAoB,aAA1C,CAAP;AACD;;;iCAnGa3D,C,EAAGC,C,EAAG;AAClB,mBAAO,IAAIP,wBAAJ,CAA6B,IAA7B,EAAmCM,CAAnC,EAAsCC,CAAtC,CAAP;AACD;;;oCAEgBD,C,EAAGC,C,EAAG;AACrB,mBAAO,IAAIP,wBAAJ,CAA6B,KAA7B,EAAoCM,CAApC,EAAuCC,CAAvC,CAAP;AACD;;;kCAEcD,C,EAAG;AAChB,mBAAO,IAAIN,wBAAJ,CAA6B,SAA7B,EAAwCM,CAAxC,CAAP;AACD;;;;;;;;AA2FF","file":"query.js","sourcesContent":["import _ from \"lodash\";\nimport moment from \"moment\";\n\n\nclass DalmatinerQueryCondition {\n  constructor (op, ...args) {\n    this.op = op;\n    this.args = args;\n  }\n\n  and (other) {\n    return new DalmatinerQueryCondition('and', this, other);\n  }\n\n  or (other) {\n    return new DalmatinerQueryCondition('or', this, other);\n  }\n\n  toString() {\n    var tag, value, a, b;\n    switch (this.op) {\n    case ('eq'):\n      [tag, value] = this.args;\n      return `${this._encodeTag(tag)} = '${value}'`;\n    case ('neq'):\n      [tag, value] = this.args;\n      return `${this._encodeTag(tag)} != '${value}'`;\n    case ('present'):\n      [tag] = this.args;\n      return this._encodeTag(tag);\n    case ('and'):\n      [a, b] = this.args;\n      return `${a} AND ${b}`;\n    case ('or'):\n      [a, b] = this.args;\n      return `${a} OR ${b}`;\n    }\n    return '';\n  }\n\n  _encodeTag([ns, key]) {\n    return ns ? `${ns}:'${key}'` : `'${key}'`;\n  }\n}\n\nclass DalmatinerProjection {\n  constructor() {}\n\n  aliasBy(alias) {\n    this.alias = alias;\n    return this;\n  }\n\n  shiftBy(timeshift) {\n    this.timeshift = timeshift;\n    return this;\n  }\n\n  encode() {\n    var str = this.toString();\n    if (this.alias) {\n      str += ` AS ${this.alias}`;\n    }\n    if (this.timeshift) {\n      str += ` SHIFT BY ${this.timeshift}`;\n    }\n    return str;\n  }\n}\n\nclass DalmatinerFunction extends DalmatinerProjection {\n  constructor(fun, args, vars) {\n    super();\n    this.fun = fun;\n    this.args = args;\n    this.vars = vars;\n    this._encodeArg = this._encodeArg.bind(this);\n  }\n\n  toString() {\n    var args = this.args.map(this._encodeArg);\n    return `${this.fun}(${args.join(', ')})`;\n  }\n\n  _encodeArg(arg) {\n    if (typeof arg === 'string' && arg[0] === '$') {\n      let varname = arg.slice(1);\n      arg = this.vars[varname];\n      if (_.isUndefined(arg)) {\n        throw new Error(`Variable ${varname} was not declared`);\n      }\n    }\n    return '' + arg;\n  }\n}\n\nclass DalmatinerSelector extends DalmatinerProjection {\n\n  constructor(collection, metric, variables) {\n    super();\n    this.collection = collection;\n    this.metric = _.map(metric, function (mpart) {\n      return mpart.value ? mpart.value : mpart.toString();\n    });\n    this.variables = variables;\n  }\n\n  where(condition) {\n    this.condition = condition;\n    return this;\n  }\n\n  toString() {\n    var metric = this._encodeMetric(),\n        collection = this._encodeCollection(),\n        str = `${metric} FROM ${collection}`;\n    if (this.condition) {\n      str += ` WHERE ${this.condition}`;\n    }\n    return str;\n  }\n\n  _encodeCollection() {\n    return `'${this.collection}'`;\n  }\n\n  _encodeMetric() {\n    return _.map(this.metric, function(part) {\n      if (part === '*')\n        return `${part}`;\n      else\n        return `'${part}'`;\n    }).join('.');\n  }\n}\n\nexport class DalmatinerQuery {\n\n  constructor() {\n    this.variables = {};\n    this.parts = [];\n    this.selectors = [];\n  }\n\n  static equals(a, b) {\n    return new DalmatinerQueryCondition('eq', a, b);\n  }\n\n  static notEquals(a, b) {\n    return new DalmatinerQueryCondition('neq', a, b);\n  }\n\n  static present(a) {\n    return new DalmatinerQueryCondition('present', a);\n  }\n\n  /**\n   * Chain-able setters\n   */\n  from(c) {\n    this.collection = c.value ? c.value : c.toString();\n    return this;\n  }\n\n  select(m) {\n    if (! this.collection)\n      throw new Error(\"You need to set collection (from statement) before selecting metric\");\n    var selector = new DalmatinerSelector(this.collection, m);\n    this.selectors.push(selector);\n    this.parts.push(selector);\n    this.active = this.parts.length - 1;\n    return this;\n  }\n\n  beginningAt(t) {\n    this.beginning = moment(t);\n    return this;\n  }\n\n  endingAt(t) {\n    this.ending = moment(t);\n    return this;\n  }\n\n  with(name, value) {\n    this.variables[name] = value;\n    return this;\n  }\n\n  where(condition) {\n    if (! condition instanceof DalmatinerQueryCondition) {\n      throw new Error(\"Invalid query condition\");\n    }\n    this.selectors[this.active].where(condition);\n    return this;\n  }\n\n  aliasBy(alias) {\n    this.parts[this.active].aliasBy(alias);\n    return this;\n  }\n\n  shiftBy(timeshift) {\n    this.parts[this.active].shiftBy(timeshift);\n    return this;\n  }\n\n  apply(fun, args = []) {\n    if (_.isUndefined(this.active))\n      throw new Error(\"You need to select something before you can apply functions\");\n\n    var part = this.parts[this.active],\n        fargs = [part].concat(args),\n        f = new DalmatinerFunction(fun, fargs, this.variables);\n\n    this.parts[this.active] = f;\n    return this;\n  }\n\n  /**\n   * Reading function\n   */\n\n  toString() {\n    return this.toUserString() + ' ' + this._encodeRange();\n  }\n\n  toUserString() {\n    return 'SELECT ' + this._encodeProjections().join(', ');\n  }\n\n  /**\n   * Internal methods\n   */\n\n  _encodeRange() {\n    var ending = this.ending.utc().format(\"YYYY-MM-DD HH:mm:ss\"),\n        duration = Math.round((this.ending - this.beginning) / 1000);\n    return `BEFORE \"${ending}\" FOR ${duration}s`;\n  }\n\n  _encodeProjections() {\n    return this.parts.map(p => { return p.encode(); });\n  }\n\n};\n"]}