{"version":3,"sources":["../src/DeviceHiveDirectives.js"],"names":["angular","ConverterManager","converterManager","templatesRoot","ConverterSelector","me","restrict","templateUrl","scope","onlySelector","onSelect","onBlur","element","attrs","expanded","selectedConverter","converters","getConvertersNameList","onChange","converterName","toggleSelector","Converter","argValues","onDelete","isConverterSelected","showEditPanel","config","getConverterObject","toggleEditPanel","changeConverter","onConverterSelect","getConverterDefaultValuesObject","onTypeChange","optionValue","getUnitConvertOptions","Object","keys","forEach","key","index","module","directive"],"mappings":";;;;;;;;;;;;;;;AAAOA,mB;;AACAC,4B;;;;;;;;;;;;;;;;;;;;;AAEDC,4B,GAAmB,IAAID,gBAAJ,E;AACnBE,yB;;AAMAC,6B;AAEF,6CAAc;AAAA;;AACV,wBAAMC,KAAK,IAAX;;AAEAA,uBAAGC,QAAH,GAAc,GAAd;AACAD,uBAAGE,WAAH,GAAoBJ,aAApB;AACAE,uBAAGG,KAAH,GAAW;AACPC,sCAAc,GADP;AAEPC,qCAFO;AAGPC;AAHO,qBAAX;AAKH;;;;yCAEKH,K,EAAOI,O,EAASC,K,EAAO;AACzBL,8BAAMM,QAAN,GAAiB,KAAjB;AACAN,8BAAMO,iBAAN,GAA0B,IAA1B;AACAP,8BAAMQ,UAAN,GAAmBd,iBAAiBe,qBAAjB,EAAnB;;AAEAT,8BAAMU,QAAN,GAAiB,YAAM;AACnBV,kCAAME,QAAN,CAAe,EAAES,eAAeX,MAAMO,iBAAvB,EAAf;AACAP,kCAAMY,cAAN;AACH,yBAHD;;AAKAZ,8BAAMY,cAAN,GAAuB,YAAM;AACzBZ,kCAAMM,QAAN,GAAiB,CAACN,MAAMM,QAAxB;AACAN,kCAAMO,iBAAN,GAA0B,IAA1B;AACH,yBAHD;AAIH;;;;;;AAOCM,qB;AAEF,qCAAc;AAAA;;AACV,wBAAMhB,KAAK,IAAX;;AAEAA,uBAAGC,QAAH,GAAc,GAAd;AACAD,uBAAGE,WAAH,GAAoBJ,aAApB;AACAE,uBAAGG,KAAH,GAAW;AACPW,uCAAe,GADR;AAEPG,mCAAW,GAFJ;AAGPC,kCAAU;AAHH,qBAAX;AAKH;;;;yCAEKf,K,EAAOI,O,EAASC,K,EAAO;AACzBL,8BAAMgB,mBAAN,GAA4B,IAA5B;AACAhB,8BAAMiB,aAAN,GAAsB,KAAtB;AACAjB,8BAAMkB,MAAN,GAAexB,iBAAiByB,kBAAjB,CAAoCnB,MAAMW,aAA1C,CAAf;;AAEAX,8BAAMoB,eAAN,GAAwB,YAAM;AAC1BpB,kCAAMiB,aAAN,GAAsB,CAACjB,MAAMiB,aAA7B;AACH,yBAFD;;AAIAjB,8BAAMqB,eAAN,GAAwB,YAAM;AAC1BrB,kCAAMgB,mBAAN,GAA4B,KAA5B;AACH,yBAFD;;AAIAhB,8BAAMsB,iBAAN,GAA0B,UAACX,aAAD,EAAmB;AACzC,gCAAIX,MAAMW,aAAN,KAAwBA,aAA5B,EAA2C;AACvCX,sCAAMW,aAAN,GAAsBA,aAAtB;AACAX,sCAAMkB,MAAN,GAAexB,iBAAiByB,kBAAjB,CAAoCR,aAApC,CAAf;AACAX,sCAAMc,SAAN,GAAkBpB,iBAAiB6B,+BAAjB,CAAiDZ,aAAjD,CAAlB;AACH;;AAEDX,kCAAMgB,mBAAN,GAA4B,IAA5B;AACH,yBARD;;AAUAhB,8BAAMwB,YAAN,GAAqB,YAAY;AAC7B,gCAAMC,cAAchC,iBAAiBiC,qBAAjB,GAAyC1B,MAAMc,SAAN,CAAgB,CAAhB,CAAzC,EAA6D,CAA7D,CAApB;;AAEAa,mCAAOC,IAAP,CAAY5B,MAAMc,SAAlB,EAA6Be,OAA7B,CAAqC,UAASC,GAAT,EAAcC,KAAd,EAAqB;AACtD/B,sCAAMc,SAAN,CAAgBgB,GAAhB,IAAuBC,UAAU,CAAV,GAAc/B,MAAMc,SAAN,CAAgBgB,GAAhB,CAAd,GAAqCL,WAA5D;AACH,6BAFD;AAGH,yBAND;AAOH;;;;;;AAGLjC,oBACKwC,MADL,CACY,oBADZ,EAEKC,SAFL,CAEe,qBAFf,EAEsC;AAAA,uBAAM,IAAIrC,iBAAJ,EAAN;AAAA,aAFtC,EAGKqC,SAHL,CAGe,aAHf,EAG8B;AAAA,uBAAM,IAAIpB,SAAJ,EAAN;AAAA,aAH9B","file":"DeviceHiveDirectives.js","sourcesContent":["import angular from 'angular';\r\nimport ConverterManager from './ConverterManager.js';\r\n\r\nconst converterManager = new ConverterManager();\r\nconst templatesRoot = `public/plugins/devicehive-devicehive-datasource/partials`;\r\n\r\n\r\n/**\r\n * ConverterSelector angular directive class\r\n */\r\nclass ConverterSelector {\r\n\r\n    constructor() {\r\n        const me = this;\r\n\r\n        me.restrict = 'E';\r\n        me.templateUrl = `${templatesRoot}/converter.selector.html`;\r\n        me.scope = {\r\n            onlySelector: '@',\r\n            onSelect: `&`,\r\n            onBlur: `&`\r\n        }\r\n    }\r\n\r\n    link (scope, element, attrs) {\r\n        scope.expanded = false;\r\n        scope.selectedConverter = null;\r\n        scope.converters = converterManager.getConvertersNameList();\r\n\r\n        scope.onChange = () => {\r\n            scope.onSelect({ converterName: scope.selectedConverter });\r\n            scope.toggleSelector();\r\n        };\r\n\r\n        scope.toggleSelector = () => {\r\n            scope.expanded = !scope.expanded;\r\n            scope.selectedConverter = null;\r\n        };\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Converter angular directive class\r\n */\r\nclass Converter {\r\n\r\n    constructor() {\r\n        const me = this;\r\n\r\n        me.restrict = 'E';\r\n        me.templateUrl = `${templatesRoot}/converter.html`;\r\n        me.scope = {\r\n            converterName: '=',\r\n            argValues: '=',\r\n            onDelete: '&'\r\n        }\r\n    }\r\n\r\n    link (scope, element, attrs) {\r\n        scope.isConverterSelected = true;\r\n        scope.showEditPanel = false;\r\n        scope.config = converterManager.getConverterObject(scope.converterName);\r\n\r\n        scope.toggleEditPanel = () => {\r\n            scope.showEditPanel = !scope.showEditPanel;\r\n        };\r\n\r\n        scope.changeConverter = () => {\r\n            scope.isConverterSelected = false;\r\n        };\r\n\r\n        scope.onConverterSelect = (converterName) => {\r\n            if (scope.converterName !== converterName) {\r\n                scope.converterName = converterName;\r\n                scope.config = converterManager.getConverterObject(converterName);\r\n                scope.argValues = converterManager.getConverterDefaultValuesObject(converterName);\r\n            }\r\n\r\n            scope.isConverterSelected = true;\r\n        };\r\n\r\n        scope.onTypeChange = function () {\r\n            const optionValue = ConverterManager.getUnitConvertOptions()[scope.argValues[0]][0];\r\n\r\n            Object.keys(scope.argValues).forEach(function(key, index) {\r\n                scope.argValues[key] = index === 0 ? scope.argValues[key] : optionValue\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nangular\r\n    .module('grafana.directives')\r\n    .directive('dhConverterSelector', () => new ConverterSelector)\r\n    .directive('dhConverter', () => new Converter);"]}