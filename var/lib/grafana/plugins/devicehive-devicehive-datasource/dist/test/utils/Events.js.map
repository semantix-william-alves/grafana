{"version":3,"sources":["../../../src/utils/Events.js"],"names":["Events","me","listeners","Map","eventName","callback","has","set","get","push","stack","i","l","length","splice","listenersPool","map","listener","forEach","call","wrapper","removeEventListener","addEventListener"],"mappings":";;;;;;;;;;AACA;;;IAGMA,M;;AAEF;;;AAGA,sBAAe;AAAA;;AACX,YAAMC,KAAK,IAAX;;AAEAA,WAAGC,SAAH,GAAe,IAAIC,GAAJ,EAAf;AACH;;AAED;;;;;;;;;yCAKiBC,S,EAAWC,Q,EAAU;AAClC,gBAAMJ,KAAK,IAAX;;AAEA,gBAAI,CAACA,GAAGC,SAAH,CAAaI,GAAb,CAAiBF,SAAjB,CAAL,EAAkC;AAC9BH,mBAAGC,SAAH,CAAaK,GAAb,CAAiBH,SAAjB,EAA4B,EAA5B;AACH;;AAEDH,eAAGC,SAAH,CAAaM,GAAb,CAAiBJ,SAAjB,EAA4BK,IAA5B,CAAiCJ,QAAjC;AACH;;AAED;;;;;;;;4CAKqBD,S,EAAWC,Q,EAAU;AACtC,gBAAMJ,KAAK,IAAX;;AAEA,gBAAI,CAACA,GAAGC,SAAH,CAAaI,GAAb,CAAiBF,SAAjB,CAAL,EAAkC;AAC9B;AACH;;AAED,gBAAMM,QAAQT,GAAGC,SAAH,CAAaM,GAAb,CAAiBJ,SAAjB,CAAd;;AAEA,iBAAK,IAAIO,IAAI,CAAR,EAAWC,IAAIF,MAAMG,MAA1B,EAAkCF,IAAIC,CAAtC,EAAyCD,GAAzC,EAA8C;AAC1C,oBAAID,MAAMC,CAAN,MAAaN,QAAjB,EAA0B;AACtBK,0BAAMI,MAAN,CAAaH,CAAb,EAAgB,CAAhB;AACA;AACH;AACJ;AACJ;;AAED;;;;;;;;sCAKeP,S,EAAW;AACtB,gBAAMH,KAAK,IAAX;;AAEA,gBAAIA,GAAGC,SAAH,CAAaI,GAAb,CAAiBF,SAAjB,CAAJ,EAAiC;AAC7B,oBAAMM,QAAQT,GAAGC,SAAH,CAAaM,GAAb,CAAiBJ,SAAjB,CAAd;AACA,oBAAMW,gBAAgBL,MAAMM,GAAN,CAAU,UAACC,QAAD;AAAA,2BAAcA,QAAd;AAAA,iBAAV,CAAtB;;AAEAF,8BAAcG,OAAd,CAAsB,UAACD,QAAD,EAAc;AAChCA,6BAASE,IAAT,CAAclB,EAAd;AACH,iBAFD;AAGH;;AAED,mBAAO,IAAP;AACH;;AAED;;;;;;;;6BAKMG,S,EAAWC,Q,EAAU;AAAA;;AACvB,gBAAMJ,KAAK,IAAX;AACA,gBAAMmB,UAAU,SAAVA,OAAU,GAAM;AAClBnB,mBAAGoB,mBAAH,CAAuBjB,SAAvB,EAAkCgB,OAAlC;AACAf,yBAASc,IAAT,CAAclB,EAAd;AACH,aAHD;;AAKAA,eAAGqB,gBAAH,CAAoBlB,SAApB,EAA+BgB,OAA/B;AACH;;;;;;kBAIUpB,M","file":"Events.js","sourcesContent":["\r\n/**\r\n * EventTarget implementation\r\n */\r\nclass Events {\r\n\r\n    /**\r\n     * Create new Events object\r\n     */\r\n    constructor () {\r\n        const me = this;\r\n\r\n        me.listeners = new Map();\r\n    }\r\n\r\n    /**\r\n     * Add event listener\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    addEventListener(eventName, callback) {\r\n        const me = this;\r\n\r\n        if (!me.listeners.has(eventName)) {\r\n            me.listeners.set(eventName, []);\r\n        }\r\n\r\n        me.listeners.get(eventName).push(callback);\r\n    }\r\n\r\n    /**\r\n     * Remove event listener\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    removeEventListener (eventName, callback) {\r\n        const me = this;\r\n\r\n        if (!me.listeners.has(eventName)) {\r\n            return;\r\n        }\r\n\r\n        const stack = me.listeners.get(eventName);\r\n\r\n        for (let i = 0, l = stack.length; i < l; i++) {\r\n            if (stack[i] === callback){\r\n                stack.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fire event\r\n     * @param eventName\r\n     * @returns {boolean}\r\n     */\r\n    dispatchEvent (eventName) {\r\n        const me = this;\r\n\r\n        if (me.listeners.has(eventName)) {\r\n            const stack = me.listeners.get(eventName);\r\n            const listenersPool = stack.map((listener) => listener);\r\n\r\n            listenersPool.forEach((listener) => {\r\n                listener.call(me);\r\n            });\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Add disposable event listener\r\n     * @param eventName\r\n     * @param callback\r\n     */\r\n    once (eventName, callback) {\r\n        const me = this;\r\n        const wrapper = () => {\r\n            me.removeEventListener(eventName, wrapper);\r\n            callback.call(me, arguments);\r\n        };\r\n\r\n        me.addEventListener(eventName, wrapper);\r\n    }\r\n}\r\n\r\n\r\nexport default Events;"]}