{"version":3,"sources":["../src/ConverterManager.js"],"names":["lodash","ConverterManager","me","converters","Map","set","arguments","type","defaultValue","exec","a1","value","convertValueOptions","getUnitConvertOptions","convertTypeOptions","Object","keys","options","a2","a3","_execUnitConvert","result","forEach","key","push","assign","name","Array","from","converterName","get","getConverterObject","reduce","obj","argument","index","args","has","converter","execFunc","bind","_castArgument","temperature","length","weight","volume","castedValue","Number","isNumber","isNaN","to","toUpperCase","_convertTemperature","_convertLength","_convertWeight","_convertVolume"],"mappings":"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","file":"ConverterManager.js","sourcesContent":["import lodash from \"lodash\";\r\n\r\n\r\n/**\r\n * Value converter manager\r\n */\r\nclass ConverterManager {\r\n\r\n    /**\r\n     * Create new ConverterManager\r\n     */\r\n    constructor() {\r\n        const me = this;\r\n\r\n        me.converters = new Map();\r\n\r\n        me.converters.set(`Offset`, {\r\n            arguments: [\r\n                { type: `number`, defaultValue: 0 }\r\n            ],\r\n            exec: (a1, value) => a1 + value\r\n        });\r\n\r\n        me.converters.set(`Scale`, {\r\n            arguments: [\r\n                { type: `number`, defaultValue: 1 }\r\n            ],\r\n            exec: (a1, value) => a1 * value\r\n        });\r\n\r\n        const convertValueOptions = ConverterManager.getUnitConvertOptions();\r\n        const convertTypeOptions = Object.keys(convertValueOptions);\r\n\r\n        me.converters.set(`Unit converter`, {\r\n            arguments: [\r\n                { type: `option`, defaultValue: convertTypeOptions[0], options: convertTypeOptions },\r\n                { type: `typedOption`, defaultValue: convertValueOptions[convertTypeOptions[0]][0], options: convertValueOptions },\r\n                { type: `typedOption`, defaultValue: convertValueOptions[convertTypeOptions[0]][0], options: convertValueOptions }\r\n            ],\r\n            exec: (a1, a2, a3, value) => ConverterManager._execUnitConvert(a1, a2, a3, value)\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Returns converters Map\r\n     * @returns {Map}\r\n     */\r\n    getConvertersMap() {\r\n        const me = this;\r\n\r\n        return me.converters;\r\n    }\r\n\r\n    /**\r\n     * Returns list on converters\r\n     * @returns {Array}\r\n     */\r\n    getConvertersList() {\r\n        const me = this;\r\n        const result = [];\r\n\r\n        me.converters.forEach((value, key) => {\r\n            result.push(Object.assign({ name: key }, value));\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get list of converter names\r\n     * @returns {Array}\r\n     */\r\n    getConvertersNameList() {\r\n        const me = this;\r\n\r\n        return Array.from(me.converters.keys());\r\n    }\r\n\r\n    /**\r\n     * Return converter config object by converter name\r\n     * @param converterName\r\n     * @returns {Object}\r\n     */\r\n    getConverterObject(converterName) {\r\n        const me = this;\r\n\r\n        return me.converters.get(converterName);\r\n    }\r\n\r\n    /**\r\n     * Returns default values of converter as object\r\n     * @param converterName\r\n     * @returns {Object}\r\n     */\r\n    getConverterDefaultValuesObject(converterName) {\r\n        const me = this;\r\n\r\n        return me.getConverterObject(converterName).arguments.reduce((obj, argument, index) => {\r\n            obj[index] = argument.defaultValue;\r\n            return obj;\r\n        }, {});\r\n    }\r\n\r\n    /**\r\n     * Returns converter options\r\n     * @returns {Object}\r\n     */\r\n    static getUnitConvertOptions () {\r\n        return {\r\n            temperature: [ 'C', 'F', 'K' ],\r\n            length: [ 'm', 'mi', 'yd', 'ft', 'in' ],\r\n            weight: [ 'kg', 'lb', 'oz' ],\r\n            volume: [ 'l', 'gal', 'pt' ]\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert value\r\n     * @param converterName\r\n     * @param value\r\n     * @param args\r\n     * @returns {value}\r\n     */\r\n    convert(converterName, value, args) {\r\n        const me = this;\r\n        let result = value;\r\n\r\n        if (me.converters.has(converterName)) {\r\n            const converter = me.converters.get(converterName);\r\n            const exec = converter.arguments.reduce((execFunc, argument, index) =>\r\n                execFunc.bind(null, ConverterManager._castArgument(args[index], argument)), converter.exec);\r\n\r\n            result = exec(result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Casting arguments to appropriate type\r\n     * @param value\r\n     * @param argument\r\n     * @private\r\n     */\r\n    static _castArgument(value, argument) {\r\n        let result = argument.defaultValue;\r\n\r\n        switch(argument.type) {\r\n            case `number`:\r\n                const castedValue = Number(value);\r\n                result = lodash.isNumber(castedValue) && !lodash.isNaN(castedValue) ? castedValue : result;\r\n                break;\r\n            case `option`:\r\n            case `typedOption`:\r\n                result = value;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Execute unit convert\r\n     * @param type\r\n     * @param from\r\n     * @param to\r\n     * @param value\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    static _execUnitConvert (type, from, to, value) {\r\n        let result = value;\r\n\r\n        from = from.toUpperCase();\r\n        to = to.toUpperCase();\r\n\r\n        switch (type) {\r\n            case 'temperature':\r\n                result = ConverterManager._convertTemperature(from, to, value);\r\n                break;\r\n            case 'length':\r\n                result = ConverterManager._convertLength(from, to, value);\r\n                break;\r\n            case 'weight':\r\n                result = ConverterManager._convertWeight(from, to, value);\r\n                break;\r\n            case 'volume':\r\n                result = ConverterManager._convertVolume(from, to, value);\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Convert temperature\r\n     * @param from\r\n     * @param to\r\n     * @param value\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    static _convertTemperature (from, to, value) {\r\n        let result = value;\r\n\r\n        switch (from + to) {\r\n            case 'CF':\r\n                result = (value * 9 / 5) + 32;\r\n                break;\r\n            case 'CK':\r\n                result = value + 273.15;\r\n                break;\r\n            case 'FC':\r\n                result = (value - 32) * 5 / 9;\r\n                break;\r\n            case 'FK':\r\n                result = (value + 459.67) * 5 / 9;\r\n                break;\r\n            case 'KC':\r\n                result = value - 273.15;\r\n                break;\r\n            case 'KF':\r\n                result = (value * 9 / 5) - 459.67;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Convert Length\r\n     * @param from\r\n     * @param to\r\n     * @param value\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    static _convertLength (from, to, value) {\r\n        let result = value;\r\n\r\n        switch (from + to) {\r\n            case 'MMI':\r\n                result = value * 0.00062137;\r\n                break;\r\n            case 'MYD':\r\n                result = value * 1.0936;\r\n                break;\r\n            case 'MFT':\r\n                result = value / 0.3048;\r\n                break;\r\n            case 'MIN':\r\n                result = value / 0.0254;\r\n                break;\r\n            case 'MIM':\r\n                result = value / 0.00062137;\r\n                break;\r\n            case 'MIYD':\r\n                result = value * 1760.0;\r\n                break;\r\n            case 'MIFT':\r\n                result = value * 5280.0;\r\n                break;\r\n            case 'MIIN':\r\n                result = value * 63360;\r\n                break;\r\n            case 'YDM':\r\n                result = value / 1.0936;\r\n                break;\r\n            case 'YDMI':\r\n                result = value * 0.00056818;\r\n                break;\r\n            case 'YDFT':\r\n                result = value * 3.0000;\r\n                break;\r\n            case 'YDIN':\r\n                result = value * 36.000;\r\n                break;\r\n            case 'FTM':\r\n                result = value / 3.2808399;\r\n                break;\r\n            case 'FTMI':\r\n                result = value * 0.00018939;\r\n                break;\r\n            case 'FTYD':\r\n                result = value * 0.33333;\r\n                break;\r\n            case 'FTIN':\r\n                result = value * 12;\r\n                break;\r\n            case 'INM':\r\n                result = value * 0.0254;\r\n                break;\r\n            case 'INMI':\r\n                result = value / 63.360;\r\n                break;\r\n            case 'INYD':\r\n                result = value * 0.027778;\r\n                break;\r\n            case 'INFT':\r\n                result = value / 12;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Convert Weight\r\n     * @param from\r\n     * @param to\r\n     * @param value\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    static _convertWeight (from, to, value) {\r\n        let result = value;\r\n\r\n        switch (from + to) {\r\n            case 'KGLB':\r\n                result = value / 0.45359237;\r\n                break;\r\n            case 'KGOZ':\r\n                result = value / 0.02834952;\r\n                break;\r\n            case 'LBKG':\r\n                result = value * 0.45359237;\r\n                break;\r\n            case 'LBOZ':\r\n                result = value * 16;\r\n                break;\r\n            case 'OZKG':\r\n                result = value * 0.02834952;\r\n                break;\r\n            case 'OZLB':\r\n                result = value / 16;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Convert Volume\r\n     * @param from\r\n     * @param to\r\n     * @param value\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    static _convertVolume (from, to, value) {\r\n        let result = value;\r\n\r\n        switch (from + to) {\r\n            case 'LGAL':\r\n                result = value * 0.26417;\r\n                break;\r\n            case 'LPT':\r\n                result = value / 2.113376;\r\n                break;\r\n            case 'GALL':\r\n                result = value / 0.26417;\r\n                break;\r\n            case 'GALPT':\r\n                result = value * 8;\r\n                break;\r\n            case 'PTL':\r\n                result = value / 1.7598;\r\n                break;\r\n            case 'PTGAL':\r\n                result = value / 8;\r\n                break;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\nexport default ConverterManager;"]}