{"version":3,"sources":["../../src/datasource/datasource.js"],"names":[],"mappings":"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","file":"datasource.js","sourcesContent":["import TableModel from 'app/core/table_model';\nimport moment from 'moment';\n\nexport class BosunDatasource {\n    constructor(instanceSettings, $q, backendSrv, templateSrv, $sce, $rootScope) {\n        this.annotateUrl = instanceSettings.jsonData.annotateUrl;\n        this.type = instanceSettings.type;\n        this.url = instanceSettings.url;\n        this.name = instanceSettings.name;\n        this.showHelper = instanceSettings.jsonData.enableQueryHelper;\n        this.preRelease = instanceSettings.jsonData.enablePreReleaseFeatures;\n        this.q = $q;\n        this.backendSrv = backendSrv;\n        this.templateSrv = templateSrv;\n        this.sce = $sce;\n        this.$rootScope = $rootScope;\n        this.IncidentListQuery = this.IncidentListQuery.bind(this);\n    }\n\n    makeTable(result) {\n        var table = new TableModel();\n        if (!result || Object.keys(result).length < 1) {\n            return [table];\n        }\n        var tagKeys = [];\n        _.each(result[0].Group, function (v, tagKey) {\n            tagKeys.push(tagKey);\n        });\n        tagKeys.sort();\n        table.columns = _.map(tagKeys, function (tagKey) {\n            return { \"text\": tagKey };\n        });\n        table.columns.push({ \"text\": \"value\" });\n        _.each(result, function (res) {\n            var row = [];\n            _.each(res.Group, function (tagValue, tagKey) {\n                row[tagKeys.indexOf(tagKey)] = tagValue;\n            });\n            row.push(res.Value);\n            table.rows.push(row);\n        });\n        return [table];\n    }\n\n    transformMetricData(result, target, options) {\n        var tagData = [];\n        _.each(result.Group, function (v, k) {\n            tagData.push({ 'value': v, 'key': k });\n        });\n        var sortedTags = _.sortBy(tagData, 'key');\n        var metricLabel = \"\";\n        if (target.alias) {\n            var scopedVars = _.clone(options.scopedVars || {});\n            _.each(sortedTags, function (value) {\n                scopedVars['tag_' + value.key] = { \"value\": value.value };\n            });\n            metricLabel = this.templateSrv.replace(target.alias, scopedVars);\n        } else {\n            tagData = [];\n            _.each(sortedTags, function (tag) {\n                tagData.push(tag.key + '=' + tag.value);\n            });\n            metricLabel = '{' + tagData.join(', ') + '}';\n        }\n        var dps = [];\n        _.each(result.Value, function (v, k) {\n            dps.push([v, parseInt(k) * 1000]);\n        });\n        return { target: metricLabel, datapoints: dps };\n    }\n\n    performTimeSeriesQuery(query, target, options) {\n        var exprDate = options.range.to.utc().format('YYYY-MM-DD');\n        var exprTime = options.range.to.utc().format('HH:mm:ss');\n        var url = this.url + '/api/expr?date=' + encodeURIComponent(exprDate) + '&time=' + encodeURIComponent(exprTime);\n        return this.backendSrv.datasourceRequest({\n            url: url,\n            method: 'POST',\n            data: query,\n            datasource: this\n        }).then(response => {\n            if (response.status === 200) {\n                var result;\n                if (response.data.Type === 'series') {\n                    result = _.map(response.data.Results, function (result) {\n                        return response.config.datasource.transformMetricData(result, target, options);\n                    });\n                }\n                if (response.data.Type === 'number') {\n                    result = response.config.datasource.makeTable(response.data.Results);\n                }\n                if (response.data.Type === 'table') {\n                    var table = new TableModel();\n                    table.columns = _.map(response.data.Results[0].Value.Columns, function (column) {\n                        return { \"text\": column };\n                    });\n                    table.rows = response.data.Results[0].Value.Rows;\n                    result = [table];\n                }\n                return { data: result };\n            }\n        });\n    }\n\n    _metricsStartWith(metricRoot) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/api/metric\",\n            method: 'GET',\n            datasource: this\n        }).then((data) => {\n            var filtered = _.filter(data.data, (v) => {\n                return v.startsWith(metricRoot);\n            });\n            return filtered;\n        });\n    }\n\n    _tagKeysForMetric(metric) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/api/tagk/\" + metric,\n            method: 'GET',\n            datasource: this\n        }).then((data) => {\n            return data.data;\n        });\n    }\n\n    _tagValuesForMetricAndTagKey(metric, key) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/api/tagv/\" + key + \"/\" + metric,\n            method: 'GET',\n            datasource: this\n        }).then((data) => {\n            return data.data;\n        });\n    }\n\n    _metricMetadata(metric) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + \"/api/metadata/metrics?metric=\" + metric,\n            method: 'GET',\n            datasource: this\n        }).then((data) => {\n            return data.data;\n        });\n    }\n\n    metricFindQuery(query) {\n        var findTransform = function (result) {\n            return _.map(result, function (value) {\n                return { text: value };\n            });\n        };\n        // Get Metrics that start with the first argument\n        var metricsRegex = /metrics\\((.*)\\)/;\n        // Get tag keys for the given metric (first argument)\n        var tagKeysRegex = /tagkeys\\((.*)\\)/;\n        // Get tag values for the given metric (first argument) and tag key (second argument)\n        var tagValuesRegex = /tagvalues\\((.*),(.*)\\)/;\n\n        var metricsQuery = query.match(metricsRegex)\n        if (metricsQuery) {\n            return this._metricsStartWith(metricsQuery[1]).then(findTransform);\n        }\n\n        var tagKeysQuery = query.match(tagKeysRegex)\n        if (tagKeysQuery) {\n            return this._tagKeysForMetric(tagKeysQuery[1]).then(findTransform);\n        }\n\n        var tagValuesQuery = query.match(tagValuesRegex)\n        if (tagValuesQuery) {\n            return this._tagValuesForMetricAndTagKey(tagValuesQuery[1].trim(), tagValuesQuery[2].trim()).then(findTransform);\n        }\n\n        return this.q.when([]);\n    }\n\n    query(options) {\n        var queries = [];\n        // Get time values to replace $start\n        // The end time is what bosun regards as 'now'\n        var secondsAgo = options.range.to.diff(options.range.from.utc(), 'seconds');\n        secondsAgo += 's';\n        _.each(options.targets, _.bind(function (target) {\n            if (!target.expr || target.hide) {\n                return;\n            }\n            var query = {};\n\n            query = this.templateSrv.replace(target.expr, options.scopedVars, 'pipe');\n            query = query.replace(/\\$start/g, secondsAgo);\n            query = query.replace(/\\$ds/g, options.interval);\n            queries.push(query);\n        }, this));\n\n        // No valid targets, return the empty result to save a round trip.\n        if (_.isEmpty(queries)) {\n            var d = this.q.defer();\n            d.resolve({ data: [] });\n            return d.promise;\n        }\n\n        var allQueryPromise = _.map(queries, _.bind(function (query, index) {\n            return this.performTimeSeriesQuery(query, options.targets[index], options);\n        }, this));\n\n        return this.q.all(allQueryPromise)\n            .then(function (allResponse) {\n                var result = [];\n                _.each(allResponse, function (response) {\n                    _.each(response.data, function (d) {\n                        result.push(d);\n                    });\n                });\n                return { data: result };\n            });\n    }\n\n    _processAnnotationQueryParam(annotation, fieldName, fieldObject, params) {\n        var param = {};\n        var key = fieldName;\n        if (!fieldObject) {\n            return params;\n        }\n        if (fieldObject.empty) {\n            key += \":Empty\"\n        }\n        if (fieldObject.not) {\n            if (!fieldObject.empty) {\n                key += \":\"\n            }\n            key += \":Empty\"\n        }\n        params[key] = this.templateSrv.replace(fieldObject.value, this.templateSrv.variables, 'pipe');\n        return params\n    }\n\n\n    annotationQuery(options) {\n        // http://stackoverflow.com/questions/2998784/how-to-output-integers-with-leading-zeros-in-javascript\n        var pad = (num, size) => {\n            var s = num + \"\";\n            while (s.length < size) s = \"0\" + s;\n            return s;\n        }\n        var annotation = options.annotation;\n        var params = {};\n        params.StartDate = options.range.from.unix();\n        params.EndDate = options.range.to.unix();\n        var annotateUrl = this.annotateUrl;\n        params = this._processAnnotationQueryParam(annotation, \"Source\", annotation.Source, params)\n        params = this._processAnnotationQueryParam(annotation, \"Host\", annotation.Host, params)\n        params = this._processAnnotationQueryParam(annotation, \"CreationUser\", annotation.CreationUser, params)\n        params = this._processAnnotationQueryParam(annotation, \"Owner\", annotation.Owner, params)\n        params = this._processAnnotationQueryParam(annotation, \"Category\", annotation.Category, params)\n        params = this._processAnnotationQueryParam(annotation, \"Url\", annotation.Url, params)\n        var url = this.url + '/api/annotation/query?';\n        if (Object.keys(params).length > 0) {\n            url += jQuery.param(params);\n        }\n        var rawUrl = this.rawUrl;\n        return this.backendSrv.datasourceRequest({\n            url: url,\n            method: 'GET',\n            datasource: this\n        }).then(response => {\n            if (response.status === 200) {\n                var events = [];\n                _.each(response.data, (a) => {\n                    var text = [];\n                    var duration = moment.duration(moment(a.EndDate).diff(a.StartDate));\n                    var hours = duration.hours();\n                    var minutes = duration.minutes();\n                    var seconds = duration.seconds();\n                    text.push(\"Duration: \" + pad(hours, 3) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2));\n                    if (a.Source) {\n                        text.push(\"Source: \" + a.Source);\n                    }\n                    if (a.Host) {\n                        text.push(\"Host: \" + a.Host);\n                    }\n                    if (a.CreationUser) {\n                        text.push(\"User: \" + a.CreationUser);\n                    }\n                    if (a.Owner) {\n                        text.push(\"Owner: \" + a.Owner);\n                    }\n                    if (a.Category) {\n                        text.push(\"Category: \" + a.Category);\n                    }\n                    if (a.Url) {\n                        text.push('<a href=\"' + a.Url + '\">' + a.Url.substring(0, 40) + '</a>');\n                    }\n                    if (a.Message) {\n                        text.push(a.Message);\n                    }\n                    text.push('<a target=\"_blank\" href=\"' + annotateUrl + '/annotation?id=' + encodeURIComponent(a.Id) + '\">Edit in Bosun UI</a>')\n                    var grafanaAnnotation = {\n                        annotation: annotation,\n                        time: moment(a.StartDate).utc().unix() * 1000,\n                        title: a.Category,\n                        text: text.join(\"<br>\")\n                    }\n                    events.push(grafanaAnnotation);\n                });\n                return events;\n            }\n        });\n    }\n\n    // Since the API response is not JSON, we need a transform interceptor to \n    // handle a text response. Otherwise we just get i.e. 'Internal Server Error'\n    _plainTextResponseTransform(data, headers) {\n        if (headers(\"content-type\").includes(\"text/plain\")) {\n            return { message: data };\n        }\n        return angular.fromJson(data);\n    }\n\n    IncidentListQuery(query) {\n        var self = this;\n        var url = this.url + '/api/incidents/open';\n        if (query) {\n            var interpolatedQuery = this.templateSrv.replace(query, this.templateSrv.variables, 'pipe');\n            url += '?filter=' + encodeURIComponent(interpolatedQuery)\n        }\n        return this.backendSrv.datasourceRequest({\n            url: url,\n            method: 'GET',\n            transformResponse: this._plainTextResponseTransform\n        }).then(response => {\n            if (response.status === 200) {\n                return response.data;\n            }\n        }, (error) => {\n            self.$rootScope.appEvent('alert-error', ['IncidentListQuery Error', error.data.message]);\n        })\n    }\n\n    AlertBodyHTML(alertKey) {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/status?ak=' + encodeURIComponent(alertKey),\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return this.sce.trustAsHtml(response.data[alertKey].Body);\n            }\n        })\n    }\n\n    submitAction(actionObj) {\n        var self = this;\n\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/api/action',\n            method: 'POST',\n            data: actionObj,\n            datasource: this,\n            transformResponse: this._plainTextResponseTransform\n        }).then((data) => {\n            self.$rootScope.appEvent('alert-success', ['Incident Action Succeeded', ''])\n        }, (error) => {\n            self.$rootScope.appEvent('alert-error', ['Incident Action Error', error.data.message]);\n        })\n    }\n\n    // Required\n    // Used for testing datasource in datasource configuration pange\n    testDatasource() {\n        return this.backendSrv.datasourceRequest({\n            url: this.url + '/',\n            method: 'GET'\n        }).then(response => {\n            if (response.status === 200) {\n                return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n            }\n        });\n    }\n}\n\n"]}