{"version":3,"sources":["../../src/graphite_src/lexer.js"],"names":[],"mappings":"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","file":"lexer.js","sourcesContent":["import _ from 'lodash';\n\n// This is auto generated from the unicode tables.\n// The tables are at:\n// http://www.fileformat.info/info/unicode/category/Lu/list.htm\n// http://www.fileformat.info/info/unicode/category/Ll/list.htm\n// http://www.fileformat.info/info/unicode/category/Lt/list.htm\n// http://www.fileformat.info/info/unicode/category/Lm/list.htm\n// http://www.fileformat.info/info/unicode/category/Lo/list.htm\n// http://www.fileformat.info/info/unicode/category/Nl/list.htm\n\nvar unicodeLetterTable = [\n    170, 170, 181, 181, 186, 186, 192, 214,\n    216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750,\n    880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908,\n    910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366,\n    1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610,\n    1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775,\n    1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957,\n    1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069,\n    2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2308, 2361,\n    2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431,\n    2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482,\n    2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n    2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608,\n    2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654,\n    2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736,\n    2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785,\n    2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867,\n    2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929,\n    2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970,\n    2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001,\n    3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123,\n    3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212,\n    3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261,\n    3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344,\n    3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n    3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526,\n    3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716,\n    3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743,\n    3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760,\n    3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805,\n    3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138,\n    4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198,\n    4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4304, 4346,\n    4348, 4348, 4352, 4680, 4682, 4685, 4688, 4694, 4696, 4696,\n    4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789,\n    4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880,\n    4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740,\n    5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900,\n    5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000,\n    6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312,\n    6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516,\n    6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823,\n    6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7104, 7141,\n    7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409,\n    7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013,\n    8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061,\n    8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140,\n    8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n    8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455,\n    8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486,\n    8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521,\n    8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358,\n    11360, 11492, 11499, 11502, 11520, 11557, 11568, 11621,\n    11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694,\n    11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726,\n    11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295,\n    12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438,\n    12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589,\n    12593, 12686, 12704, 12730, 12784, 12799, 13312, 13312,\n    19893, 19893, 19968, 19968, 40907, 40907, 40960, 42124,\n    42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539,\n    42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783,\n    42786, 42888, 42891, 42894, 42896, 42897, 42912, 42921,\n    43002, 43009, 43011, 43013, 43015, 43018, 43020, 43042,\n    43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n    43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442,\n    43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595,\n    43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697,\n    43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714,\n    43739, 43741, 43777, 43782, 43785, 43790, 43793, 43798,\n    43808, 43814, 43816, 43822, 43968, 44002, 44032, 44032,\n    55203, 55203, 55216, 55238, 55243, 55291, 63744, 64045,\n    64048, 64109, 64112, 64217, 64256, 64262, 64275, 64279,\n    64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316,\n    64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433,\n    64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n    65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370,\n    65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495,\n    65498, 65500, 65536, 65547, 65549, 65574, 65576, 65594,\n    65596, 65597, 65599, 65613, 65616, 65629, 65664, 65786,\n    65856, 65908, 66176, 66204, 66208, 66256, 66304, 66334,\n    66352, 66378, 66432, 66461, 66464, 66499, 66504, 66511,\n    66513, 66517, 66560, 66717, 67584, 67589, 67592, 67592,\n    67594, 67637, 67639, 67640, 67644, 67644, 67647, 67669,\n    67840, 67861, 67872, 67897, 68096, 68096, 68112, 68115,\n    68117, 68119, 68121, 68147, 68192, 68220, 68352, 68405,\n    68416, 68437, 68448, 68466, 68608, 68680, 69635, 69687,\n    69763, 69807, 73728, 74606, 74752, 74850, 77824, 78894,\n    92160, 92728, 110592, 110593, 119808, 119892, 119894, 119964,\n    119966, 119967, 119970, 119970, 119973, 119974, 119977, 119980,\n    119982, 119993, 119995, 119995, 119997, 120003, 120005, 120069,\n    120071, 120074, 120077, 120084, 120086, 120092, 120094, 120121,\n    120123, 120126, 120128, 120132, 120134, 120134, 120138, 120144,\n    120146, 120485, 120488, 120512, 120514, 120538, 120540, 120570,\n    120572, 120596, 120598, 120628, 120630, 120654, 120656, 120686,\n    120688, 120712, 120714, 120744, 120746, 120770, 120772, 120779,\n    131072, 131072, 173782, 173782, 173824, 173824, 177972, 177972,\n    177984, 177984, 178205, 178205, 194560, 195101\n];\n\nvar identifierStartTable = [];\n\nfor (var i = 0; i < 128; i++) {\n    identifierStartTable[i] =\n        i >= 48 && i <= 57 || // 0-9\n        i === 36 ||           // $\n        i === 126 ||          // ~\n        i === 124 ||          // |\n        i >= 65 && i <= 90 || // A-Z\n        i === 95 ||           // _\n        i === 45 ||           // -\n        i === 42 ||           // *\n        i === 58 ||           // :\n        i === 91 ||           // templateStart [\n        i === 93 ||           // templateEnd ]\n        i === 63 ||           // ?\n        i === 37 ||           // %\n        i === 35 ||           // #\n        i === 61 ||           // =\n        i >= 97 && i <= 122;  // a-z\n}\n\nvar identifierPartTable = [];\n\nfor (var i2 = 0; i2 < 128; i2++) {\n    identifierPartTable[i2] =\n        identifierStartTable[i2] || // $, _, A-Z, a-z\n        i2 >= 48 && i2 <= 57;        // 0-9\n}\n\nexport class Lexer {\n    constructor(expression)\n    {\n        this.input = expression;\n        this.char = 1;\n        this.from = 1;\n    }\n\n    peek(i) {\n        return this.input.charAt(i || 0);\n    }\n\n    skip(i) {\n        i = i || 1;\n        this.char += i;\n        this.input = this.input.slice(i);\n    }\n\n    tokenize() {\n        var list = [];\n        var token;\n        while (token = this.next()) {\n            list.push(token);\n        }\n        return list;\n    }\n\n    next() {\n        this.from = this.char;\n\n        // Move to the next non-space character.\n        var start;\n        if (/\\s/.test(this.peek())) {\n            start = this.char;\n\n            while (/\\s/.test(this.peek())) {\n                this.from += 1;\n                this.skip();\n            }\n\n            if (this.peek() === \"\") { // EOL\n                return null;\n            }\n        }\n\n        var match = this.scanStringLiteral();\n        if (match) {\n            return match;\n        }\n\n        match =\n            this.scanPunctuator() ||\n            this.scanNumericLiteral() ||\n            this.scanIdentifier() ||\n            this.scanTemplateSequence();\n\n        if (match) {\n            this.skip(match.value.length);\n            return match;\n        }\n\n        // No token could be matched, give up.\n        return null;\n    }\n\n    scanTemplateSequence() {\n        if (this.peek() === '[' && this.peek(1) === '[') {\n            return {\n                type: 'templateStart',\n                value: '[[',\n                pos: this.char\n            };\n        }\n\n        if (this.peek() === ']' && this.peek(1) === ']') {\n            return {\n                type: 'templateEnd',\n                value: '[[',\n                pos: this.char\n            };\n        }\n\n        return null;\n    }\n\n    /*\n     * Extract a JavaScript identifier out of the next sequence of\n     * characters or return 'null' if its not possible. In addition,\n     * to Identifier this method can also produce BooleanLiteral\n     * (true/false) and NullLiteral (null).\n     */\n    scanIdentifier() {\n        var id = \"\";\n        var index = 0;\n        var type, char;\n\n        // Detects any character in the Unicode categories \"Uppercase\n        // letter (Lu)\", \"Lowercase letter (Ll)\", \"Titlecase letter\n        // (Lt)\", \"Modifier letter (Lm)\", \"Other letter (Lo)\", or\n        // \"Letter number (Nl)\".\n        //\n        // Both approach and unicodeLetterTable were borrowed from\n        // Google's Traceur.\n\n        function isUnicodeLetter(code) {\n            for (var i = 0; i < unicodeLetterTable.length;) {\n                if (code < unicodeLetterTable[i++]) {\n                    return false;\n                }\n\n                if (code <= unicodeLetterTable[i++]) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function isHexDigit(str) {\n            return (/^[0-9a-fA-F]$/).test(str);\n        }\n\n        var readUnicodeEscapeSequence = _.bind(function () {\n            /*jshint validthis:true */\n            index += 1;\n\n            if (this.peek(index) !== \"u\") {\n                return null;\n            }\n\n            var ch1 = this.peek(index + 1);\n            var ch2 = this.peek(index + 2);\n            var ch3 = this.peek(index + 3);\n            var ch4 = this.peek(index + 4);\n            var code;\n\n            if (isHexDigit(ch1) && isHexDigit(ch2) && isHexDigit(ch3) && isHexDigit(ch4)) {\n                code = parseInt(ch1 + ch2 + ch3 + ch4, 16);\n\n                if (isUnicodeLetter(code)) {\n                    index += 5;\n                    return \"\\\\u\" + ch1 + ch2 + ch3 + ch4;\n                }\n\n                return null;\n            }\n\n            return null;\n        }, this);\n\n        var getIdentifierStart = _.bind(function () {\n            /*jshint validthis:true */\n            var chr = this.peek(index);\n            var code = chr.charCodeAt(0);\n\n            if (chr === '*') {\n                index += 1;\n                return chr;\n            }\n\n            if (code === 92) {\n                return readUnicodeEscapeSequence();\n            }\n\n            if (code < 128) {\n                if (identifierStartTable[code]) {\n                    index += 1;\n                    return chr;\n                }\n\n                return null;\n            }\n\n            if (isUnicodeLetter(code)) {\n                index += 1;\n                return chr;\n            }\n\n            return null;\n        }, this);\n\n        var getIdentifierPart = _.bind(function () {\n            /*jshint validthis:true */\n            var chr = this.peek(index);\n            var code = chr.charCodeAt(0);\n\n            if (code === 92) {\n                return readUnicodeEscapeSequence();\n            }\n\n            if (code < 128) {\n                if (identifierPartTable[code]) {\n                    index += 1;\n                    return chr;\n                }\n\n                return null;\n            }\n\n            if (isUnicodeLetter(code)) {\n                index += 1;\n                return chr;\n            }\n\n            return null;\n        }, this);\n\n        char = getIdentifierStart();\n        if (char === null) {\n            return null;\n        }\n\n        id = char;\n        for (;;) {\n            char = getIdentifierPart();\n\n            if (char === null) {\n                break;\n            }\n\n            id += char;\n        }\n\n        switch (id) {\n            case 'true': {\n                type = 'bool';\n                break;\n            }\n            case 'false': {\n                type = 'bool';\n                break;\n            }\n            default:\n                type = \"identifier\";\n        }\n\n        return {\n            type: type,\n            value: id,\n            pos: this.char\n        };\n\n    }\n\n    /*\n     * Extract a numeric literal out of the next sequence of\n     * characters or return 'null' if its not possible. This method\n     * supports all numeric literals described in section 7.8.3\n     * of the EcmaScript 5 specification.\n     *\n     * This method's implementation was heavily influenced by the\n     * scanNumericLiteral function in the Esprima parser's source code.\n     */\n    scanNumericLiteral() {\n        var index = 0;\n        var value = \"\";\n        var length = this.input.length;\n        var char = this.peek(index);\n        var bad;\n\n        function isDecimalDigit(str) {\n            return (/^[0-9]$/).test(str);\n        }\n\n        function isOctalDigit(str) {\n            return (/^[0-7]$/).test(str);\n        }\n\n        function isHexDigit(str) {\n            return (/^[0-9a-fA-F]$/).test(str);\n        }\n\n        function isIdentifierStart(ch) {\n            return (ch === \"$\") || (ch === \"_\") || (ch === \"\\\\\") ||\n                (ch >= \"a\" && ch <= \"z\") || (ch >= \"A\" && ch <= \"Z\");\n        }\n\n        // handle negative num literals\n        if (char === '-') {\n            value += char;\n            index += 1;\n            char = this.peek(index);\n        }\n\n        // Numbers must start either with a decimal digit or a point.\n        if (char !== \".\" && !isDecimalDigit(char)) {\n            return null;\n        }\n\n        if (char !== \".\") {\n            value += this.peek(index);\n            index += 1;\n            char = this.peek(index);\n\n            if (value === \"0\") {\n                // Base-16 numbers.\n                if (char === \"x\" || char === \"X\") {\n                    index += 1;\n                    value += char;\n\n                    while (index < length) {\n                        char = this.peek(index);\n                        if (!isHexDigit(char)) {\n                            break;\n                        }\n                        value += char;\n                        index += 1;\n                    }\n\n                    if (value.length <= 2) { // 0x\n                        return {\n                            type: 'number',\n                            value: value,\n                            isMalformed: true,\n                            pos: this.char\n                        };\n                    }\n\n                    if (index < length) {\n                        char = this.peek(index);\n                        if (isIdentifierStart(char)) {\n                            return null;\n                        }\n                    }\n\n                    return {\n                        type: 'number',\n                        value: value,\n                        base: 16,\n                        isMalformed: false,\n                        pos: this.char\n                    };\n                }\n\n                // Base-8 numbers.\n                if (isOctalDigit(char)) {\n                    index += 1;\n                    value += char;\n                    bad = false;\n\n                    while (index < length) {\n                        char = this.peek(index);\n\n                        // Numbers like '019' (note the 9) are not valid octals\n                        // but we still parse them and mark as malformed.\n\n                        if (isDecimalDigit(char)) {\n                            bad = true;\n                        } else if (!isOctalDigit(char)) {\n                            break;\n                        }\n                        value += char;\n                        index += 1;\n                    }\n\n                    if (index < length) {\n                        char = this.peek(index);\n                        if (isIdentifierStart(char)) {\n                            return null;\n                        }\n                    }\n\n                    return {\n                        type: 'number',\n                        value: value,\n                        base: 8,\n                        isMalformed: false\n                    };\n                }\n\n                // Decimal numbers that start with '0' such as '09' are illegal\n                // but we still parse them and return as malformed.\n\n                if (isDecimalDigit(char)) {\n                    index += 1;\n                    value += char;\n                }\n            }\n\n            while (index < length) {\n                char = this.peek(index);\n                if (!isDecimalDigit(char)) {\n                    break;\n                }\n                value += char;\n                index += 1;\n            }\n        }\n\n        // Decimal digits.\n\n        if (char === \".\") {\n            value += char;\n            index += 1;\n\n            while (index < length) {\n                char = this.peek(index);\n                if (!isDecimalDigit(char)) {\n                    break;\n                }\n                value += char;\n                index += 1;\n            }\n        }\n\n        // Exponent part.\n\n        if (char === \"e\" || char === \"E\") {\n            value += char;\n            index += 1;\n            char = this.peek(index);\n\n            if (char === \"+\" || char === \"-\") {\n                value += this.peek(index);\n                index += 1;\n            }\n\n            char = this.peek(index);\n            if (isDecimalDigit(char)) {\n                value += char;\n                index += 1;\n\n                while (index < length) {\n                    char = this.peek(index);\n                    if (!isDecimalDigit(char)) {\n                        break;\n                    }\n                    value += char;\n                    index += 1;\n                }\n            } else {\n                return null;\n            }\n        }\n\n        if (index < length) {\n            char = this.peek(index);\n            if (!this.isPunctuator(char)) {\n                return null;\n            }\n        }\n\n        return {\n            type: 'number',\n            value: value,\n            base: 10,\n            pos: this.char,\n            isMalformed: !isFinite(+value)\n        };\n    }\n\n    isPunctuator(ch1) {\n        switch (ch1) {\n            case \".\":\n            case \"(\":\n            case \")\":\n            case \",\":\n            case \"{\":\n            case \"}\":\n                return true;\n        }\n\n        return false;\n    }\n\n    scanPunctuator() {\n        var ch1 = this.peek();\n\n        if (this.isPunctuator(ch1)) {\n            return {\n                type: ch1,\n                value: ch1,\n                pos: this.char\n            };\n        }\n\n        return null;\n    }\n\n    /*\n     * Extract a string out of the next sequence of characters and/or\n     * lines or return 'null' if its not possible. Since strings can\n     * span across multiple lines this method has to move the char\n     * pointer.\n     *\n     * This method recognizes pseudo-multiline JavaScript strings:\n     *\n     *   var str = \"hello\\\n     *   world\";\n     */\n    scanStringLiteral() {\n        /*jshint loopfunc:true */\n        var quote = this.peek();\n\n        // String must start with a quote.\n        if (quote !== \"\\\"\" && quote !== \"'\") {\n            return null;\n        }\n\n        var value = \"\";\n\n        this.skip();\n\n        while (this.peek() !== quote) {\n            if (this.peek() === \"\") { // End Of Line\n                return {\n                    type: 'string',\n                    value: value,\n                    isUnclosed: true,\n                    quote: quote,\n                    pos: this.char\n                };\n            }\n\n            var char = this.peek();\n            var jump = 1; // A length of a jump, after we're done\n            // parsing this character.\n\n            value += char;\n            this.skip(jump);\n        }\n\n        this.skip();\n        return {\n            type: 'string',\n            value: value,\n            isUnclosed: false,\n            quote: quote,\n            pos: this.char\n        };\n    }\n}\n\n"]}