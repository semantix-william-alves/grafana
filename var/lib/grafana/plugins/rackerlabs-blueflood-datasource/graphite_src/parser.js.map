{"version":3,"sources":["../../src/graphite_src/parser.js"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["import {Lexer} from './lexer';\n\nexport class Parser {\n    constructor(expression){\n        this.expression = expression;\n        this.lexer = new Lexer(expression);\n        this.tokens = this.lexer.tokenize();\n        this.index = 0;\n    }\n\ngetAst() {\n    return this.start();\n}\n\nstart() {\n    try {\n        return this.functionCall() || this.metricExpression();\n    } catch (e) {\n        return {\n            type: 'error',\n            message: e.message,\n            pos: e.pos\n        };\n    }\n}\n\ncurlyBraceSegment() {\n    if (this.match('identifier', '{') || this.match('{')) {\n\n        var curlySegment = \"\";\n\n        while (!this.match('') && !this.match('}')) {\n            curlySegment += this.consumeToken().value;\n        }\n\n        if (!this.match('}')) {\n            this.errorMark(\"Expected closing '}'\");\n        }\n\n        curlySegment += this.consumeToken().value;\n\n        // if curly segment is directly followed by identifier\n        // include it in the segment\n        if (this.match('identifier')) {\n            curlySegment += this.consumeToken().value;\n        }\n\n        return {\n            type: 'segment',\n            value: curlySegment\n        };\n    } else {\n        return null;\n    }\n}\n\nmetricSegment() {\n    var curly = this.curlyBraceSegment();\n    if (curly) {\n        return curly;\n    }\n\n    if (this.match('identifier') || this.match('number')) {\n        // hack to handle float numbers in metric segments\n        var parts = this.consumeToken().value.split('.');\n        if (parts.length === 2) {\n            this.tokens.splice(this.index, 0, { type: '.' });\n            this.tokens.splice(this.index + 1, 0, { type: 'number', value: parts[1] });\n        }\n\n        return {\n            type: 'segment',\n            value: parts[0]\n        };\n    }\n\n    if (!this.match('templateStart')) {\n        this.errorMark('Expected metric identifier');\n    }\n\n    this.consumeToken();\n\n    if (!this.match('identifier')) {\n        this.errorMark('Expected identifier after templateStart');\n    }\n\n    var node = {\n        type: 'template',\n        value: this.consumeToken().value\n    };\n\n    if (!this.match('templateEnd')) {\n        this.errorMark('Expected templateEnd');\n    }\n\n    this.consumeToken();\n    return node;\n}\n\nmetricExpression() {\n    if (!this.match('templateStart') &&\n        !this.match('identifier') &&\n        !this.match('number') &&\n        !this.match('{')) {\n        return null;\n    }\n\n    var node = {\n        type: 'metric',\n        segments: []\n    };\n\n    node.segments.push(this.metricSegment());\n\n    while (this.match('.')) {\n        this.consumeToken();\n\n        var segment = this.metricSegment();\n        if (!segment) {\n            this.errorMark('Expected metric identifier');\n        }\n\n        node.segments.push(segment);\n    }\n\n    return node;\n}\n\nfunctionCall() {\n    if (!this.match('identifier', '(')) {\n        return null;\n    }\n\n    var node = {\n        type: 'function',\n        name: this.consumeToken().value,\n    };\n\n    // consume left parenthesis\n    this.consumeToken();\n\n    node.params = this.functionParameters();\n\n    if (!this.match(')')) {\n        this.errorMark('Expected closing parenthesis');\n    }\n\n    this.consumeToken();\n\n    return node;\n}\n\nboolExpression() {\n    if (!this.match('bool')) {\n        return null;\n    }\n\n    return {\n        type: 'bool',\n        value: this.consumeToken().value === 'true',\n    };\n}\n\nfunctionParameters() {\n    if (this.match(')') || this.match('')) {\n        return [];\n    }\n\n    var param =\n        this.functionCall() ||\n        this.numericLiteral() ||\n        this.seriesRefExpression() ||\n        this.boolExpression() ||\n        this.metricExpression() ||\n        this.stringLiteral();\n\n    if (!this.match(',')) {\n        return [param];\n    }\n\n    this.consumeToken();\n    return [param].concat(this.functionParameters());\n}\n\nseriesRefExpression() {\n    if (!this.match('identifier')) {\n        return null;\n    }\n\n    var value = this.tokens[this.index].value;\n    if (!value.match(/\\#[A-Z]/)) {\n        return null;\n    }\n\n    var token = this.consumeToken();\n\n    return {\n        type: 'series-ref',\n        value: token.value\n    };\n}\n\nnumericLiteral() {\n    if (!this.match('number')) {\n        return null;\n    }\n\n    return {\n        type: 'number',\n        value: parseFloat(this.consumeToken().value)\n    };\n}\n\nstringLiteral() {\n    if (!this.match('string')) {\n        return null;\n    }\n\n    var token = this.consumeToken();\n    if (token.isUnclosed) {\n        throw { message: 'Unclosed string parameter', pos: token.pos };\n    }\n\n    return {\n        type: 'string',\n        value: token.value\n    };\n}\n\nerrorMark(text) {\n    var currentToken = this.tokens[this.index];\n    var type = currentToken ? currentToken.type : 'end of string';\n    throw {\n        message: text + \" instead found \" + type,\n        pos: currentToken ? currentToken.pos : this.lexer.char\n    };\n}\n\n// returns token value and incre\nconsumeToken() {\n    this.index++;\n    return this.tokens[this.index - 1];\n}\n\nmatchToken(type, index) {\n    var token = this.tokens[this.index + index];\n    return (token === undefined && type === '') ||\n        token && token.type === type;\n}\n\nmatch(token1, token2) {\n    return this.matchToken(token1, 0) &&\n        (!token2 || this.matchToken(token2, 1));\n}\n\n}"]}