{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","target","metric","source","UUIDs","Legends","Types","Aggrs","that","datasource","queryMetrics","then","metrics","forEach","m","legend","uuid","text","type","transformToSegments","querySources","sources","s","id","aggregate","rejected","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEQA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;4CAGKC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,YAA/B,EAA6C;AAAA;;AAAA,8JACrCF,MADqC,EAC7BC,SAD6B;;AAG3C,gBAAKE,KAAL,GAAaH,MAAb;AACA,gBAAKE,YAAL,GAAoBA,YAApB;AACA,gBAAKE,MAAL,CAAYC,MAAZ,GAAqB,MAAKD,MAAL,CAAYC,MAAZ,IAAsB,eAA3C;AACA,gBAAKD,MAAL,CAAYE,MAAZ,GAAqB,MAAKF,MAAL,CAAYE,MAAZ,IAAsB,eAA3C;AACA;AACA,gBAAKF,MAAL,CAAYG,KAAZ,GAAoB,MAAKH,MAAL,CAAYG,KAAZ,IAAqB,EAAzC;AACA,gBAAKH,MAAL,CAAYI,OAAZ,GAAsB,MAAKJ,MAAL,CAAYI,OAAZ,IAAuB,EAA7C;AACA,gBAAKJ,MAAL,CAAYK,KAAZ,GAAoB,MAAKL,MAAL,CAAYK,KAAZ,IAAqB,EAAzC;AACA,gBAAKL,MAAL,CAAYM,KAAZ,GAAoB,MAAKN,MAAL,CAAYM,KAAZ,IAAqB,EAAzC,CAX2C,CAWE;AAXF;AAY5C;;;;uCAEY;AACX,gBAAIC,OAAO,IAAX;AACA,mBAAO,KAAKC,UAAL,CAAgBC,YAAhB,CAA6B,KAAKT,MAAlC,EACJU,IADI,CACC,UAAUC,OAAV,EAAmB;AACvBA,sBAAQC,OAAR,CAAgB,UAAUC,CAAV,EAAa;AAC3B;AACAN,qBAAKP,MAAL,CAAYG,KAAZ,CAAkBU,EAAEC,MAApB,IAA8BD,EAAEE,IAAhC;AACAR,qBAAKP,MAAL,CAAYI,OAAZ,CAAoBS,EAAEG,IAAtB,IAA8BH,EAAEC,MAAhC;AACAP,qBAAKP,MAAL,CAAYK,KAAZ,CAAkBQ,EAAEC,MAApB,IAA8BD,EAAEI,IAAhC;AACD,eALD;AAMA,qBAAON,OAAP;AACD,aATI,EAUJD,IAVI,CAUC,KAAKZ,YAAL,CAAkBoB,mBAAlB,CAAsC,KAAtC,CAVD,CAAP;AAWA;AACD;;;uCAEY;AACX,gBAAIX,OAAO,IAAX;AACA,mBAAO,KAAKC,UAAL,CAAgBW,YAAhB,CAA6B,KAAKnB,MAAlC,EACJU,IADI,CACC,UAAUU,OAAV,EAAmB;AACvB;AACAA,sBAAQR,OAAR,CAAgB,UAAUS,CAAV,EAAa;AAC3Bd,qBAAKP,MAAL,CAAYM,KAAZ,CAAkBe,EAAEL,IAApB,IAA4B;AAC1BM,sBAAID,EAAEC,EADoB;AAE1BC,6BAAWF,EAAEE;AAFa,iBAA5B;AAID,eALD;AAMA,qBAAOH,OAAP;AACD,aAVI,EAUF,UAAUI,QAAV,EAAoB;AACrB,qBAAO,EAAP;AACD,aAZI,EAaJd,IAbI,CAaC,KAAKZ,YAAL,CAAkBoB,mBAAlB,CAAsC,KAAtC,CAbD,CAAP;AAcA;AACD;;;0CAEe;AACd;AACA;AACA;AACA,iBAAKlB,MAAL,CAAYC,MAAZ,GAAqB,KAAKD,MAAL,CAAYI,OAAZ,CAAoB,KAAKJ,MAAL,CAAYC,MAAhC,CAArB;;AAEA,iBAAKwB,SAAL,CAAeC,OAAf,GANc,CAMY;AAC3B;;;0CAEe;AACd,iBAAKD,SAAL,CAAeC,OAAf,GADc,CACY;AAC3B;;;;QA9D6ChC,S;;;;AAiEhDC,iCAA2BgC,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["// Copyright 2016 Fraunhofer Institute for Applied Information Technology FIT\n\nimport {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv) {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.target.metric = this.target.metric || 'select metric';\n    this.target.source = this.target.source || 'select source';\n    // Stored for mapping\n    this.target.UUIDs = this.target.UUIDs || {};\n    this.target.Legends = this.target.Legends || {};\n    this.target.Types = this.target.Types || {};\n    this.target.Aggrs = this.target.Aggrs || {}; // Aggregations\n  }\n\n  getOptions() {\n    var that = this;\n    return this.datasource.queryMetrics(this.target)\n      .then(function (metrics) {\n        metrics.forEach(function (m) {\n          // Save mappings of uuid, text, legend, and type\n          that.target.UUIDs[m.legend] = m.uuid;\n          that.target.Legends[m.text] = m.legend;\n          that.target.Types[m.legend] = m.type;\n        });\n        return metrics;\n      })\n      .then(this.uiSegmentSrv.transformToSegments(false));\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  getSources() {\n    var that = this;\n    return this.datasource.querySources(this.target)\n      .then(function (sources) {\n        // save a map of source->aggregation ids\n        sources.forEach(function (s) {\n          that.target.Aggrs[s.text] = {\n            id: s.id,\n            aggregate: s.aggregate\n          };\n        });\n        return sources;\n      }, function (rejected) {\n        return [];\n      })\n      .then(this.uiSegmentSrv.transformToSegments(false));\n    // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  metricChanged() {\n    // Change the metric name to legend text: '(shortID) resourceName'\n    //  where shortID is the first 4 bytes of the uuid\n    // This will be used as DOM's property and graph's legend\n    this.target.metric = this.target.Legends[this.target.metric];\n\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  sourceChanged() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}