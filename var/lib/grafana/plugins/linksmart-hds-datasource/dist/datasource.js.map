{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","type","url","name","q","datasourceRequest","method","then","response","status","message","title","options","query","filterPlaceholders","targets","filter","target","hide","length","data","entries","Array","apply","map","datapoints","parent","recursiveReq","page","idi","source","apiEndpoint","senmlValues","float","string","bool","senmlValue","Types","metric","senmlFields","value","time","startsWith","Aggrs","id","aggregate","uuid","UUIDs","range","from","toISOString","to","d","total","convertData","concat","e","i","convertMetrics","res","legend","split","resource","text","Promise","resolve","reject","convertSources","formatRetention","retention","index","r","reduce","aggregation","input","a","r2","aggregates","array","push","interval","sortBy","slice"],"mappings":"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","file":"datasource.js","sourcesContent":["// Copyright 2016 Fraunhofer Institute for Applied Information Technology FIT\n\nimport _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n  }\n\n  // Required\n  // Used for testing datasource in datasource configuration page\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return {status: \"success\", message: \"Data source is working\", title: \"Success\"};\n      }\n    });\n  }\n\n  // Query data from Data API\n  // Called once per panel (graph)\n  query(options) {\n    var query = this.filterPlaceholders(options);\n    //console.log(\"query QUERY:\", JSON.stringify(query));\n\n    // Filter targets that are set to hidden\n    query.targets = _.filter(query.targets, target => {\n      return target.hide != true;\n    });\n\n    // All targets filtered OR no metric selected\n    if (query.targets.length == 0 || !('metric' in query.targets[0])) {\n      return {data: []}; // return this.q.when([]);\n    }\n\n    // Make a new array with zero-valued object fields\n    var entries = Array.apply(null, Array(query.targets.length)).map(function () {\n      return {target: '', datapoints: []};\n    });\n\n    var parent = this;\n    // Recursively query all pages of every target\n    function recursiveReq(page, idi) {\n      var target = query.targets[idi];\n      var source = target.source;\n      var apiEndpoint = \"data/\";\n      var senmlValues = {float: \"v\", string: \"sv\", bool: \"bv\"}\n      var senmlValue = senmlValues[target.Types[target.metric]];\n      var senmlFields = {value: senmlValue, time: \"t\"};\n      // Query for aggregation data\n      if (!source.startsWith(\"value\")) {\n        apiEndpoint = \"aggr/\" + target.Aggrs[source].id + \"/\";\n        senmlFields.value = target.Aggrs[source].aggregate;\n        senmlFields.time = \"ts\";\n      }\n\n      var uuid = target.UUIDs[target.metric];\n      return parent.backendSrv.datasourceRequest({\n        url: parent.url + \"/\" + apiEndpoint + uuid +\n        '?start=' + query.range.from.toISOString() + '&end=' + query.range.to.toISOString() + '&page=' + page,\n        data: query,\n        method: 'GET'\n      }).then(function (d) {\n        var total = d.data.total; // total from data api\n        var datapoints = parent.convertData(d.data, senmlFields);\n        // append aggregate name to metric title\n        var aggregate = senmlFields.value == senmlValue ? '' : '.' + senmlFields.value;\n        entries[idi].target = target.metric + aggregate;\n        entries[idi].datapoints = entries[idi].datapoints.concat(datapoints);\n\n        if (total > entries[idi].datapoints.length) {\n          // query the next page\n          return recursiveReq(++page, idi);\n        } else if (idi < query.targets.length - 1) {\n          // one target done, query the next target\n          return recursiveReq(1, ++idi);\n        } else {\n          // all done\n          d.data = entries;\n          return d;\n        }\n\n      });\n    } // end func\n\n    // Start from page 1, id 0\n    return recursiveReq(1, 0);\n  }\n\n  // Convert historical SenML data from Data/Aggr API to Grafana datapoints\n  convertData(data, senmlFields) {\n    var datapoints = Array(data.data.e.length);\n    for (var i = 0; i < data.data.e.length; i++) {\n      datapoints[i] = [data.data.e[i][senmlFields.value], data.data.e[i][senmlFields.time] * 1000];\n    }\n\n    return datapoints;\n  }\n\n  // Remove targets that have unselected metric or source\n  filterPlaceholders(options) {\n    options.targets = _.filter(options.targets, target => {\n      return target.metric !== 'select metric' && target.source !== 'select source';\n    });\n\n    return options;\n  }\n\n  // Query list of metrics from Registry API\n  // Required for templating\n  queryMetrics(options) {\n    return this.backendSrv.datasourceRequest({\n      //url: this.url + '/search',\n      url: this.url + '/registry',\n      data: options,\n      method: 'GET',\n      //headers: { 'Content-Type': 'application/json' }\n    }).then(this.convertMetrics);\n  }\n\n  // Convert registration from Registry API to the format required by Grafana + some meta information\n  convertMetrics(res) {\n    return _.map(res.data.entries, (d, i) => {\n      return {\n        uuid: d.id,\n        legend: '(' + d.id.split('-')[0] + ') ' + d.resource, // (first 4 bytes of uuid) resource name\n        type: d.type,\n        text: d.id + ' : ' + d.resource,\n        value: i\n      };\n    });\n  }\n\n  // Query list of sources of data (value and aggregations) from Registry API\n  // Required for templating\n  querySources(options) {\n    // Metric is not selected\n    if (options.metric == 'select metric') {\n      return new Promise((resolve, reject) => {\n        reject(\"metric not selected\");\n      });\n    }\n\n    var uuid = options.UUIDs[options.metric];\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/registry/' + uuid,\n      method: 'GET',\n      //headers: { 'Content-Type': 'application/json' }\n    }).then(this.convertSources);\n  }\n\n  // Convert meta data about aggregates from Registry API to the format required by Grafana\n  convertSources(res) {\n    function formatRetention(retention) {\n      if (retention == \"\") {\n        return \", retention ∞\"; // infinite retention\n      }\n      return ', retention ' + retention;\n    }\n\n    var index = 0;\n    // raw un-aggregated data\n    var value = {id: 'value', text: 'value' + formatRetention(res.data.retention), value: index++};\n    // Flatten aggregations of a target (datasource)\n    // start with 'value' as input and concatenate flattened aggregates\n    var r = _.reduce(res.data.aggregation, (input, a) => {\n      // Flatten and format aggregates\n      var r2 = _.reduce(a.aggregates, (array, aggregate) => {\n        array.push({\n          id: a.id,\n          aggregate: aggregate,\n          text: aggregate + ', every ' + a.interval + formatRetention(a.retention),\n          value: index++\n        });\n        return array;\n      }, []);\n\n      return input.concat(r2);\n    }, [value]);\n\n    // sort aggregates\n    r = [r[0]].concat(_.sortBy(r.slice(1, r.length), 'text'));\n    return r;\n\n  }\n}\n"]}